# -*- mode: Org; eval: (flyspell-mode 0) -*- #
#+title: Emacs Configuration
#+STARTUP: hidestars

* Editor

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'windows-nt)
    (setenv "Home" (getenv "UserProfile")))

  (cond ((getenv "EMACS_HOME_DIR")
         (setq default-directory (getenv "EMACS_HOME_DIR")))
        ((eq system-type 'windows-nt)
         (setq default-directory (concat (getenv "UserProfile") "\\")))
        (t
         (setq default-directory "~/")))

  (when (getenv "EMACS_HOME_DIR")
    (setenv "EDITOR" "edit"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)

  (setq gc-cons-threshold (* 100 1024 1024)
        read-process-output-max (* 1024 1024))

  (setq visible-bell t
        fill-column 80
        make-backup-files nil
        query-replace-highlight t
        search-highlight t
        inhibit-splash-screen t
        indent-tabs-mode nil
        show-paren-delay 0
	mouse-highlight nil)

  (delete-selection-mode)
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (global-font-lock-mode t)
  (electric-pair-mode 1)
  (show-paren-mode 1)
  (global-undo-tree-mode)

  (global-auto-revert-mode 1)
  (setq revert-without-query '(".pdf"))

  (add-hook 'prog-mode-hook #'hs-minor-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun yes-or-no-p (arg)
    "An alias for y-or-n-p, because I hate having to type 'yes' or 'no'."
    (y-or-n-p arg))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(1))
(setq mouse-wheel-progressive-speed nil)

(global-set-key (kbd "<mouse-4>") 'scroll-down-line)
(global-set-key (kbd "<mouse-5>") 'scroll-up-line)
#+END_SRC

Fix mouse when using emacsclient in tty and daemon launches via gui.

#+BEGIN_SRC emacs-lisp
  (defun my-terminal-config (&optional frame)
    "Establish settings for the current terminal."
    (if (not frame) ;; The initial call.
        (xterm-mouse-mode 1)
      ;; Otherwise called via after-make-frame-functions.
      (if xterm-mouse-mode
          ;; Re-initialise the mode in case of a new terminal.
          (xterm-mouse-mode 1))))

  ;; Evaluate both now (for non-daemon emacs) and upon frame creation
  ;; (for new terminals via emacsclient).
  (my-terminal-config)
  (add-hook 'after-make-frame-functions 'my-terminal-config)
#+END_SRC

#+BEGIN_SRC emacs-lisp :results silent
(require 'saveplace)
(save-place-mode 1)

(setq na-save-places-filename
      (concat "source/.emacs-places-" (system-name)))

(cond ((getenv "EMACS_HOME_DIR")
       (setq save-place-file
	     (concat "/storage/" na-save-places-filename)))
      (t
       (setq save-place-file
	     (concat "~/" na-save-places-filename))))

(run-with-idle-timer (* 30 60) t #'save-place-kill-emacs-hook)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(cond ((getenv "EMACS_HOME_DIR")
       (setq bookmark-default-file
	     "/storage/source/.emacs-bookmarks"))
      (t
       (setq bookmark-default-file
	     "~/source/.emacs-bookmarks")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq password-cache t) ; enable password caching
  (setq password-cache-expiry (* 12 3600)) ; for twelfe hours (time in secs)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun na-zoom-in ()
    (interactive)
    (set-face-attribute 'default nil :height 
                        (+ (face-attribute 'default :height) 10)))

  (defun na-zoom-out ()
    (interactive)
    (set-face-attribute 'default nil :height 
                        (- (face-attribute 'default :height) 10)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (when  (not (eq system-type 'windows-nt))
    (autoload 'flyspell-mode "flyspell" "On-the-fly spelling checker." t)

    (add-hook 'message-mode-hook 'turn-on-flyspell)
    (add-hook 'text-mode-hook 'turn-on-flyspell)
    (add-to-list 'ispell-skip-region-alist '("+begin_src" . "+end_src"))

    (defun turn-on-flyspell ()
      "Force flyspell-mode on using a positive arg.  For use in hooks."
      (interactive)
      (flyspell-mode 1)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (require 'helm)

  (setq-default helm-M-x-fuzzy-match t)
  (global-set-key (kbd "M-x") #'helm-M-x)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq display-buffer-alist
	'(("magit:.*" (display-buffer-same-window))))
#+END_SRC

* Terminal
** Path

#+BEGIN_SRC emacs-lisp
(if (eq system-type 'windows-nt)
    (progn
      (setenv "PATH"
              (concat
               "C:\\Program Files\\CMake\\bin;"
               "C:\\MinGW\\bin;"
	       (concat (getenv "HOME") ";")
	       (concat (getenv "HOME") "\\Documents;")
	       (concat (getenv "HOME") "\\Documents\\gzip\\bin;")
	       (concat (getenv "HOME") "\\AppData\\Roaming\\Python\\Python36\\Scripts;")
	       (concat (getenv "HOME") "\\AppData\\Roaming\\Python\\Python39\\Scripts;")
	       "C:\\Arduino;"
               "C:\\Program Files\\Arduino;"
               (getenv "PATH")))
      (setenv "C_INCLUDE_PATH" "C:\\MinGW\\include")
      (setenv "CPLUS_INCLUDE_PATH" "C:\\MinGW\\include"))
  (setenv "PATH"
          (concat
           "/usr/local/bin:"
	   "/opt/homebrew/bin/:"
           (concat (getenv "HOME") "/.bin:")
           (concat (getenv "HOME") "/.local/bin:")
           (concat (getenv "HOME") "/.git-annex.linux:")
           (concat (getenv "HOME") "/.rclone:")
           (getenv "PATH"))))

(if (eq system-type 'windows-nt)
    (setq exec-path (split-string (getenv "PATH") ";"))
  (setq exec-path (split-string (getenv "PATH") ":")))

(setenv "PAGER" "cat")
;; (setenv "DISPLAY" ":0")
#+END_SRC

** EShell

#+begin_src emacs-lisp
(require 'eshell)
(require 'em-alias)
(require 'em-tramp) ; to load eshell’s sudo

(setq eshell-hist-ignoredups t
      eshell-ls-initial-args '("-a")              ; list of args to pass to ls (default = nil)
      eshell-prefer-lisp-functions t              ; prefer built-in eshell commands to external ones
      eshell-visual-commands '("htop" "ssh" "nvtop")
      eshell-prompt-regexp (rx bol "\u03BB" space)
      eshell-banner-message ""
      eshell-cmpl-cycle-completions nil
      eshell-scroll-to-bottom-on-input 'all
      eshell-destroy-buffer-when-process-dies t)

(add-hook 'eshell-mode-hook
          (lambda ()
	    (company-mode -1)
            (define-key eshell-mode-map (kbd "<up>") #'eshell-previous-input)
            (define-key eshell-mode-map (kbd "<down>") #'eshell-next-input)))
#+end_src

*** Prompt

#+BEGIN_SRC emacs-lisp
(defun na-shell-git-branch (pwd)
  (interactive)
  (if (and (eshell-search-path "git")
           (locate-dominating-file pwd ".git"))
      (concat " \u2014 " (magit-get-current-branch))
    ""))

(setq eshell-prompt-function
      (lambda ()
        (concat
         (propertize (format-time-string "%H:%M" (current-time)) 'face `(:foreground "Grey50"))
         (propertize " \u2014 " 'face `(:foreground "Grey30"))
         (propertize (eshell/pwd) 'face `(:foreground "Grey50"))
         (propertize (na-shell-git-branch (eshell/pwd)) 'face `(:foreground "Grey50"))
         (propertize "\n" 'face `(:foreground "Grey30"))
         (propertize (if (= (user-uid) 0) "# " "\u03BB ") 'face `(:foreground "DeepSkyBlue3")))))
#+END_SRC

*** Aliases

#+BEGIN_SRC emacs-lisp
(eshell/alias "df" "df -h")
(eshell/alias "ps-grep" "ps ax | grep -i $1")
(eshell/alias "sudo" "eshell/sudo $*")
(eshell/alias "docker" "/usr/bin/docker $*")
(eshell/alias "chmod" "/usr/bin/chmod $*")

;; mirror host /folder/
(eshell/alias "mirror" "rsync -avuz -e ssh $2 $1:$2 --delete")
(eshell/alias "rcp" "rsync -rvLK $1 $2")

(eshell/alias "ggc" "git repack -ad; git gc")
(eshell/alias "gd" "magit-diff-unstaged")
(eshell/alias "ga" "git annex  $*")
(eshell/alias "gas" "git annex sync")
(eshell/alias "gag" "git annex get . --not --in here")
(eshell/alias "gac" "git annex add . && git annex sync --content")
#+END_SRC

*** Commands

#+begin_src emacs-lisp
;;Clear the eshell buffer.
(defun eshell/clear ()
  (let ((eshell-buffer-maximum-lines 0))
    (eshell-truncate-buffer)))

(defalias 'cls 'eshell/clear)
#+end_src

#+begin_src emacs-lisp
(defun pcomplete/conn ()
  (pcomplete-here* (na-ssh-completions)))

(if (eq system-type 'windows-nt)
    (eshell/alias "conn" "cd /sshx:$1:~")
  (eshell/alias "conn" "cd /ssh:$1:~"))
#+end_src

#+begin_src emacs-lisp
;; nq exec remote file
(defun eshell/rnq (host file &rest options)
  (let ((default-directory (concat "/ssh:" host ":~")))
    (eshell/echo
     (shell-command-to-string
      (concat "nq " file " "
	      (string-join
	       (mapcar 'prin1-to-string options) " "))))))

(defun eshell/rkill (host pid)
  (let ((default-directory (concat "/ssh:" host ":~")))
    (eshell/echo
     (shell-command-to-string (concat "kill -9 " (number-to-string pid))))))
#+end_src

=eshell-exec-visual= is not tramp-aware. Let’s make it tramp-aware for
SSH at least,

#+BEGIN_SRC emacs-lisp :results silent
;; https://gist.github.com/ralt/a36288cd748ce185b26237e6b85b27bb
(require 'em-term)

(defun eshell-exec-visual (&rest args)
  "Run the specified PROGRAM in a terminal emulation buffer.
 ARGS are passed to the program.  At the moment, no piping of input is
 allowed."
  (let* (eshell-interpreter-alist
	 (original-args args)
	 (interp (eshell-find-interpreter (car args) (cdr args)))
	 (in-ssh-tramp (and (tramp-tramp-file-p default-directory)
			    (equal (tramp-file-name-method
				    (tramp-dissect-file-name default-directory))
				   "ssh")))
	 (program (if in-ssh-tramp
		      "ssh"
		    (car interp)))
	 (args (if in-ssh-tramp
		   (let ((dir-name (tramp-dissect-file-name default-directory)))
		     (eshell-flatten-list
		      (list
		       "-t"
		       (tramp-file-name-host dir-name)
		       (format
			;;"export TERM=xterm-256color; cd %s; exec %s"
			"cd %s; exec %s"
			(tramp-file-name-localname dir-name)
			(string-join
			 (append
			  (list (tramp-file-name-localname (tramp-dissect-file-name (car interp))))
			  (cdr args))
			 " ")))))
		 (eshell-flatten-list
		  (eshell-stringify-list (append (cdr interp)
						 (cdr args))))))
	 (term-buf
	  (generate-new-buffer
	   (concat "*"
		   (if in-ssh-tramp
		       (format "%s %s" default-directory (string-join original-args " "))
		     (file-name-nondirectory program))
		   "*")))
	 (eshell-buf (current-buffer)))
    (save-current-buffer
      (switch-to-buffer term-buf)
      (term-mode)
      (set (make-local-variable 'term-term-name) eshell-term-name)
      (make-local-variable 'eshell-parent-buffer)
      (setq eshell-parent-buffer eshell-buf)
      (term-exec term-buf program program nil args)
      (let ((proc (get-buffer-process term-buf)))
	(if (and proc (eq 'run (process-status proc)))
	    (set-process-sentinel proc 'eshell-term-sentinel)
	  (error "Failed to invoke visual command")))
      (term-char-mode)
      (if eshell-escape-control-x
	  (term-set-escape-char ?\C-x))))
  nil)
#+END_SRC

** Term

#+BEGIN_SRC emacs-lisp
  (require 'multi-term)
  (setq multi-term-program "/bin/bash")
#+END_SRC

** Misc

#+BEGIN_SRC emacs-lisp
  (defun na-new-term(term-or-shell)
    "Open a new instance of eshell."
    (interactive "P")
    (if term-or-shell
        (progn
          (multi-term)
          ;;pass C-c
          (define-key term-raw-map [?\C-c] 'term-send-raw))
      (eshell 'N)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq async-shell-command-display-buffer t
	async-shell-command-buffer 'new-buffer)

  (add-to-list 'display-buffer-alist
	       (cons "\\*Async Shell Command\\*.*" (cons #'display-buffer-no-window nil)))
#+END_SRC

* Languages

Will bounce between matching parens just like % in vi

#+BEGIN_SRC emacs-lisp
  (defun na-bounce-sexp ()
    (interactive)
    (let ((prev-char (char-to-string (preceding-char)))
          (next-char (char-to-string (following-char))))
      (cond ((string-match "[[{(<]" next-char) (forward-sexp 1))
            ((string-match "[\]})>]" prev-char) (backward-sexp 1))
            (t (error "%s" "Not on a paren, brace, or bracket")))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package hl-todo
    :hook (prog-mode . hl-todo-mode)
    :config
    (setq hl-todo-highlight-punctuation ":"
          hl-todo-keyword-faces
          `(("TODO"       warning bold)
            ("FIXME"      error bold)
            ("HACK"       font-lock-constant-face bold)
            ("REVIEW"     font-lock-keyword-face bold)
            ("NOTE"       success bold)
            ("DEPRECATED" font-lock-doc-face bold))))
#+END_SRC

** Clojure

 #+BEGIN_SRC emacs-lisp
   (require 'clojure-mode)
   (require 'clojure-mode-extra-font-locking)
 #+END_SRC

** C/C++

 #+BEGIN_SRC emacs-lisp
   (add-to-list 'auto-mode-alist '("[.]pde$" . c++-mode))
   (add-to-list 'auto-mode-alist '("[.]ino$" . c++-mode))
   (add-to-list 'auto-mode-alist '("[.]h$" . c++-mode))
   (add-to-list 'auto-mode-alist '("[.]cpp$" . c++-mode))
 #+END_SRC

** Matlab

 #+BEGIN_SRC emacs-lisp
   (autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)

   (add-to-list
    'auto-mode-alist
    '("\\.m$" . matlab-mode))

   (setq matlab-indent-function t)
   (setq matlab-shell-command "matlab")

   (eval-after-load 'matlab-mode 
     '(define-key matlab-mode-map (kbd "C-c C-c") 'matlab-shell-run-cell))
 #+END_SRC

** Python

 #+BEGIN_SRC emacs-lisp
   (require 'python)
   (setq python-shell-interpreter "python3")
   (setq python-indent-guess-indent-offset-verbose nil)
   (add-hook 'python-mode-hook #'python-cell-mode 1)

   (with-eval-after-load 'python-cell
     (setq python-cell-highlight-cell nil)
     (define-key python-cell-mode-map (kbd "C-j") 'python-cell-shell-send-cell))
 #+END_SRC

** Docker

 #+BEGIN_SRC emacs-lisp
   (require 'dockerfile-mode)
   (require 'docker-compose-mode)

   (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
 #+END_SRC

** Latex

 #+BEGIN_SRC emacs-lisp
   (setq latex-run-command "pdflatex")

   (add-hook 'TeX-after-compilation-finished-functions
             #'TeX-revert-document-buffer)

   (defun tex-compile-without-changing-windows ()
     (interactive)
     (save-buffer)
     (save-window-excursion
       (tex-compile
	default-directory
	(concat latex-run-command " " buffer-file-name))))
 #+END_SRC

** Pine Script

#+begin_src emacs-lisp
  (require 'pine-script-mode)
  (add-to-list 'auto-mode-alist '("\\.pine$" . pine-script-mode))
#+end_src

** Skeletons

 #+BEGIN_SRC emacs-lisp
   (setq abbrev-mode t)

   (add-hook 'emacs-lisp-mode-hook 'abbrev-mode)
   (add-hook 'clojure-mode-hook 'abbrev-mode)
   (add-hook 'c++-mode-hook 'abbrev-mode)
   (add-hook 'c-mode-hook 'abbrev-mode)
   (add-hook 'org-mode-hook 'abbrev-mode)

   (define-abbrev-table 'java-mode-abbrev-table '())
   (define-abbrev-table 'clojure-mode-abbrev-table '())
   (define-abbrev-table 'c++-mode-abbrev-table '())
   (define-abbrev-table 'org-mode-abbrev-table '())
 #+END_SRC

 org-mode

 #+BEGIN_SRC emacs-lisp
   (define-skeleton skel-org-babel-notebook-header
     ""
     nil
     "#+title: Notebook" \n
     "#+PROPERTY: header-args:jupyter-python :session /ssh:localhost:python :kernel python" \n
     "#+STARTUP: hidestars\n\n")
 #+END_SRC

 Clojure

 #+BEGIN_SRC emacs-lisp
   (define-skeleton skel-clojure-println
     ""
     nil
     "(println "_")")

   (define-abbrev clojure-mode-abbrev-table "prt" "" 'skel-clojure-println)

   (define-skeleton skel-clojure-defn
     ""
     nil
     "(defn "_" [])")

   (define-abbrev clojure-mode-abbrev-table "defn" "" 'skel-clojure-defn)

   (define-skeleton skel-clojure-if
     ""
     nil
     "(if ("_"))")

   (define-abbrev clojure-mode-abbrev-table "if" "" 'skel-clojure-if )

   (define-skeleton skel-clojure-let
     ""
     nil
     "(let ["_"] )")

   (define-abbrev clojure-mode-abbrev-table "let" "" 'skel-clojure-let)

   (define-skeleton skel-clojure-doseq
     ""
     nil
     "(doseq ["_"] "
     \n > ")")

   (define-abbrev clojure-mode-abbrev-table "doseq" "" 'skel-clojure-doseq)

   (define-skeleton skel-clojure-do
     ""
     nil
     "(do "_" "
     \n > ")")

   (define-abbrev clojure-mode-abbrev-table "do" "" 'skel-clojure-do)

   (define-skeleton skel-clojure-reduce
     ""
     nil
     "(reduce (fn[h v] ) "_" ) ")

   (define-abbrev clojure-mode-abbrev-table "reduce" "" 'skel-clojure-reduce)

   (define-skeleton skel-clojure-try
     ""
     nil
     "(try "_" (catch Exception e (println e)))")

   (define-abbrev clojure-mode-abbrev-table "try" "" 'skel-clojure-try)

   (define-skeleton skel-clojure-map
     ""
     nil
     "(map #() "_")")

   (define-abbrev clojure-mode-abbrev-table "map" "" 'skel-clojure-map)
 #+END_SRC

 C++

 #+BEGIN_SRC emacs-lisp
   (define-skeleton skel-cpp-prt
     ""
     nil
     \n >
     "std::cout << " _ " << std::endl;"
     \n >)

   (define-abbrev c++-mode-abbrev-table "cout"  "" 'skel-cpp-prt)

   (define-skeleton skel-cpp-fsm
     ""
     "Class Name: " \n >
     "class " str " {" \n >
     "void boot() { state = &" str "::shutdown; }" \n >
     "void shutdown() { }" \n >
     "void (" str "::* state)();" \n >
     "public:" \n >
     str "() : state(&" str "::boot) {}" \n >
     "void operator()() {(this->*state)();}" \n >
     "};"\n >)
 #+END_SRC

 Java

 #+BEGIN_SRC emacs-lisp
   (define-skeleton skel-java-println
     "Insert a Java println Statement"
     nil
     "System.out.println(" _ " );")

   (define-abbrev java-mode-abbrev-table "prt" "" 'skel-java-println )
 #+END_SRC
** Company & LSP

 #+BEGIN_SRC emacs-lisp
   (add-hook 'after-init-hook 'global-company-mode)
   (setq company-minimum-prefix-length 1)
   (global-set-key (kbd "TAB") #'company-indent-or-complete-common)
 #+END_SRC

 #+BEGIN_SRC emacs-lisp
   (require 'flycheck)
   (require 'lsp-mode)
   (require 'lsp-ui)

   (setq lsp-diagnostics-provider :flycheck
	 lsp-headerline-breadcrumb-enable nil
	 lsp-ui-sideline-enable t
	 lsp-ui-doc-show-with-cursor nil
	 lsp-ui-sideline-show-code-actions t
	 lsp-modeline-code-actions-enable t
	 lsp-eldoc-enable-hover nil
	 lsp-signature-auto-activate nil
	 lsp-signature-render-documentation nil
	 lsp-ui-sideline-show-diagnostics t
	 lsp-enable-symbol-highlighting nil)

   (require 'lsp-java)

   (setq lsp-keymap-prefix "C-c l")

   (dolist (dir '(
                  "[/\\\\]matlab_runtime"
                  ))
     (push dir lsp-file-watch-ignored))

   (add-hook 'java-mode-hook #'lsp-deferred)
   (add-hook 'clojure-mode-hook #'lsp-deferred)
   ;;(add-hook 'c++-mode-hook #'lsp-deferred)
   (add-hook 'python-mode-hook #'lsp-deferred)

   (lsp-register-client
    (make-lsp-client :new-connection (lsp-stdio-connection '("terraform-ls" "serve"))
                     :major-modes '(terraform-mode)
                     :server-id 'terraform-ls))

   (add-hook 'terraform-mode-hook #'lsp-deferred)

   (lsp-register-client
    (make-lsp-client :new-connection (lsp-tramp-connection "pylsp")
                     :major-modes '(python-mode)
                     :remote? t
                     :server-id 'pyls-remote))
 #+END_SRC

Fix for - https://github.com/emacs-lsp/lsp-ui/issues/607

#+begin_src emacs-lisp :results silent
  (let ((areas '("mode-line" "left-margin" "left-fringe" "right-fringe" "header-line" "vertical-scroll-bar" "nil"))
        loc)
    (while areas
      (setq loc (pop areas))
      (global-set-key
       (kbd (concat "<" loc "> <mouse-movement>")) #'ignore)))
#+end_src

** Projectile

 #+BEGIN_SRC emacs-lisp
   (require 'projectile)
   (projectile-mode +1)
   (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
 #+END_SRC
  
* Org-Mode

#+begin_src emacs-lisp
(require 'org)
(require 'org-superstar)

(setq org-startup-folded t
      org-adapt-indentation nil
      org-return-follows-link t
      org-startup-with-inline-images t
      org-image-actual-width nil
      org-use-speed-commands t
      org-src-window-setup 'current-window
      org-confirm-babel-evaluate nil
      org-babel-python-command "python3"
      org-hide-leading-stars t
      org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-src-preserve-indentation t
      org-ellipsis " ▶"
      org-superstar-headline-bullets-list '("●" "●" "●" "●" "●"))

(add-hook 'org-mode-hook (lambda ()
			   (org-superstar-mode 1)))
#+end_src

#+begin_src emacs-lisp
  (setq org-refile-targets '((nil :maxlevel . 9)
			     (org-agenda-files :maxlevel . 9)))
  (setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
  (setq org-refile-use-outline-path t)                  ; Show full paths for refiling
#+end_src

** Babel

#+BEGIN_SRC emacs-lisp
(require 'ob)

(when  (eq system-type 'windows-nt)
  (setq org-babel-python-command "python.exe"))

;; Run/highlight code using babel in org-mode
(org-babel-do-load-languages
 'org-babel-load-languages
 '((clojure . t)
   (python . t)
   (shell . t)))

(add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)

(setq org-structure-template-alist
      '(("el" . "src emacs-lisp\n")
	("cl" . "src clojure\n")
	("sh" . "src sh\n")
	("jp" . "src jupyter-python\n")
	("s" . "src")
	("l" . "export latex")
	("e" . "example")))

;; Install libtool
;; autoreconf -f -i
;; aclocal && automake --add-missing && autoconf
(when (and module-file-suffix
	   ;;(eq system-type 'gnu/linux)
	   )

  (require 'jupyter)

  (setq jupyter-long-timeout 30
	jupyter-default-timeout 10)

  (require 'ob-jupyter)

  (org-babel-do-load-languages
   'org-babel-load-languages
   (append org-babel-load-languages
	   '((jupyter . t))))

  (setq org-babel-default-header-args:jupyter-python
	'((:async . "yes")
	  (:session . "py")
	  (:results . "raw drawer"))))

(defun org-babel-kill-session ()
  "Kill session for current code block."
  (interactive)
  ;; (unless (org-in-src-block-p)
  ;;   (error "You must be in a src-block to run this command"))
  (save-window-excursion
    (org-babel-switch-to-session)
    (kill-buffer)))

(defun org-babel-remove-result-buffer ()
  "Remove results from every code block in buffer."
  (interactive)
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward org-babel-src-block-regexp nil t)
      (org-babel-remove-result))))
#+END_SRC

** Latex

#+BEGIN_SRC emacs-lisp
  (setq org-latex-prefer-user-labels t)

  (setq org-latex-pdf-process
        '("latexmk -pdflatex='lualatex -shell-escape -interaction nonstopmode' -pdf -f  %f"))
#+END_SRC

** Agenda

#+BEGIN_SRC emacs-lisp
(cond ((file-exists-p "~/org/")
       (setq na-agenda-folder "~/org/"))
      ((file-exists-p "/storage/source/org/")
       (setq na-agenda-folder "/storage/source/org/"))
      ((file-exists-p "~/source/org/")
       (setq na-agenda-folder "~/source/org/"))
      (t
       (setq na-agenda-folder "~/org/")))

(setq na-agenda-files '("notes.org"
                        "inbox.org"
                        "bookmarks.org"
                        "shopping.org"
                        "devops.org"))

(when (file-exists-p na-agenda-folder)
  (setq org-agenda-files
        (mapcar (lambda (f)
                  (concat na-agenda-folder f))
                na-agenda-files)))

(setq org-default-notes-file
      (concat na-agenda-folder (car na-agenda-files)))

(setq org-agenda-custom-commands
      '(("h" "Agenda and Todo"
         ((agenda "" ((org-agenda-span 7)
                      (org-agenda-start-on-weekday nil)))
          (tags-todo "personal/TODO")
          (tags-todo "work/TODO")
          (tags-todo "home/TODO")
          (tags-todo "personal/WAIT")
          (tags-todo "work/WAIT")
          (tags-todo "home/WAIT")))))

(setq org-capture-templates
      '(("p" "Personal TODO" entry
         (file+headline (lambda () (concat na-agenda-folder "notes.org")) "Personal")
         "* TODO %?\n" :prepend t)
	("r" "Research TODO" entry
         (file+headline (lambda () (concat na-agenda-folder "notes.org")) "Research")
         "* TODO %?\n" :prepend t)
	("b" "Read Later" entry
         (file+headline (lambda () (concat na-agenda-folder "bookmarks.org")) "Read Later")
         "* %?\n" :prepend t)
        ("a" "Akademik TODO" entry
         (file+headline (lambda () (concat na-agenda-folder "notes.org")) "Akademik")
         "* TODO %?\n" :prepend t)
	("l" "Robotics Lab TODO" entry
         (file+headline (lambda () (concat na-agenda-folder "notes.org")) "Robotics Lab")
         "* TODO %?\n" :prepend t)))

(setq org-agenda-window-setup 'current-window
      org-agenda-restore-windows-after-quit t
      org-agenda-show-all-dates t
      org-deadline-warning-days 150
      org-archive-subtree-save-file-p t)

(org-toggle-sticky-agenda)

(let ((window-configuration))
  (defun kill-org-agenda ()
    (interactive)
    (kill-this-buffer)
    (set-window-configuration window-configuration))

  (defun jump-to-org-agenda ()
    (interactive)
    (unless (get-buffer "*Org Agenda(h)*")
      (setq window-configuration (current-window-configuration))
      (delete-other-windows)
      (org-agenda nil "h")
      (org-agenda-redo)
      (local-set-key [f1] #'kill-org-agenda)
      (local-set-key "q" #'kill-org-agenda))))

(global-set-key [f1] 'jump-to-org-agenda)

(when (file-exists-p na-agenda-folder)
  (run-with-idle-timer (* 30 60) t #'jump-to-org-agenda))
#+END_SRC

* Dired

#+BEGIN_SRC emacs-lisp
  (require 'dired)

  (setq large-file-warning-threshold nil
	ls-lisp-use-insert-directory-program nil
	ls-lisp-dirs-first t
	dired-dwim-target t
	dired-recursive-deletes 'always)
  
  (quelpa '(emacs-async
            :fetcher github :repo "jwiegley/emacs-async"))

  (autoload 'dired-async-mode "dired-async.el" nil t)
  (dired-async-mode 1)

  (add-hook 'dired-mode-hook
            (lambda ()
              (dired-hide-details-mode)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun na-dired-up-directory-after-kill ()
    "Call 'dired-up-directory' after calling '(kill-buffer (current-buffer))'."
    (interactive)
    (let* ((buf (current-buffer))
           (kill-curr (if (= (length (get-buffer-window-list buf)) 
                             1)
                          t nil)))
      (dired-up-directory)
      (when kill-curr
        (kill-buffer buf))))

  (defun na-dired-down-directory-after-kill ()
    "Call 'dired-find-alternate-file' after calling '(kill-buffer (current-buffer))'."
    (interactive)
    (let ((file (dired-get-filename))) 
      (if (file-directory-p file) 
          (let* ((buf (current-buffer))
                 (kill-curr (if (= (length (get-buffer-window-list buf)) 
                                   1)
                                t nil)))
            (dired-find-file)
            (when kill-curr
              (kill-buffer buf)))
        (dired-advertised-find-file))))

  (define-key dired-mode-map (kbd "C-w") 'na-dired-up-directory-after-kill)
  (define-key dired-mode-map (kbd "RET") 'na-dired-down-directory-after-kill)
#+END_SRC

* Tramp

#+BEGIN_SRC emacs-lisp
(require 'tramp)

(setq remote-file-name-inhibit-cache nil
      tramp-verbose 1
      tramp-completion-reread-directory-timeout nil)

(setq tramp-default-method "ssh")

(when (eq system-type 'windows-nt)
  (setq tramp-default-method "sshx"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun na-ssh-completions ()
    (mapcar
     (lambda (x)
       (car (cdr x)))
     (seq-filter
      (lambda (x)
        (car (cdr x)))
      (tramp-parse-sconfig "~/.ssh/config"))))

  (mapc (lambda (method)
          (tramp-set-completion-function 
           method '((tramp-parse-sconfig "~/.ssh/config"))))
        '("rsync" "scp" "sftp" "ssh"))
#+END_SRC

* Git

#+BEGIN_SRC emacs-lisp
  (require 'magit)

  (when (or (eq system-type 'gnu/linux)
	    (eq system-type 'darwin))

    (require 'magit-todos)
    (setq magit-todos-exclude-globs '("*.ipynb"))
    (magit-todos-mode 1))

  (defalias 'mr 'magit-list-repositories)

  (setq git-committer-name "Nurullah Akkaya"
	git-committer-email "nurullah@nakkaya.com")

  (setq vc-follow-symlinks t
	magit-hide-diffs t
	magit-save-repository-buffers 'dontask)


  (remove-hook 'magit-section-highlight-hook 'magit-section-highlight)
  (remove-hook 'magit-section-highlight-hook 'magit-diff-highlight)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun na-magit-auto-commit-msg ()
    (concat
     "Update:\n"
     (string-join
      (mapcar
       (lambda (f)
         (concat "  " f "\n"))
       (magit-staged-files)))))

  (defun na-magit-auto-commit ()
    (interactive)
    (magit-call-git
     "commit" "-m" (na-magit-auto-commit-msg))
    (magit-refresh))

  (transient-append-suffix
    'magit-commit "a" '("u" "Auto Commit" na-magit-auto-commit))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq magit-repository-directories
        `(("~/org" . 0)
          ("~/source" . 1)
          ("~/Documents/GitHub/" . 1)
          ("/storage/source" . 1)))

  (setq magit-repolist-columns
        '(("Name"    25 magit-repolist-column-ident                  ())
          ("D"        1 magit-repolist-column-dirty                  ())
          ("L<U"      3 magit-repolist-column-unpulled-from-upstream ((:right-align t)))
          ("L>U"      3 magit-repolist-column-unpushed-to-upstream   ((:right-align t)))
          ("Path"    99 magit-repolist-column-path                   ())))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun na-magit-fetch-all-repositories ()
    "Run `magit-fetch-all' in all repositories returned by `magit-list-repos`."
    (interactive)
    (dolist (repo (magit-list-repos))
      (let ((default-directory repo))
        (magit-call-git "fetch" "--all")))
    (revert-buffer))

  (defun na-magit-push-all-repositories ()
    "Run `magit-push' in all repositories returned by `magit-list-repos`."
    (interactive)
    (dolist (repo (magit-list-repos))
      (let ((default-directory repo))
        (let ((current-branch (magit-get-current-branch)))
          (magit-call-git "push" "origin" current-branch))))
    (revert-buffer))

  (defun na-magit-auto-commit-multi-repo (&optional _button)
    "Show the status for the repository at point."
    (interactive)
    (--if-let (tabulated-list-get-id)
        (let* ((file (expand-file-name it))
               (default-directory (file-name-directory file)))
          (magit-call-git "add" "-A")
          (magit-call-git "commit" "-m" (na-magit-auto-commit-msg)))
      (user-error "There is no repository at point"))
    (revert-buffer))

  (add-hook 'magit-repolist-mode-hook
            (lambda ()
              (define-key magit-repolist-mode-map (kbd "f") #'na-magit-fetch-all-repositories)
              (define-key magit-repolist-mode-map (kbd "p") #'na-magit-push-all-repositories)
              (define-key magit-repolist-mode-map (kbd "c") #'na-magit-auto-commit-multi-repo)))
#+END_SRC

* Research

#+begin_src emacs-lisp
  (when (or (eq system-type 'gnu/linux)
	    (eq system-type 'darwin))
    (use-package pdf-tools
      :config
      (pdf-tools-install :no-query)
      (setq-default pdf-view-display-size 'fit-page)
      (setq pdf-annot-activate-created-annotations t)
      (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
      (setq TeX-view-program-selection '((output-pdf "pdf-tools")))
      (setq TeX-view-program-list '(("pdf-tools" "TeX-pdf-tools-sync-view"))))

    (require 'saveplace-pdf-view)

    (use-package org-noter
      :after (:any org pdf-tools)
      :config
      (setq
       org-noter-always-create-frame nil
       org-noter-hide-other t
       org-noter-notes-search-path (list na-agenda-folder)
       org-noter-auto-save-last-location t)
      :ensure t))
#+end_src

* IBuffer

#+BEGIN_SRC emacs-lisp
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("Notes"
                  (or 
                   (name . "^passwd.org$")
                   (name . "^notes.org$")
                   (name . "^notes.org_archive$")
                   (name . "^bookmarks.org$")
                   (name . "^bookmarks.org_archive$")
                   (name . "^inbox.org$")
                   (name . "^inbox.org_archive$")
                   (name . "^devops.org$")
                   (name . "^devops.org_archive$")
                   (name . "^shopping.org$")
                   (name . "^shopping.org_archive$")))
                 ("Documents" (mode . pdf-view-mode))
                 ("Source" (or
                            (mode . java-mode)
                            (mode . clojure-mode)
                            (mode . org-mode)
                            (mode . bibtex-mode)
                            (mode . latex-mode)
                            (mode . xml-mode)
                            (mode . nxml-mode)
                            (mode . scheme-mode)
                            (mode . python-mode)
                            (mode . ruby-mode)
                            (mode . shell-script-mode)
                            (mode . sh-mode)
                            (mode . c-mode)
                            (mode . lisp-mode)
                            (mode . cperl-mode)
                            (mode . pixie-mode)
                            (mode . yaml-mode)
                            (mode . asm-mode)
                            (mode . emacs-lisp-mode)
                            (mode . c++-mode)
                            (mode . makefile-bsdmake-mode)
                            (mode . makefile-mode)
                            (mode . makefile-gmake-mode)
                            (mode . matlab-mode)
                            (mode . css-mode)
                            (mode . js-mode)
                            (mode . terraform-mode)
                            (mode . dockerfile-mode)
                            (mode . docker-compose-mode)
                            (name . "^\\*jupyter-.*")))
                 ("Terminal" (or (mode . term-mode)
                                 (mode . inferior-lisp-mode)
                                 (mode . inferior-python-mode)
                                 (name . "^*MATLAB.*")
                                 (name . "^*monroe.*")
                                 (name . "^*eshell.*")
                                 (name . "^\\*offlineimap\\*$")
				 (name . "^*Async Shell.*")))
                 ("Dired" (or (mode . dired-mode) 
                              (mode . sr-mode)))
                 ("Magit" (or (name . "^\\*magit.*\\*$")
                              (mode . magit-status-mode)
                              (mode . magit-diff-mode)
                              (mode . magit-process-mode)
                              (mode . magit-stash-mode)
                              (mode . magit-revision-mode)
                              (mode . magit-log-mode)))
                 ("Emacs" (or
                           (name . "^\\*Process List\\*$")
                           (name . "^\\*Dired log\\*$")
                           (name . "^\\*info\\*$")
                           (name . "^\\*Man.*\\*$")
                           (name . "^\\*tramp.+\\*$")
                           (name . "^\\*trace.+SMTP.+\\*$")
                           (name . "^\\.todo-do")
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*git-status\\*$")
                           (name . "^\\*git-diff\\*$")
                           (name . "^\\*git-commit\\*$")
                           (name . "^\\*Git Command Output\\*$")
                           (name . "^\\*Org Export/Publishing Help\\*$")
                           (name . "^\\*Org-Babel Error Output\\*$")
                           (name . "^\\*Org PDF LaTeX Output\\*$")
                           (name . "^\\*Org Agenda\\*$")
                           (name . "^\\*Calendar\\*$")
                           (name . "^\\*Messages\\*$")
                           (name . "^\\*Completions\\*$")
                           (name . "^\\*Warnings\\*$")
                           (name . "^\\*Org Agenda.*\\*$")
                           (name . "^\\*Org Help\\*$")
                           (name . "^\\*Backtrace\\*$")
                           (name . "^TAGS$")
                           (name . "^\\*Help\\*$")
                           (name . "^\\*Shell Command Output\\*$")
                           (name . "^\\*Calculator\\*$")
                           (name . "^\\*Calc Trail\\*$")
                           (name . "^\\*Compile-Log\\*$")
                           (name . "^\\*quelpa-build-checkout\\*$")
                           (name . "^\\*helm M-x\\*$")
                           (name . "^\\*transmission\\*$")
                           (name . "^\\*lsp-.*")
                           (name . "^\\*jdtls.*")
                           (name . "^\\*clangd.*")
                           (name . "^\\*Flymake.*")
                           (name . "^\\*Native-.*")
                           (name . "^\\*Async-native-.*")
                           (name . "^\\*emacs\\*$")
                           (name . "^\\*GNU Emacs\\*$")
                           (name . "^\\*compilation\\*$")
                           (name . "^\\*elfeed-.*")
                           (name . "^\\*pylsp.*")
			   (name . "^\\*pyls-remote*")
			   (name . "^\\*LSP Error List*")
			   (name . "^\\*Flycheck Errors*")))))))

  (setq ibuffer-show-empty-filter-groups nil
	ibuffer-expert t)

  (add-hook 'ibuffer-mode-hook
            (lambda ()
	      (ibuffer-auto-mode 1)
              (ibuffer-switch-to-saved-filter-groups "default")
	      (setq ibuffer-hidden-filter-groups (list "Terminal"
						       "Dired"
						       "Magit"
						       "Emacs"))
	      (ibuffer-update nil t)))

  (setq ibuffer-formats '((mark modified read-only " "
                                (name 18 18 :left :elide)
                                " "
                                (mode 16 16 :left :elide)
                                " " filename-and-process)
                          (mark " "
                                (name 16 -1)
                                " " filename)))
#+END_SRC

* Popper

#+begin_src emacs-lisp
  (use-package popper
    :ensure t ; or :straight t
    :bind (("M-q"   . popper-toggle-latest)
           ("M-\\"   . popper-cycle)
           ("C-M-\\" . popper-toggle-type))
    :init
    (setq popper-reference-buffers
          '("^*eshell.*"
	    "^*monroe.*"
	    "^*MATLAB.*"
	    term-mode
	    "^\\*jupyter-.*"
	    inferior-python-mode
	    inferior-lisp-mode
            compilation-mode))

    (setq popper-display-function
	  (lambda (b a)
	    (display-buffer-same-window b a)))

    (popper-mode +1)
    (popper-echo-mode +1))
#+end_src

* elfeed

#+begin_src emacs-lisp
(when (getenv "ELFEED_ENB")
  (require 'elfeed)

  (setq elfeed-db-directory "/storage/dropbox/.elfeed"
	elfeed-sort-order   'ascending)

  (run-with-idle-timer (* 2 60 60) t #'elfeed-update)

  ;;functions to support syncing .elfeed between machines
  ;;makes sure elfeed reads index from disk before launching
  (defun na-elfeed-load-db-and-open ()
    "Wrapper to load the elfeed db from disk before opening"
    (interactive)
    (elfeed-db-load)
    (elfeed)
    (elfeed-search-update--force))

  ;;write to disk when quiting
  (defun na-elfeed-save-db-and-bury ()
    "Wrapper to save the elfeed db to disk before burying buffer"
    (interactive)
    (elfeed-db-save)
    (quit-window))

  (define-key elfeed-search-mode-map (kbd "q") 'na-elfeed-save-db-and-bury)
  (define-key elfeed-show-mode-map (kbd "j") 'elfeed-show-next)
  (define-key elfeed-show-mode-map (kbd "k") 'elfeed-show-prev))
#+end_src

* Key Bindings

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-]")  'ibuffer)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-\\") 'other-window)
  (global-set-key (kbd "C-d")  'na-bounce-sexp)
  
  (global-set-key (kbd "C-x t") 'na-new-term)
  (add-hook 'term-mode-hook
            '(lambda ()
	       (define-key term-raw-map [(control \])] 'ibuffer)
               (define-key term-raw-map (kbd "C-y")  'term-paste)
               (define-key term-raw-map (kbd "C-\\") 'other-window)
	       (define-key term-raw-map (kbd "M-\\") 'popper-cycle)
	       (define-key term-raw-map (kbd "M-q") 'popper-toggle-latest)))

  (global-set-key "\M-[1;5C" 'forward-word)
  (global-set-key "\M-[1;5D" 'backward-word)
  (global-set-key "\M-[1;5A" 'backward-paragraph)
  (global-set-key "\M-[1;5B" 'forward-paragraph)

  (global-set-key (kbd "C-S-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "C-S-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "C-S-<down>") 'shrink-window)
  (global-set-key (kbd "C-S-<up>") 'enlarge-window)

  (global-set-key (kbd "C-c <right>") 'hs-show-block)
  (global-set-key (kbd "C-c <left>")  'hs-hide-block)
  (global-set-key (kbd "C-c <up>")    'hs-hide-all)
  (global-set-key (kbd "C-c <down>")  'hs-show-all)

  (global-set-key [f2] 'na-elfeed-load-db-and-open)
  (global-set-key [f12] (lambda ()
			  (interactive)
			  (async-shell-command "QT_XCB_GL_INTEGRATION=none qutebrowser")))
#+END_SRC

* Theme
** Layout

#+begin_src emacs-lisp :results silent
(setq frame-title-format (list "Emacs " emacs-version))

(column-number-mode 1)
(blink-cursor-mode 1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)

(defun na-reset-window-size ()
  (interactive)
  (when window-system
    (set-frame-size (selected-frame) 80 25)))

(add-hook 'window-setup-hook 'na-reset-window-size)

(when (getenv "EMACS_HOME_DIR")
  (setq frame-title-format (list "emacsd"))
  (set-face-attribute 'default nil :height 125)
  (blink-cursor-mode))
#+end_src

** Font

#+begin_src emacs-lisp :results silent
(when window-system
  (let ((font-dejavu "DejaVu Sans Mono 11")
        (font-monaco "Monaco 10")
        (font-jetbrains "Jet Brains Mono 14")
        (font-jetbrains-w32 "JetBrains Mono-11")
	(font-jetbrains-darwin "JetBrains Mono"))

    (cond ((member font-jetbrains-darwin (font-family-list))
	   (set-face-attribute 'default nil
			       :family font-jetbrains-darwin
			       :height 140))
	  ((x-list-fonts font-jetbrains)
           (set-frame-font font-jetbrains nil t))
          ((x-list-fonts font-monaco)
           (set-frame-font font-monaco nil t))
          ((x-list-fonts font-dejavu)
           (set-frame-font font-dejavu nil t))
          ((x-list-fonts font-jetbrains-w32)
           (set-frame-font font-jetbrains-w32 nil t)))))

(unless (member "all-the-icons" (font-family-list))
  (all-the-icons-install-fonts t))
#+end_src

** Theme

#+BEGIN_SRC emacs-lisp :results silent
(load-theme 'doom-one t)

(defun na-fix-background (&optional frame)
  (let ((frame (or frame (setq frame (selected-frame))))
	(bg "#1c1c1c"))
    (set-face-background 'default bg frame)
    (set-face-background 'org-block bg frame)
    (set-face-background 'org-block-begin-line bg frame)
    (set-face-background 'org-block-end-line bg frame)
    (set-face-background 'show-paren-match bg frame)
    (eval-after-load "magit"
      '(progn
	 (remove-hook 'magit-section-highlight-hook 'magit-diff-highlight)
	 (remove-hook 'magit-section-highlight-hook 'magit-section-highlight)
	 (set-face-background 'magit-diff-context bg frame)
	 (set-face-background 'magit-diff-added-highlight bg frame)
	 (set-face-background 'magit-diff-context-highlight bg frame)
	 (set-face-background 'magit-diff-added bg frame)
	 (set-face-background 'magit-diff-removed bg frame)
	 (set-face-background 'magit-diff-hunk-heading bg frame)
	 (set-face-background 'magit-diff-removed-highlight bg frame)))))

(set-face-attribute 'show-paren-match nil :foreground "red")

(add-hook 'after-make-frame-functions 'na-fix-background)
(add-hook 'window-setup-hook 'na-fix-background)

(require 'doom-modeline)
(add-hook 'after-init-hook #'doom-modeline-mode)
(setq doom-modeline-major-mode-icon nil)
(setq doom-modeline-buffer-state-icon nil)
(setq doom-modeline-buffer-encoding nil)

(set-face-background 'mode-line          "SteelBlue4")
(set-face-background 'mode-line-inactive "SlateGray4")
(set-face-foreground 'mode-line          "gray5")
(set-face-foreground 'mode-line-inactive "gray15")
#+END_SRC

* Server

#+begin_src emacs-lisp
  (when (getenv "EMACS_HOME_DIR")
    (setq server-socket-dir "/opt/emacsd/server")
    (setq server-name "emacsd")
    (defun server-ensure-safe-dir (dir) "Noop" t))

  (unless (server-running-p)
    (server-start))
#+end_src
