#+property: results silent

* Editor

#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)

  (setq fill-column 80)
  (delete-selection-mode)
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (setq make-backup-files nil)
  (setq query-replace-highlight t)
  (setq search-highlight t)
  (global-auto-revert-mode 1)

  (global-font-lock-mode t)
  (show-paren-mode 1)
  (electric-pair-mode 1)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun yes-or-no-p (arg)
    "An alias for y-or-n-p, because I hate having to type 'yes' or 'no'."
    (y-or-n-p arg))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(1))
(setq mouse-wheel-progressive-speed nil)
#+END_SRC

Will bounce between matching parens just like % in vi

#+BEGIN_SRC emacs-lisp
  (defun na-bounce-sexp ()
    (interactive)
    (let ((prev-char (char-to-string (preceding-char)))
          (next-char (char-to-string (following-char))))
      (cond ((string-match "[[{(<]" next-char) (forward-sexp 1))
            ((string-match "[\]})>]" prev-char) (backward-sexp 1))
            (t (error "%s" "Not on a paren, brace, or bracket")))))
#+END_SRC

* Org-Mode

#+BEGIN_SRC emacs-lisp
  (require 'ob)
  (require 'ob-shell)

  (setq org-hide-leading-stars t)
  (setq org-return-follows-link t)
  (setq org-startup-with-inline-images t)
  (setq org-src-window-setup 'current-window)
  (setq org-src-fontify-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-babel-python-command "python3")

  (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))

  ;; Run/highlight code using babel in org-mode
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))

  ;; Fix an incompatibility between the ob-async and ob-ipython packages
  (setq ob-async-no-async-languages-alist '("ipython"))

  (require 'org-bullets)
  (setq org-bullets-bullet-list '("◉" "○"))
  (add-hook 'org-mode-hook
	    (lambda ()
	      (org-bullets-mode 1)))
#+END_SRC

* Clojure

#+BEGIN_SRC emacs-lisp
  (require 'clojure-mode)
  (require 'monroe)
  (require 'clojure-mode-extra-font-locking)
  (add-hook 'clojure-mode-hook 'clojure-enable-monroe)
#+END_SRC

* C/C++

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("[.]pde$" . c++-mode))
  (add-to-list 'auto-mode-alist '("[.]ino$" . c++-mode))
  (add-to-list 'auto-mode-alist '("[.]h$" . c++-mode))
  (add-to-list 'auto-mode-alist '("[.]cpp$" . c++-mode))
#+END_SRC

* Matlab

#+BEGIN_SRC emacs-lisp
  (autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)

  (add-to-list
   'auto-mode-alist
   '("\\.m$" . matlab-mode))

  (setq matlab-indent-function t)
  (setq matlab-shell-command "matlab")
#+END_SRC

* Python

#+BEGIN_SRC emacs-lisp
  (require 'python)
  (setq python-shell-interpreter "python3")
#+END_SRC

* Dired

#+BEGIN_SRC emacs-lisp
  (require 'dired)

  (setq dired-recursive-deletes 'always)
  (add-hook 'dired-mode-hook
	    (lambda ()
	      (dired-hide-details-mode)))

  (defun na-dired-up-directory-after-kill ()
    "Call 'dired-up-directory' after calling '(kill-buffer (current-buffer))'."
    (interactive)
    (let* ((buf (current-buffer))
	   (kill-curr (if (= (length (get-buffer-window-list buf)) 
			     1)
			  t nil)))
      (dired-up-directory)
      (when kill-curr
	(kill-buffer buf))))
#+END_SRC

* Tramp

#+BEGIN_SRC emacs-lisp
  (require 'tramp)

  (setq tramp-default-method "ssh")

  (setq na-tramp-ssh-completions
	'((tramp-parse-sconfig "~/.ssh/config")
	  ;;(tramp-parse-shosts "~/.ssh/known_hosts")
	  ))

  (mapc (lambda (method)
	  (tramp-set-completion-function 
	   method na-tramp-ssh-completions))
	'("fcp" "rsync" "scp" "scpc" "scpx" "sftp" "ssh"))
#+END_SRC

* Flyspell

#+BEGIN_SRC emacs-lisp
  (autoload 'flyspell-mode "flyspell" "On-the-fly spelling checker." t)

  (add-hook 'message-mode-hook 'turn-on-flyspell)
  (add-hook 'text-mode-hook 'turn-on-flyspell)
  (add-to-list 'ispell-skip-region-alist '("+begin_src" . "+end_src"))

  (defun turn-on-flyspell ()
    "Force flyspell-mode on using a positive arg.  For use in hooks."
    (interactive)
    (flyspell-mode 1))
#+END_SRC

* IBuffer

#+BEGIN_SRC emacs-lisp
  (setq ibuffer-saved-filter-groups
	(quote (("default"
		 ("Notes"
		  (or (name . "^brain.org$")
		      (name . "^pass.gpg$")
		      (name . "^brain.org_archive$")
		      (name . "^bookmarks.org_archive$")))
		 ("IRC" (mode . erc-mode))
		 ("Notebooks" (name . "^\\*ein:.*"))
		 ("Source" (or
			    (mode . java-mode)
			    (mode . clojure-mode)
			    (mode . org-mode)
			    (mode . bibtex-mode)
			    (mode . latex-mode)
			    (mode . xml-mode)
			    (mode . nxml-mode)
			    (mode . scheme-mode)
			    (mode . python-mode)
			    (mode . ruby-mode)
			    (mode . shell-script-mode)
			    (mode . sh-mode)
			    (mode . c-mode)
			    (mode . lisp-mode)
			    (mode . cperl-mode)
			    (mode . pixie-mode)
			    (mode . yaml-mode)
			    (mode . asm-mode)
			    (mode . emacs-lisp-mode)
			    (mode . c++-mode)
			    (mode . makefile-bsdmake-mode)
			    (mode . makefile-mode)
			    (mode . makefile-gmake-mode)
			    (mode . matlab-mode)
			    (mode . css-mode)))
		 ("Terminal" (or (mode . term-mode)
				 (mode . inferior-lisp-mode)
				 (mode . inferior-python-mode)
				 (name . "^*MATLAB.*")
				 (name . "^*monroe.*")
				 (name . "^\\*offlineimap\\*$")))
		 ("Dired" (or (mode . dired-mode) 
			      (mode . sr-mode)))
		 ("Magit" (or (name . "^\\*magit.*\\*$")
			      (mode . magit-status-mode)
			      (mode . magit-diff-mode)
			      (mode . magit-process-mode)
			      (mode . magit-stash-mode)
			      (mode . magit-revision-mode)
			      (mode . magit-log-mode)))
		 ("Emacs" (or
			   (name . "^\\*Process List\\*$")
			   (name . "^\\*Dired log\\*$")
			   (name . "^\\*info\\*$")
			   (name . "^\\*Man.*\\*$")
			   (name . "^\\*tramp.+\\*$")
			   (name . "^\\*trace.+SMTP.+\\*$")
			   (name . "^\\.todo-do")
			   (name . "^\\*scratch\\*$")
			   (name . "^\\*git-status\\*$")
			   (name . "^\\*git-diff\\*$")
			   (name . "^\\*git-commit\\*$")
			   (name . "^\\*Git Command Output\\*$")
			   (name . "^\\*Org Export/Publishing Help\\*$")
			   (name . "^\\*Org-Babel Error Output\\*$")
			   (name . "^\\*Org PDF LaTeX Output\\*$")
			   (name . "^\\*Org Agenda\\*$")
			   (name . "^\\*Calendar\\*$")
			   (name . "^\\*Messages\\*$")
			   (name . "^\\*Completions\\*$")
			   (name . "^\\*Warnings\\*$")
			   (name . "^\\*Org Agenda.*\\*$")
			   (name . "^\\*Org Help\\*$")
			   (name . "^\\*Backtrace\\*$")
			   (name . "^TAGS$")
			   (name . "^\\*Help\\*$")
			   (name . "^\\*Shell Command Output\\*$")
			   (name . "^\\*Calculator\\*$")
			   (name . "^\\*Calc Trail\\*$")
			   (name . "^\\*Compile-Log\\*$")))))))

  (setq ibuffer-show-empty-filter-groups nil)

  (add-hook 'ibuffer-mode-hook
	    (lambda ()
	      (ibuffer-switch-to-saved-filter-groups "default")))

  (setq ibuffer-expert t)

  (setq ibuffer-formats '((mark modified read-only " "
				(name 18 18 :left :elide)
				" "
				(mode 16 16 :left :elide)
				" " filename-and-process)
			  (mark " "
				(name 16 -1)
				" " filename)))
#+END_SRC

* Git

#+BEGIN_SRC emacs-lisp
  (setq git-committer-name "Nurullah Akkaya")
  (setq git-committer-email "nurullah@nakkaya.com")

  (setq vc-follow-symlinks t)
  (setq magit-hide-diffs t)
#+END_SRC

* Ein

#+BEGIN_SRC emacs-lisp
  (require 'ein)
  (require 'ein-notebook)
  (require 'ein-subpackages)
  (setq ein:polymode t)

  (setq ein:url-or-port '("http://10.0.0.150:9999"
			  "https://compute.nakkaya.com"))
#+END_SRC

* Multi Term

#+BEGIN_SRC emacs-lisp
  (require 'multi-term)
  (setq multi-term-program "/bin/bash")

  (defun na-new-term ()
    (interactive)
    (multi-term)
    ;;pass C-c
    (define-key term-raw-map [?\C-c] 'term-send-raw))

  (defun na-next-term ()
    (interactive)
    (if (> (length multi-term-buffer-list) 0)
	(let* ((term-buffers (sort (copy-tree multi-term-buffer-list)
				   (lambda (x y)
				     (string< (buffer-name x) (buffer-name y)))))
	       (buff-list (if (get-buffer "*monroe*")
			      (append term-buffers (list (get-buffer "*monroe*")))
			    term-buffers))
	       (buff-list (if (get-buffer "*MATLAB*")
			      (append buff-list (list (get-buffer "*MATLAB*")))
			    buff-list))
	       (buffer-list-len (length buff-list))
	       (index (position (current-buffer) buff-list)))
	  (if index
	      (let ((target-index (mod (+ index 1) buffer-list-len)))
		(switch-to-buffer (nth target-index buff-list)))
	    (switch-to-buffer (car buff-list))))
      (na-new-term)))

  (defun na-term-toggle-mode ()
    "Toggle between term-char-mode and term-line-mode."
    (interactive)
    (if (term-in-line-mode)
	(progn
	  (term-char-mode)
	  (term-send-raw-string "\C-e"))
      (term-line-mode)))

  (add-hook 'term-mode-hook
	    (lambda () 
	      (setq mode-line-format
		    '((-3 . "%p") ;; position
		      " %b "
		      mode-line-process))))
#+END_SRC

* Key Bindings

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-]")  'ibuffer)
  (global-set-key (kbd "C-\\") 'other-window)
  (global-set-key (kbd "C-d")  'na-bounce-sexp)
  (global-set-key "\C-xgs"     'magit-status)
  (global-set-key "\C-xrl"     'monroe)


  (define-key dired-mode-map (kbd "C-w") 'na-dired-up-directory-after-kill)

  (global-set-key (kbd "C-x t") 'na-new-term)
  (global-set-key (kbd "M-\\")  'na-next-term)
  (add-hook 'term-mode-hook
	    '(lambda ()
	       (define-key term-raw-map (kbd "C-y")  'term-paste)
	       (define-key term-raw-map (kbd "C-\\") 'other-window)))
#+END_SRC
* Theme

#+BEGIN_SRC emacs-lisp
  (setq frame-title-format (list "GNU Emacs " emacs-version))
  (set-frame-font "DejaVu Sans Mono 11" nil t)

  (column-number-mode 1)
  (blink-cursor-mode 1)
  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  (tool-bar-mode -1)

  (setq-default mode-line-format
		'(""
		  mode-line-modified
		  (-3 . "%p") ;; position
		  " - %b - "
		  mode-name
		  mode-line-process
		  minor-mode-alist
		  "%n" " - "
		  (line-number-mode "L%l ")
		  (column-number-mode "C%c ")))

  (if window-system
      (progn
	(require 'doom-themes)
	(load-theme 'doom-one t))
    (progn
      (set-face-foreground 'default "color-250")
      (set-face-background 'default "black")
      (set-face-foreground 'font-lock-string-face "color-147")
      (set-face-foreground 'font-lock-keyword-face "color-202")
      (set-face-foreground 'font-lock-function-name-face "color-178")
      (set-face-foreground 'font-lock-builtin-face "color-148")
      (set-face-foreground 'font-lock-comment-face "color-30")
      (set-face-foreground 'org-block-begin-line "color-236")
      (set-face-foreground 'org-block-end-line "color-236")
      (set-face-foreground 'org-todo "color-124")
      (set-face-background 'secondary-selection "black")
      (set-face-attribute  'mode-line
			   nil
			   :foreground "color-166"
			   :background "color-235")

      (set-face-attribute  'mode-line-inactive
			   nil
			   :foreground "color-240"
			   :background "color-234")))


  ;; Delete Annoying Faces
  (set-face-background 'org-block "unspecified")
  (set-face-background 'org-block-end-line "unspecified")
  (set-face-background 'org-block-begin-line "unspecified")
  (set-face-background 'org-level-1 "unspecified")

  (set-face-background 'ein:cell-input-area "unspecified")

  (with-eval-after-load 'magit
    (set-face-background 'magit-diff-added "unspecified")
    (set-face-background 'magit-diff-removed "unspecified")
    (set-face-background 'magit-diff-added-highlight "unspecified")
    (set-face-background 'magit-diff-removed-highlight "unspecified")
    (set-face-background 'magit-diff-context-highlight "unspecified"))
#+END_SRC

