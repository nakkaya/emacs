#+property: results silent

* Editor

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'windows-nt)
    (setenv "Home" (getenv "UserProfile")))

  (setq default-directory "~/")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)

  (setq visible-bell t)
  (setq fill-column 80)
  (delete-selection-mode)
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (setq make-backup-files nil)
  (setq query-replace-highlight t)
  (setq search-highlight t)
  (global-auto-revert-mode 1)

  (global-font-lock-mode t)
  (show-paren-mode 1)
  (electric-pair-mode 1)

  (setq-default indent-tabs-mode nil)

  (add-hook 'prog-mode-hook #'hs-minor-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun yes-or-no-p (arg)
    "An alias for y-or-n-p, because I hate having to type 'yes' or 'no'."
    (y-or-n-p arg))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(1))
(setq mouse-wheel-progressive-speed nil)
#+END_SRC

Will bounce between matching parens just like % in vi

#+BEGIN_SRC emacs-lisp
  (defun na-bounce-sexp ()
    (interactive)
    (let ((prev-char (char-to-string (preceding-char)))
          (next-char (char-to-string (following-char))))
      (cond ((string-match "[[{(<]" next-char) (forward-sexp 1))
            ((string-match "[\]})>]" prev-char) (backward-sexp 1))
            (t (error "%s" "Not on a paren, brace, or bracket")))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq password-cache t) ; enable password caching
  (setq password-cache-expiry (* 12 3600)) ; for twelfe hours (time in secs)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun na-zoom-in ()
    (interactive)
    (set-face-attribute 'default nil :height 
                        (+ (face-attribute 'default :height) 10)))

  (defun na-zoom-out ()
    (interactive)
    (set-face-attribute 'default nil :height 
                        (- (face-attribute 'default :height) 10)))
#+END_SRC

* Org-Mode

#+BEGIN_SRC emacs-lisp
  (require 'ob)

  (setq org-return-follows-link t)
  (setq org-startup-with-inline-images t)
  (setq org-image-actual-width nil)
  (setq org-src-window-setup 'current-window)
  (setq org-src-fontify-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-babel-python-command "python3")
  (setq org-hide-leading-stars t)

  (when  (eq system-type 'windows-nt)
    (setq org-babel-python-command "python.exe"))

  (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))

  ;; Run/highlight code using babel in org-mode
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((clojure . t)
     (python . t)))
#+END_SRC

Agenda Management

#+BEGIN_SRC emacs-lisp
  (setq na-agenda-folder "~/org/"
        na-agenda-files '("notes.org" "inbox.org" "bookmarks.org" "shopping.org"))

  (when (file-exists-p na-agenda-folder)
    (setq org-agenda-files
          (mapcar (lambda (f)
                    (concat na-agenda-folder f))
                  na-agenda-files)))

  (setq org-default-notes-file 
    (concat na-agenda-folder (car na-agenda-files)))

  (setq org-agenda-custom-commands
        '(("h" "Agenda and Todo"
           ((agenda "" ((org-agenda-span 7)
                        (org-agenda-start-on-weekday nil)))
            (tags-todo "personal/TODO")
            (tags-todo "work/TODO")
            (tags-todo "home/TODO")
            (tags-todo "personal/WAIT")
            (tags-todo "work/WAIT")
            (tags-todo "home/WAIT")))))

  (setq org-capture-templates
        '(("p" "Personal TODO" entry (file+headline "~/org/notes.org" "Personal")
           "* TODO %?\n")
          ("r" "Robotics Lab TODO" entry (file+headline "~/org/notes.org" "Robotics Lab")
           "* TODO %?\n")
          ("a" "Akademik TODO" entry (file+headline "~/org/notes.org" "Akademik")
           "* TODO %?\n")
          ("b" "Read Later" entry (file+headline "~/org/bookmarks.org" "Read Later")
           "* %?\n" :prepend t)))

  (setq org-agenda-window-setup 'current-window)
  (setq org-agenda-restore-windows-after-quit t)
  (setq org-agenda-show-all-dates t)
  (setq org-deadline-warning-days 150)
  (setq org-archive-subtree-save-file-p t)
  (org-toggle-sticky-agenda)

  (let ((window-configuration))
    (defun jump-to-org-agenda ()
      (interactive)
      (setq window-configuration (current-window-configuration))
      (delete-other-windows)
      (org-agenda nil "h")
      (org-agenda-redo)
      (local-set-key [f1] '(lambda () 
                             (interactive)
                             (kill-this-buffer)
                             (set-window-configuration window-configuration)))))

  (global-set-key [f1] 'jump-to-org-agenda)

  (when (file-exists-p na-agenda-folder)
    (run-with-idle-timer 600 nil #'jump-to-org-agenda))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defvar org-sync-lock (make-mutex "org-sync-lock"))

  (defun org-sync-cmd (cmd)
    (with-mutex org-sync-lock
      (let ((stdout "*org-sync*")
            (default-directory "~/"))

        (pop-to-buffer-same-window
         (get-buffer-create stdout))

        (with-current-buffer (get-buffer-create stdout)
          (local-set-key "q" 'bury-buffer)
          (eshell-command cmd t)
          (goto-char (point-max))
          (bury-buffer)))))

  (defun org-pull ()
    (interactive)
    (org-sync-cmd "rclone copy -u -v dropbox:org/ ~/org/"))

  (defun org-push ()
    (interactive)
    (org-sync-cmd "rclone --exclude .git/ sync -v ~/org/ dropbox:org/"))

  (defun org-sync ()
    (interactive)
    (org-pull)
    (org-push))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq org-latex-prefer-user-labels t)

  (setq org-latex-pdf-process
        '("latexmk -pdflatex='lualatex -shell-escape -interaction nonstopmode' -pdf -f  %f"))
#+END_SRC

* Clojure

#+BEGIN_SRC emacs-lisp
  (require 'clojure-mode)
  (require 'monroe)
  (require 'clojure-mode-extra-font-locking)
  (add-hook 'clojure-mode-hook 'clojure-enable-monroe)

  (define-key clojure-mode-map (kbd "C-x C-e") 'monroe-eval-expression-at-point)
#+END_SRC

* C/C++

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("[.]pde$" . c++-mode))
  (add-to-list 'auto-mode-alist '("[.]ino$" . c++-mode))
  (add-to-list 'auto-mode-alist '("[.]h$" . c++-mode))
  (add-to-list 'auto-mode-alist '("[.]cpp$" . c++-mode))
#+END_SRC

* Matlab

#+BEGIN_SRC emacs-lisp
  (autoload 'matlab-mode "matlab" "Matlab Editing Mode" t)

  (add-to-list
   'auto-mode-alist
   '("\\.m$" . matlab-mode))

  (setq matlab-indent-function t)
  (setq matlab-shell-command "matlab")

  (when (eq system-type 'windows-nt)
    (setq matlab-shell-command
          (concat dotfiles-dir "devops/windows/matlabShell/matlabShell.exe"))
    (setq matlab-shell-command-switches '("10000" "20000"))
    (setenv "PATH" (concat "C:/PROGRA~1/MATLAB/R2020a/bin/win64;" (getenv "PATH"))))

  (eval-after-load 'matlab-mode 
    '(define-key matlab-mode-map (kbd "C-c C-c") 'matlab-shell-run-cell))
#+END_SRC

* Python

#+BEGIN_SRC emacs-lisp
  (require 'python)
  (setq python-shell-interpreter "python3")
#+END_SRC

* Latex

#+BEGIN_SRC emacs-lisp
  (setq latex-run-command "pdflatex")

  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)

  (defun tex-compile-without-changing-windows ()
    (interactive)
    (save-buffer)
    (save-window-excursion
      (tex-compile
       default-directory
       (concat latex-run-command " " buffer-file-name))))
#+END_SRC

* Skeletons

#+BEGIN_SRC emacs-lisp
  (setq abbrev-mode t)

  (add-hook 'emacs-lisp-mode-hook 'abbrev-mode)
  (add-hook 'clojure-mode-hook 'abbrev-mode)
  (add-hook 'c++-mode-hook 'abbrev-mode)
  (add-hook 'c-mode-hook 'abbrev-mode)
  (add-hook 'org-mode-hook 'abbrev-mode)

  (define-abbrev-table 'java-mode-abbrev-table '())
  (define-abbrev-table 'clojure-mode-abbrev-table '())
  (define-abbrev-table 'c++-mode-abbrev-table '())
#+END_SRC

Clojure

#+BEGIN_SRC emacs-lisp
  (define-skeleton skel-clojure-println
    ""
    nil
    "(println "_")")

  (define-abbrev clojure-mode-abbrev-table "prt" "" 'skel-clojure-println)

  (define-skeleton skel-clojure-defn
    ""
    nil
    "(defn "_" [])")

  (define-abbrev clojure-mode-abbrev-table "defn" "" 'skel-clojure-defn)

  (define-skeleton skel-clojure-if
    ""
    nil
    "(if ("_"))")

  (define-abbrev clojure-mode-abbrev-table "if" "" 'skel-clojure-if )

  (define-skeleton skel-clojure-let
    ""
    nil
    "(let ["_"] )")

  (define-abbrev clojure-mode-abbrev-table "let" "" 'skel-clojure-let)

  (define-skeleton skel-clojure-doseq
    ""
    nil
    "(doseq ["_"] "
    \n > ")")

  (define-abbrev clojure-mode-abbrev-table "doseq" "" 'skel-clojure-doseq)

  (define-skeleton skel-clojure-do
    ""
    nil
    "(do "_" "
    \n > ")")

  (define-abbrev clojure-mode-abbrev-table "do" "" 'skel-clojure-do)

  (define-skeleton skel-clojure-reduce
    ""
    nil
    "(reduce (fn[h v] ) "_" ) ")

  (define-abbrev clojure-mode-abbrev-table "reduce" "" 'skel-clojure-reduce)

  (define-skeleton skel-clojure-try
    ""
    nil
    "(try "_" (catch Exception e (println e)))")

  (define-abbrev clojure-mode-abbrev-table "try" "" 'skel-clojure-try)

  (define-skeleton skel-clojure-map
    ""
    nil
    "(map #() "_")")

  (define-abbrev clojure-mode-abbrev-table "map" "" 'skel-clojure-map)
#+END_SRC

C++

#+BEGIN_SRC emacs-lisp
  (define-skeleton skel-cpp-prt
    ""
    nil
    \n >
    "std::cout << " _ " << std::endl;"
    \n >)

  (define-abbrev c++-mode-abbrev-table "cout"  "" 'skel-cpp-prt)

  (define-skeleton skel-cpp-fsm
    ""
    "Class Name: " \n >
    "class " str " {" \n >
    "void boot() { state = &" str "::shutdown; }" \n >
    "void shutdown() { }" \n >
    "void (" str "::* state)();" \n >
    "public:" \n >
    str "() : state(&" str "::boot) {}" \n >
    "void operator()() {(this->*state)();}" \n >
    "};"\n >)
#+END_SRC

Java

#+BEGIN_SRC emacs-lisp
  (define-skeleton skel-java-println
    "Insert a Java println Statement"
    nil
    "System.out.println(" _ " );")

  (define-abbrev java-mode-abbrev-table "prt" "" 'skel-java-println )
#+END_SRC

* Dired

#+BEGIN_SRC emacs-lisp
  (require 'dired)

  (setq dired-dwim-target t)
  (setq dired-recursive-deletes 'always)

  (add-hook 'dired-mode-hook
            (lambda ()
              (dired-hide-details-mode)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun na-dired-up-directory-after-kill ()
    "Call 'dired-up-directory' after calling '(kill-buffer (current-buffer))'."
    (interactive)
    (let* ((buf (current-buffer))
           (kill-curr (if (= (length (get-buffer-window-list buf)) 
                             1)
                          t nil)))
      (dired-up-directory)
      (when kill-curr
        (kill-buffer buf))))

  (defun na-dired-down-directory-after-kill ()
    "Call 'dired-find-alternate-file' after calling '(kill-buffer (current-buffer))'."
    (interactive)
    (let ((file (dired-get-filename))) 
      (if (file-directory-p file) 
          (let* ((buf (current-buffer))
                 (kill-curr (if (= (length (get-buffer-window-list buf)) 
                                   1)
                                t nil)))
            (dired-find-file)
            (when kill-curr
              (kill-buffer buf)))
        (dired-advertised-find-file))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq na-external-open-files-types 
        '("pdf" "avi" "mp4" "flv" "wmv" "mov" "mkv" 
          "jpg" "png" "m4v" "mpg" "mpeg" "ts" "m3u"))

  (setq na-file-assocs (make-hash-table :test 'equal))

  (if (eq system-type 'gnu/linux)
      (progn 
        (puthash "avi" "vlc" na-file-assocs)
        (puthash "mp4" "vlc" na-file-assocs)
        (puthash "flv" "vlc" na-file-assocs)
        (puthash "wmv" "vlc" na-file-assocs)
        (puthash "mov" "vlc" na-file-assocs)
        (puthash "mkv" "vlc" na-file-assocs)
        (puthash "m4v" "vlc" na-file-assocs)
        (puthash "mpg" "vlc" na-file-assocs)
        (puthash "ts" "vlc" na-file-assocs)
        (puthash "mpeg" "vlc" na-file-assocs)
        (puthash "jpg" "gpicview" na-file-assocs)
        (puthash "png" "gpicview" na-file-assocs)))

  (if (eq system-type 'gnu/linux)
      (setq na-dired-external-viewer "xdg-open"))

  (defun na-dired-display-external (extension)
    "Open file at point in an external application."
    (interactive)
    (let ((file (dired-get-filename))
          (ext-viewer (gethash extension na-file-assocs))
          (process-connection-type nil))
      (if ext-viewer
          (start-process "" nil ext-viewer file)
        (start-process "" nil na-dired-external-viewer file))))

  (defun na-dired-open ()
    "Open file at point in an external application."
    (interactive)
    (let ((file-extension (file-name-extension 
                           (dired-get-filename))))
      (if file-extension
          (if (member (downcase file-extension) na-external-open-files-types)
              (na-dired-display-external (downcase file-extension))
            (na-dired-down-directory-after-kill))
        (na-dired-down-directory-after-kill))))

  (define-key dired-mode-map [return] 'na-dired-open)
#+END_SRC

* Tramp

#+BEGIN_SRC emacs-lisp
  (require 'tramp)

  (setq remote-file-name-inhibit-cache nil
        tramp-verbose 1
        tramp-completion-reread-directory-timeout nil)

  (setq tramp-default-method "ssh")

  (when (eq system-type 'windows-nt)
    (setq tramp-default-method "plink"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun na-ssh-completions ()
    (mapcar
     (lambda (x)
       (car (cdr x)))
     (seq-filter
      (lambda (x)
        (car (cdr x)))
      (tramp-parse-sconfig "~/.ssh/config"))))

  (mapc (lambda (method)
          (tramp-set-completion-function 
           method '((tramp-parse-sconfig "~/.ssh/config"))))
        '("rsync" "scp" "sftp" "ssh"))
#+END_SRC

* Flyspell

#+BEGIN_SRC emacs-lisp
  (when  (not (eq system-type 'windows-nt))
    (autoload 'flyspell-mode "flyspell" "On-the-fly spelling checker." t)

    (add-hook 'message-mode-hook 'turn-on-flyspell)
    (add-hook 'text-mode-hook 'turn-on-flyspell)
    (add-to-list 'ispell-skip-region-alist '("+begin_src" . "+end_src"))

    (defun turn-on-flyspell ()
      "Force flyspell-mode on using a positive arg.  For use in hooks."
      (interactive)
      (flyspell-mode 1)))
#+END_SRC

* Git

#+BEGIN_SRC emacs-lisp
  (require 'magit)

  (defalias 'mr 'magit-list-repositories)

  (setq git-committer-name "Nurullah Akkaya")
  (setq git-committer-email "nurullah@nakkaya.com")

  (setq vc-follow-symlinks t)
  (setq magit-hide-diffs t)

  (remove-hook 'magit-section-highlight-hook 'magit-section-highlight)
  (remove-hook 'magit-section-highlight-hook 'magit-diff-highlight)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq magit-repository-directories
        `(("~/org" . 0)
          ("~/source" . 1)
          ("~/Documents/GitHub/" . 1)))

  (setq magit-repolist-columns
        '(("Name"    25 magit-repolist-column-ident                  ())
          ("D"        1 magit-repolist-column-dirty                  ())
          ("L<U"      3 magit-repolist-column-unpulled-from-upstream ((:right-align t)))
          ("L>U"      3 magit-repolist-column-unpushed-to-upstream   ((:right-align t)))
          ("Path"    99 magit-repolist-column-path                   ())))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun na-magit-fetch-all-repositories ()
    "Run `magit-fetch-all' in all repositories returned by `magit-list-repos`."
    (interactive)
    (dolist (repo (magit-list-repos))
      (let ((default-directory repo))
        (magit-fetch-all (magit-fetch-arguments)))))

  (defun na-magit-push-all-repositories ()
    "Run `magit-push' in all repositories returned by `magit-list-repos`."
    (interactive)
    (dolist (repo (magit-list-repos))
      (let ((default-directory repo))
        (let ((current-branch (magit-get-current-branch)))
          (magit-git-push current-branch (concat "origin/" current-branch) (list ))))))

  (defun na-magit-auto-commit-multi-repo (&optional _button)
    "Show the status for the repository at point."
    (interactive)
    (--if-let (tabulated-list-get-id)
        (let* ((file (expand-file-name it))
               (default-directory (file-name-directory file)))
          (magit-stage-modified)
          (na-magit-auto-commit))
      (user-error "There is no repository at point")))

  (add-hook 'magit-repolist-mode-hook
            (lambda ()
              (define-key magit-repolist-mode-map (kbd "f") #'na-magit-fetch-all-repositories)
              (define-key magit-repolist-mode-map (kbd "p") #'na-magit-push-all-repositories)
              (define-key magit-repolist-mode-map (kbd "c") #'na-magit-auto-commit-multi-repo)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun na-magit-auto-commit-msg ()
    (concat
     "Update:\n"
     (string-join
      (mapcar
       (lambda (f)
         (concat "  " f "\n"))
       (magit-staged-files)))))

  (defun na-magit-auto-commit ()
    (interactive)
    (magit-call-git
     "commit" "-m" (na-magit-auto-commit-msg))
    (magit-refresh))

  (transient-append-suffix
    'magit-commit "a" '("u" "Auto Commit" na-magit-auto-commit))
#+END_SRC

* Terminal

#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'windows-nt)
      (progn
        (setenv "PATH"
                (concat
                 "C:\\Program Files\\CMake\\bin;"
                 "C:\\MinGW\\bin;"
                 "$HOME\\.rclone/;"
                 "$HOME\\Documents\\;"
                 "$HOME\\AppData\\Roaming\\Python\\Python36\\Scripts/;"
                 "$HOME\\AppData\\Roaming\\Python\\Python39\\Scripts/;"
                 "C:\\Program Files\\Arduino;"
                 (getenv "PATH")))
        (setenv "C_INCLUDE_PATH" "C:\\MinGW\\include")
        (setenv "CPLUS_INCLUDE_PATH" "C:\\MinGW\\include"))
    (setenv "PATH"
            (concat
             "/usr/local/bin:"
             (concat (getenv "HOME") "/.bin:")
             (concat (getenv "HOME") "/.local/bin:")
             (concat (getenv "HOME") "/.git-annex.linux:")
             (concat (getenv "HOME") "/.rclone:")
             (getenv "PATH"))))

  (when (eq system-type 'darwin)
    (setq exec-path (split-string (getenv "PATH") ":")))

  (setenv "PAGER" "cat")
  ;; (setenv "DISPLAY" ":0")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (require 'eshell)
  (require 'em-alias)
  (require 'em-tramp) ; to load eshell’s sudo

  (setq eshell-hist-ignoredups t
        eshell-ls-initial-args '("-a")              ; list of args to pass to ls (default = nil)
        eshell-prefer-lisp-functions t              ; prefer built-in eshell commands to external ones
        eshell-visual-commands '("htop" "ssh" "nvtop")
        eshell-prompt-regexp (rx bol "\u03BB" space)
        eshell-banner-message ""
        eshell-cmpl-cycle-completions nil
        eshell-scroll-to-bottom-on-input 'all
        eshell-destroy-buffer-when-process-dies t)

  (add-hook 'eshell-mode-hook
            (lambda ()
              (define-key eshell-mode-map (kbd "<up>") #'eshell-previous-input)
              (define-key eshell-mode-map (kbd "<down>") #'eshell-next-input)))

  (eshell/alias "df" "df -h")
  (eshell/alias "ps-grep" "ps ax | grep -i $1")
  (eshell/alias "sudo" "eshell/sudo $*")

  ;; net use Z: http://10.9.0.190:1337/
  (eshell/alias "airdrop" "davserver -D . -n -J -H 0.0.0.0 -P 1337")
  (eshell/alias "airdrop-simple" "python3 -m http.server")

  ;;Clear the eshell buffer.
  (defun eshell/clear ()
    (let ((eshell-buffer-maximum-lines 0))
      (eshell-truncate-buffer)))

  (defalias 'cls 'eshell/clear)

  (defun eshell/gst (&rest args)
    (magit-status)
    (eshell/echo))

  (eshell/alias "ggc" "git repack -ad; git gc")
  (eshell/alias "gd" "magit-diff-unstaged")
  (eshell/alias "ga" "git annex  $*")
  (eshell/alias "gas" "git annex sync")
  (eshell/alias "gag" "git annex get . --not --in here")

  (defun eshell/pshell ()
    (insert
     (concat "powershell.exe -windowstyle hidden -Command"
             " \"Start-Process powershell  -ArgumentList '-NoExit',"
             " '-Command cd " default-directory "' -Verb runAs\""))
    (eshell-send-input))

  (eshell/alias "rclone-mount" "mkdir $2 && rclone mount $1:$2/ $2/ &")
  (eshell/alias "rclone-umount" "fusermount -u $1 && rm -rf $1")
  (eshell/alias "rclone-sync" "rclone -v sync $2/ $1:$2/")
  (eshell/alias "rclone-pull" "rclone copy -u -v $1:$2/ $2/")
  (eshell/alias
   "rclone-two-way"
   (concat "rclone copy -u -v $1:$2/ $2/" "&&" "rclone -v sync $2/ $1:$2/"))

  (defun pcomplete/conn ()
    (pcomplete-here* (na-ssh-completions)))

  (defun pcomplete/tmux-ssh ()
    (pcomplete-here* (na-ssh-completions)))

  (eshell/alias "conn" "cd /ssh:$1:~")
  (eshell/alias "tmux-ssh" "ssh $1 -t \"tmux attach\"")
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun na-shell-git-branch (pwd)
    (interactive)
    (if (and (eshell-search-path "git")
             (locate-dominating-file pwd ".git"))
        (concat " \u2014 " (magit-get-current-branch))
      ""))

  (setq eshell-prompt-function
        (lambda ()
          (concat
           (propertize (format-time-string "%H:%M" (current-time)) 'face `(:foreground "Grey50"))
           (propertize " \u2014 " 'face `(:foreground "Grey30"))
           (propertize (eshell/pwd) 'face `(:foreground "Grey50"))
           (propertize (na-shell-git-branch (eshell/pwd)) 'face `(:foreground "Grey50"))
           (propertize "\n" 'face `(:foreground "Grey30"))
           (propertize (if (= (user-uid) 0) "# " "\u03BB ") 'face `(:foreground "DeepSkyBlue3")))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (require 'multi-term)
  (setq multi-term-program "/bin/bash")

  (defun na-term-toggle-mode ()
    "Toggle between term-char-mode and term-line-mode."
    (interactive)
    (if (term-in-line-mode)
        (progn
          (term-char-mode)
          (term-send-raw-string "\C-e"))
      (term-line-mode)))

  (add-hook 'term-mode-hook
            (lambda () 
              (setq mode-line-format
                    '((-3 . "%p") ;; position
                      " %b "
                      mode-line-process))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun na-new-term(term-or-shell)
    "Open a new instance of eshell."
    (interactive "P")
    (if term-or-shell
        (progn
          (multi-term)
          ;;pass C-c
          (define-key term-raw-map [?\C-c] 'term-send-raw))
      (eshell 'N)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defconst na-sources-dir
    (if (eq system-type 'windows-nt)
        (expand-file-name "~/Documents/GitHub/")
      (expand-file-name "~/source")))

  (defun na-list-directories (f)
    (seq-filter
     (lambda (x)
       (file-directory-p
        (expand-file-name (concat f "/" x))))
     (directory-files f nil "^\\([^.]\\|\\.[^.]\\|\\.\\..\\)")))

  (defun pcomplete/src ()
    "Completion for `src'"
    (pcomplete-here* (na-list-directories na-sources-dir)))

  (defun src (&optional d)
    (let ((dir (if d
                   (concat na-sources-dir "/" d)
                 na-sources-dir)))
      (eshell/cd (expand-file-name dir))))

  (defun pcomplete/usb ()
    "Completion for `usb'"
    (pcomplete-here* (na-list-directories "/media/nakkaya")))

  (defun usb (d)
    (eshell/cd
     (expand-file-name
      (concat "/media/nakkaya/" d))))

  (defun pcomplete/cdb ()
    "Completion for `cdb'"
    (pcomplete-here* (mapcar (function buffer-name) (buffer-list))))

  (defun cdb (b)
    (eshell/cd
     (expand-file-name
      (with-current-buffer (get-buffer b)
        default-directory))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (require 'cl)

  (defun filter-buffers-with-prefix (prefix)
    "Filter buffers whose names start with the given prefix"
    (interactive "sPrefix to filter: ")
    (let ((buffers))
      (loop for buffer in (buffer-list)
            do (if (string-prefix-p prefix (buffer-name buffer))
                   (push buffer buffers)))
      (sort buffers
            (lambda (a b)
              (string< (buffer-name a) (buffer-name b))))))

  (defun na-next-term ()
    (interactive)
    (let* ((term-buffers (sort (copy-tree multi-term-buffer-list)
                               (lambda (x y)
                                 (string< (buffer-name x) (buffer-name y)))))
           (buff-list (append term-buffers
                              (filter-buffers-with-prefix "*eshell")
                              (filter-buffers-with-prefix "*monroe*")
                              (filter-buffers-with-prefix "*MATLAB")
                              (filter-buffers-with-prefix "*Python")
                              (filter-buffers-with-prefix "*ssh")))
           (buffer-list-len (length buff-list))
           (index (cl-position (current-buffer) buff-list)))
      (if index
          (let ((target-index (mod (+ index 1) buffer-list-len)))
            (switch-to-buffer (nth target-index buff-list)))
        (switch-to-buffer (car buff-list)))))
#+END_SRC

* helm

#+BEGIN_SRC emacs-lisp
  (require 'helm)

  (setq-default helm-M-x-fuzzy-match t)
  (global-set-key (kbd "M-x") #'helm-M-x)
#+END_SRC

* Docker

#+BEGIN_SRC emacs-lisp
  (require 'dockerfile-mode)
  (require 'docker-compose-mode)

  (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
#+END_SRC

* Transmission

#+BEGIN_SRC emacs-lisp
  (setq transmission-host "10.0.0.100")
  (setq transmission-rpc-auth
        '(:username "admin" :password "admin"))
#+END_SRC

* IBuffer

#+BEGIN_SRC emacs-lisp
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("Notes"
                  (or 
                   (name . "^passwd.org$")
                   (name . "^notes.org$")
                   (name . "^notes.org_archive$")
                   (name . "^bookmarks.org$")
                   (name . "^bookmarks.org_archive$")
                   (name . "^shopping.org$")
                   (name . "^shopping.org_archive$")
                   (name . "^inbox.org$")
                   (name . "^inbox.org_archive$")))
                 ("Source" (or
                            (mode . java-mode)
                            (mode . clojure-mode)
                            (mode . org-mode)
                            (mode . bibtex-mode)
                            (mode . latex-mode)
                            (mode . xml-mode)
                            (mode . nxml-mode)
                            (mode . scheme-mode)
                            (mode . python-mode)
                            (mode . ruby-mode)
                            (mode . shell-script-mode)
                            (mode . sh-mode)
                            (mode . c-mode)
                            (mode . lisp-mode)
                            (mode . cperl-mode)
                            (mode . pixie-mode)
                            (mode . yaml-mode)
                            (mode . asm-mode)
                            (mode . emacs-lisp-mode)
                            (mode . c++-mode)
                            (mode . makefile-bsdmake-mode)
                            (mode . makefile-mode)
                            (mode . makefile-gmake-mode)
                            (mode . matlab-mode)
                            (mode . css-mode)
                            (mode . js-mode)
                            (mode . dockerfile-mode)
                            (mode . docker-compose-mode)))
                 ("Jupyter" (or (name . "^\\*ein:.*")))
                 ("EXWM" (or (mode . exwm-mode)))
                 ("Terminal" (or (mode . term-mode)
                                 (mode . inferior-lisp-mode)
                                 (mode . inferior-python-mode)
                                 (name . "^*MATLAB.*")
                                 (name . "^*monroe.*")
                                 (name . "^*eshell.*")
                                 (name . "^\\*offlineimap\\*$")))
                 ("Dired" (or (mode . dired-mode) 
                              (mode . sr-mode)))
                 ("Magit" (or (name . "^\\*magit.*\\*$")
                              (mode . magit-status-mode)
                              (mode . magit-diff-mode)
                              (mode . magit-process-mode)
                              (mode . magit-stash-mode)
                              (mode . magit-revision-mode)
                              (mode . magit-log-mode)))
                 ("Emacs" (or
                           (name . "^\\*Process List\\*$")
                           (name . "^\\*Dired log\\*$")
                           (name . "^\\*info\\*$")
                           (name . "^\\*Man.*\\*$")
                           (name . "^\\*tramp.+\\*$")
                           (name . "^\\*trace.+SMTP.+\\*$")
                           (name . "^\\.todo-do")
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*git-status\\*$")
                           (name . "^\\*git-diff\\*$")
                           (name . "^\\*git-commit\\*$")
                           (name . "^\\*Git Command Output\\*$")
                           (name . "^\\*Org Export/Publishing Help\\*$")
                           (name . "^\\*Org-Babel Error Output\\*$")
                           (name . "^\\*Org PDF LaTeX Output\\*$")
                           (name . "^\\*Org Agenda\\*$")
                           (name . "^\\*Calendar\\*$")
                           (name . "^\\*Messages\\*$")
                           (name . "^\\*Completions\\*$")
                           (name . "^\\*Warnings\\*$")
                           (name . "^\\*Org Agenda.*\\*$")
                           (name . "^\\*Org Help\\*$")
                           (name . "^\\*Backtrace\\*$")
                           (name . "^TAGS$")
                           (name . "^\\*Help\\*$")
                           (name . "^\\*Shell Command Output\\*$")
                           (name . "^\\*Calculator\\*$")
                           (name . "^\\*Calc Trail\\*$")
                           (name . "^\\*Compile-Log\\*$")
                           (name . "^\\*org-sync\\*$")
                           (name . "^\\*quelpa-build-checkout\\*$")
                           (name . "^\\*helm M-x\\*$")
                           (name . "^\\*transmission\\*$")))))))

  (setq ibuffer-show-empty-filter-groups nil)

  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-switch-to-saved-filter-groups "default")))

  (setq ibuffer-expert t)

  (setq ibuffer-formats '((mark modified read-only " "
                                (name 18 18 :left :elide)
                                " "
                                (mode 16 16 :left :elide)
                                " " filename-and-process)
                          (mark " "
                                (name 16 -1)
                                " " filename)))
#+END_SRC

* Key Bindings

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-\\") 'other-window)
  ;;(global-set-key "\C-xgs"     'magit-status)
  (global-set-key "\C-xrl"     'monroe)

  (global-set-key (kbd "C-d")  'na-bounce-sexp)
  (add-hook 'c++-mode-hook
      '(lambda ()
         (local-set-key [(control d)] 'na-bounce-sexp)))
  (add-hook 'c-mode-hook
      '(lambda ()
         (local-set-key [(control d)] 'na-bounce-sexp)))
  (add-hook 'java-mode-hook
      '(lambda ()
         (local-set-key [(control d)] 'na-bounce-sexp)))

  (global-set-key (kbd "C-]")  'ibuffer)
  (add-hook 'term-mode-hook
            '(lambda ()
               (define-key term-raw-map [(control \])] 'ibuffer)))

  (define-key dired-mode-map (kbd "C-w") 'na-dired-up-directory-after-kill)
  (define-key dired-mode-map [return] 'na-dired-down-directory-after-kill)

  (global-set-key (kbd "C-x t") 'na-new-term)

  (global-set-key (kbd "M-\\")  'na-next-term)
  (define-key term-raw-map (kbd "M-\\")  'na-next-term)
  (add-hook 'term-mode-hook
            '(lambda ()
               (define-key term-raw-map (kbd "C-y")  'term-paste)
               (define-key term-raw-map (kbd "C-\\") 'other-window)))

  (global-set-key "\M-[1;5C" 'forward-word)
  (global-set-key "\M-[1;5D" 'backward-word)
  (global-set-key "\M-[1;5A" 'backward-paragraph)
  (global-set-key "\M-[1;5B" 'forward-paragraph)

  (global-set-key (kbd "C-S-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "C-S-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "C-S-<down>") 'shrink-window)
  (global-set-key (kbd "C-S-<up>") 'enlarge-window)

  (global-set-key (kbd "C-c <right>") 'hs-show-block)
  (global-set-key (kbd "C-c <left>")  'hs-hide-block)
  (global-set-key (kbd "C-c <up>")    'hs-hide-all)
  (global-set-key (kbd "C-c <down>")  'hs-show-all)
#+END_SRC

Mouse setup when running in a terminal.

#+BEGIN_SRC emacs-lisp
  (defun scroll-window-forward-line ()
    "Move window forward one line leaving cursor at relative position in window."
    (interactive)
    (scroll-up 1))

  (defun scroll-window-backward-line ()
    "Move window backward one line leaving cursor at relative position in window."
    (interactive)
    (scroll-down 1))

  (unless window-system
    (xterm-mouse-mode t)
    (require 'mouse)
    (defun track-mouse (e))
    (setq mouse-sel-mode t)

    (define-key global-map [mouse-4] 'scroll-window-backward-line)
    (define-key global-map [mouse-5] 'scroll-window-forward-line))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (require 'smart-tab)
  (global-smart-tab-mode 1)
#+END_SRC

* Theme

#+BEGIN_SRC emacs-lisp
  (defun na-load-theme ()
    (progn
      (when window-system
        (setq frame-title-format (list "GNU Emacs " emacs-version))

        (let ((font-dejavu "DejaVu Sans Mono 11")
              (font-monaco "Monaco 10"))

          (when (x-list-fonts font-dejavu)
            (set-frame-font font-dejavu nil t))

          (when (x-list-fonts font-monaco)
            (set-frame-font font-monaco nil t)))

        (when (eq system-type 'darwin)
          (set-face-attribute 'default nil :height 140))

        (load-theme 'doom-one t)

        (set-face-background 'org-block "unspecified")
        (set-face-background 'org-block-begin-line "unspecified")
        (set-face-background 'org-block-end-line "unspecified")

        (set-face-background 'mode-line          "SteelBlue4")
        (set-face-background 'mode-line-inactive "SlateGray4")
        (set-face-foreground 'mode-line          "gray5")
        (set-face-foreground 'mode-line-inactive "gray15"))

      (unless window-system
        (defvar theme-background "color-232")
        (defvar theme-text-color "color-250")

        (set-face-foreground 'default theme-text-color)
        (set-face-background 'default theme-background)
        (set-face-background 'match theme-background)
        (set-face-background 'italic theme-background)
        (set-face-foreground 'font-lock-string-face "color-147")
        (set-face-foreground 'font-lock-keyword-face "color-202")
        (set-face-foreground 'font-lock-function-name-face "color-178")
        (set-face-foreground 'font-lock-builtin-face "color-148")
        (set-face-foreground 'font-lock-comment-face "color-30")
        (set-face-foreground 'org-block-begin-line "color-236")
        (set-face-foreground 'org-block-end-line "color-236")
        (set-face-foreground 'org-todo "color-124")
        (set-face-background 'secondary-selection theme-background)

        (eval-after-load "magit"
          '(progn
             (remove-hook 'magit-section-highlight-hook 'magit-diff-highlight)
             (remove-hook 'magit-section-highlight-hook 'magit-section-highlight)
             (set-face-background 'magit-diff-removed-highlight theme-background)
             (set-face-background 'magit-diff-added-highlight theme-background)
             (set-face-background 'magit-diff-context-highlight theme-background)
             (set-face-background 'magit-diff-added theme-background)
             (set-face-foreground 'magit-diff-added "brightgreen")
             (set-face-background 'magit-diff-removed theme-background)
             (set-face-foreground 'magit-diff-removed "brightred")
             (set-face-background 'magit-diff-hunk-heading theme-background)
             (set-face-foreground 'magit-diff-hunk-heading "color-27")))

        (eval-after-load "diff-mode"
          '(progn
             (set-face-foreground 'diff-added "brightgreen")
             (set-face-foreground 'diff-removed "brightred")
             (set-face-foreground 'diff-header "color-27")
             (set-face-background 'diff-header "color-233")
             (set-face-background 'diff-file-header "color-233")))

        (set-face-attribute  'mode-line
                             nil
                             :foreground "color-166"
                             :background "color-235")
        (set-face-attribute  'mode-line-inactive
                             nil
                             :foreground "color-240"
                             :background "color-234"))

      (column-number-mode 1)
      (blink-cursor-mode 1)
      (menu-bar-mode -1)
      (toggle-scroll-bar -1)
      (tool-bar-mode -1)

      (setq-default mode-line-format
                    '(""
                      mode-line-modified
                      (-3 . "%p") ;; position
                      " - %b - "
                      mode-name
                      mode-line-process
                      minor-mode-alist
                      "%n" " - "
                      (line-number-mode "L%l ")
                      (column-number-mode "C%c ")))))

  (na-load-theme)
#+END_SRC

* Ein

#+BEGIN_SRC emacs-lisp
  (use-package ein
    :defer t
    :init
    (progn
      (require 'ein-notebook)

      (setq ein:url-or-port '("https://compute.nakkaya.com"))
      (setq ein:output-area-inlined-images t)
      (setq ein:worksheet-enable-undo t)

      (defun na/restart-and-execute-all ()
        (interactive)
        (aif (ein:get-notebook)
            (lexical-let ((ws (ein:worksheet--get-ws-or-error)))
              (ein:kernel-delete-session
               (lambda (kernel)
                 (ein:events-trigger (ein:$kernel-events kernel) 'status_restarting.Kernel)
                 (ein:kernel-retrieve-session kernel 0
                                              (lambda (kernel)
                                                (ein:events-trigger (ein:$kernel-events kernel)
                                                                    'status_restarted.Kernel)
                                                (ein:worksheet-execute-all-cells ws))))
               :kernel (ein:$notebook-kernel it)))
          (message "Not in notebook buffer!")))

      (let ((bg (face-attribute 'default :background)))
        (eval-after-load "ein-cell"
          '(progn
             (set-face-attribute 'ein:cell-input-area nil :background bg)
             (set-face-attribute 
              'ein:cell-input-prompt nil :foreground
              (face-attribute 'ido-indicator :foreground))

             (set-face-attribute 'ein:cell-output-area nil :background bg)
             (set-face-attribute 
              'ein:cell-output-prompt nil :foreground
              (face-attribute 'ido-only-match :foreground))
             (set-face-attribute 'ein:cell-output-prompt nil :background bg))))

      (with-eval-after-load 'ein-notebooklist
        (define-key ein:notebook-mode-map (kbd "C-c C-c")
          'ein:worksheet-execute-cell))

      (with-eval-after-load 'ein-notebook
        (add-function :filter-args (symbol-function 'ein:notebook-open)
                      (lambda (args)
                        (let ((olen (length args))
                              (nlen 6))
                          (setcdr (last args) (make-list (max 0 (- nlen olen)) nil))
                          (setcar (nthcdr (1- nlen) args) t)
                          args))))))
#+END_SRC

