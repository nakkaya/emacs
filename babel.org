* Load Path
#+begin_src emacs-lisp 
  (setq dotfiles-dir (file-name-directory
                      (or load-file-name (buffer-file-name))))
  
  (add-to-list 'load-path dotfiles-dir)
  (add-to-list 'load-path (concat dotfiles-dir "/ext/"))
  (add-to-list 'load-path (concat dotfiles-dir "/int/"))
  (add-to-list 'load-path (concat dotfiles-dir "/ext/clojure-mode/"))
  (add-to-list 'load-path (concat dotfiles-dir "/ext/org-mode/lisp/"))
#+end_src

#+begin_src emacs-lisp 
  (load "searchDown.el")
  (load "jump.el")
  (load "clojure-mode.el")
  (require 'diff-mode)  
  (require 'org)
#+end_src

* Options
** Misc
#+begin_src emacs-lisp 
  (setq large-file-warning-threshold 256000000 )
  ;;debug
  (setq debug-on-error t) 
  ;;enable blinking cursor
  (blink-cursor-mode 1)
  (put 'erase-buffer 'disabled nil)
  
  (when window-system
    ;;disable scroll bar
    (toggle-scroll-bar nil)
    (tool-bar-mode -1))
  
  (menu-bar-mode -1)
  ;;do not continue line when split frame
  (setq truncate-partial-width-windows nil)
  ;; turn on font-lock mode
  (global-font-lock-mode t)
  (when window-system
    ;; use extended compound-text coding for X clipboard
    (set-selection-coding-system 'compound-text-with-extensions))
  
  (setq bookmark-default-file "~/.emacs.d/emacs.bmk")
  (setq c++-default-style "stroustrup")
  (setq column-number-mode t)
  (setq compilation-scroll-output t)
  (setq dired-dwim-target t)
  (setq fill-column 72)
  (setq inhibit-startup-screen t)
  (setq next-line-add-newlines nil)
  (setq query-replace-highlight t)
  (setq require-final-newline t)
  (setq scroll-step 1)
  (setq search-highlight t)
  (setq transient-mark-mode t)
  ;; I hate tabs!
  (setq-default indent-tabs-mode nil)
  (setq delete-by-moving-to-trash t)
  
#+end_src

#+results:
: t

#+begin_src emacs-lisp 
  (cond
   ((string-match "GNU" (emacs-version))
    (cond 
     ((string-match "linux" system-configuration)
      (setq cur-op-sys "linux" ))
     ((string-match "nt" system-configuration)
      (setq cur-op-sys "windows"))
     ((string-match "cygwin" system-configuration)
      (setq cur-op-sys "windows"))
     ((string-match "apple" system-configuration)
      (setq cur-op-sys "apple" )))))
  
#+end_src

Do not open a new frame for each file on OSX,

#+begin_src emacs-lisp 
  (cond 
   ((string= "osx" cur-op-sys)
    (setq ns-pop-up-frames nil)))
#+end_src

Replace yes or no with y or n,

#+begin_src emacs-lisp 
  (defun yes-or-no-p (arg)
    "An alias for y-or-n-p, because I hate having to type 'yes' or 'no'."
    (y-or-n-p arg))
#+end_src

Color on selection,

#+begin_src emacs-lisp 
  (defface completion-setup-directory-face  '((t (:foreground "Blue")))
    "Face to use for directories."
    :group 'color-file-completion)
  
  (defcustom color-file-completion-always t "If true, always turn on regexps in
  completion buffers."
    :group 'color-file-completion
    :type 'boolean)
  
  (defun completion-setup-directory-face()
    "When we are completing a filename, highlight directories."
    (interactive)
    ;;if this is completing a filename... highlight faces...
    (when (or color-file-completion-always
              (eq minibuffer-completion-table 'read-file-name-internal))
      (let((font-lock-verbose nil))
        (font-lock-mode 1)
        (font-lock-add-keywords nil '(("[^ \n]+/" 0 'completion-setup-directory-face keep)))
        (font-lock-fontify-buffer))))
  
  (add-hook 'completion-list-mode-hook 'completion-setup-directory-face)
#+end_src

** Encoding

#+begin_src emacs-lisp 
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+end_src

** Keyboard and Mouse

#+begin_src emacs-lisp 
  (defun scroll-window-forward-line ()
    "Move window forward one line leaving cursor at relative position in window."
    (interactive)
    (scroll-up 1))
  
  (defun scroll-window-backward-line ()
    "Move window backward one line leaving cursor at relative position in window."
    (interactive)
    (scroll-down 1)) 
  
  (define-key global-map [wheel-up] 'scroll-window-backward-line)
  (define-key global-map [wheel-down] 'scroll-window-forward-line)
#+end_src

Set up the keyboard so the delete key on both the regular keyboard
and the keypad delete the character under the cursor and to the right
under X, instead of the default, backspace behavior.

#+begin_src emacs-lisp 
  (global-set-key [delete] 'delete-char)
  (global-set-key [kp-delete] 'delete-char)
#+end_src

#+begin_src emacs-lisp 
  (global-set-key [f3] 'org-agenda)
  (global-set-key [S-f3] 'org-show-todo-tree)
  (global-set-key [f8] 'toggle-truncate-lines)
  (global-set-key [f12] 'org-babel-tangle)
  
  (global-set-key [(control d)] 'na-bounce-sexp)

  (define-key global-map [(control \])] 'ibuffer)
  (add-hook 'term-mode-hook
            '(lambda ()
               (define-key term-raw-map [(control \])] 'ibuffer)))
  
  (define-key global-map [(meta p)] 'na-cm-rotate)
  (define-key global-map [(meta control  p)] 'na-cm-save-point)
  
  (add-hook 'term-mode-hook
            '(lambda ()
               (define-key term-raw-map [(control o)] 'other-window)))
  (global-set-key [(control o)] 'other-window)
  
  (global-set-key "\C-xgs" 'na-run-git-switch)
  (global-set-key "\C-xrl" 'na-run-lisp)
  (global-set-key "\C-xtr" 'na-run-term-or-rename)
  (global-set-key [(control p)] 'na-switch-between-terminals)
  (add-hook 'term-mode-hook
            '(lambda ()
               (define-key term-raw-map [(control p)] 'na-switch-between-terminals)))
  
  (global-set-key [(meta h)] 'ns-do-hide-emacs)
  (setq mac-option-modifier 'super)
  (setq mac-command-modifier 'meta)
  (define-key global-map [home] 'beginning-of-line)
  (define-key global-map [end] 'end-of-line)
#+end_src

* Modes
** Markdown
#+begin_src emacs-lisp 
  (autoload 'markdown-mode "markdown-mode.el"
    "Major mode for editing Markdown files" t)
#+end_src

** Dired
#+begin_src emacs-lisp 
  (require 'dired)
  (require 'dired-details)
  (dired-details-install)
  
  (defun na-dired-up-directory-after-kill ()
    "Call 'dired-up-directory' after calling '(kill-buffer (current-buffer))'."
    (interactive)
    (let ((buf (current-buffer)))
      (dired-up-directory)
      (kill-buffer buf)))
  (define-key dired-mode-map "\C-w" 'na-dired-up-directory-after-kill)
#+end_src

** org-mode

#+begin_src emacs-lisp 
  (add-hook 'org-mode-hook 'abbrev-mode)
  (setq org-directory "~/Dropbox/org/")
  (setq org-mobile-inbox-for-pull "~/Dropbox/org/from-mobile.org")
  (setq org-mobile-directory "~/Dropbox/mobile-org")
  (setq org-mobile-files (quote ("gtd.org" "curriculum.org")))
  (setq org-agenda-files (list "~/Dropbox/org/gtd.org"
                               "~/Dropbox/org/birthday.org"))
  
  (setq org-mobile-force-id-on-agenda-items nil)
  (setq org-agenda-custom-commands
        '(("w" todo "TODO")
          ("h" agenda "" ((org-agenda-show-all-dates nil)))
          ("W" agenda "" ((org-agenda-ndays 21)
                          (org-agenda-show-all-dates nil)))
          ("A" agenda ""
           ((org-agenda-ndays 1)
            (org-agenda-overriding-header "Today")))))
  
  (setq org-return-follows-link t)
  (setq org-hide-leading-stars t)
  (setq org-tag-alist '(("buy" . ?b) ("write" . ?w)))
  (setq org-agenda-window-setup 'other-frame)
  (setq org-agenda-show-all-dates t)
  
  (require 'org-latex)
  (setq org-export-latex-listings t)
  (add-to-list 'org-export-latex-packages-alist '("" "listings"))
  (add-to-list 'org-export-latex-packages-alist '("" "color"))
  
  (setq org-src-fontify-natively t)
  (setq org-confirm-babel-evaluate nil)
  
  (add-to-list 'org-export-latex-classes
               '("literate-code"
                 "\\documentclass{article}\n
                 \\renewcommand{\\rmdefault}{phv} % Arial \n
                 \\usepackage{color} \n
                 \\usepackage{listings} \n
                 \\definecolor{lbcolor}{rgb}{0.9,0.9,0.9} \n
                 \\lstset{backgroundcolor=\\color{lbcolor},rulecolor=,frame=tb,basicstyle=\\footnotesize} \n
                 \\usepackage[hmargin=3cm,vmargin=3.5cm]{geometry} \n
                 \\usepackage{hyperref}
                 \\hypersetup{
                     colorlinks,%
                     citecolor=black,%
                     filecolor=black,%
                     linkcolor=blue,%
                     urlcolor=black
                 }"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  
#+end_src

 if idle for 5 minutes, display the current agenda.

#+begin_src emacs-lisp
  (defun jump-to-org-agenda ()
    (interactive)
    (let ((buf (get-buffer "*Org Agenda*"))
          wind)
      (if buf
          (if (setq wind (get-buffer-window buf))
              (select-window wind)
            (if (called-interactively-p)
                (progn
                  (select-window (display-buffer buf t t))
                  (org-fit-window-to-buffer))
              (with-selected-window (display-buffer buf)
                (org-fit-window-to-buffer))))
        (funcall (lambda () (org-agenda-list t))))))

;;  (run-with-idle-timer 300 t 'jump-to-org-agenda)
#+end_src

#+begin_src emacs-lisp
  (defun na-org-export ()
    (interactive)
    (org-exp-res/src-name-cleanup)
    (call-interactively 'org-export-as-pdf-and-open)
    (undo))
  
#+end_src

** IBuffer

#+begin_src emacs-lisp 
  (setq ibuffer-saved-filter-groups
        (quote (("default"
              ("Markup" (or (mode . org-mode)
                            (mode . html-mode)
                            (mode . markdown-mode)
                            (mode . xml-mode)
                            (name . "\\.xml$")
                            (mode . text-mode)))
              ("Source" (or
                         (mode . java-mode)
                         (mode . clojure-mode)
                         (mode . scheme-mode)
                         (mode . ruby-mode)
                         (mode . shell-script-mode)
                         (mode . sh-mode)
                         (mode . c-mode)
                         (mode . lisp-mode)
                         (mode . cperl-mode)
                         (mode . asm-mode)
                         (mode . emacs-lisp-mode)
                         (mode . c++-mode)))
              ("gnus" (or
                       (mode . message-mode)
                       (mode . mail-mode)
                       (mode . gnus-group-mode)
                       (mode . gnus-summary-mode)
                       (mode . gnus-article-mode)
                       (name . "^\\*offlineimap\\*$")
                       (name . "^\\.newsrc-dribble")))
              ("Terminal" (or (mode . term-mode)
                              (mode . inferior-lisp-mode)))
              ("Network" (or 
                          (name . "^ssh.*$")
                          (name . "^\\*nmap\\*$")
                          (name . "^\\*dsniff\\*$")
                          (name . "^\\*ftp.+\\*$")
                          (name . "^\\*nmap.+\\*$")
                          (name . "^\\*arpspoof.+\\*$")
                          (name . "^\\*tramp.+\\*$")
                          (name . "^\\*trace.+SMTP.+\\*$")
                          (mode . dsniff-mode)
                          (mode . nmap-mode)))
              ("dired" (mode . dired-mode))
              ("IRC" (or
                      (mode . erc-mode)))
              ("emacs" (or
                        (name . "^\\*info\\*$")
                        (name . "^\\*mpg123\\*$")
                        (name . "^\\.todo-do")
                        (name . "^\\*scratch\\*$")
                        (name . "^\\*git-status\\*$")
                        (name . "^\\*git-diff\\*$")
                        (name . "^\\*git-commit\\*$")
                        (name . "^\\*Git Command Output\\*$")
                        (name . "^\\*Messages\\*$")
                        (name . "^\\*Completions\\*$") 
                        (name . "^\\*Backtrace\\*$")
                        (name . "^TAGS$")
                        (name . "^\\*Help\\*$")
                        (name . "^\\*Shell Command Output\\*$")))))))
  (add-hook 'ibuffer-mode-hook
         (lambda ()
           (ibuffer-switch-to-saved-filter-groups "default")))
  (setq ibuffer-expert t)
#+end_src

** EasyPG
#+begin_src emacs-lisp 
  (if (string= "apple" cur-op-sys)
      (progn   
        (require 'epa)
        (epa-file-enable)
        (setq epg-gpg-program "/opt/local/bin/gpg")))
#+end_src

** Text Mode
#+begin_src emacs-lisp 
  (delete-selection-mode)
  (setq fill-column 80)
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
#+end_src

** Flyspell
#+begin_src emacs-lisp 
  (setq ispell-program-name "/opt/local/bin/ispell")
  (autoload 'flyspell-mode "flyspell" "On-the-fly spelling checker." t)
  (add-hook 'message-mode-hook 'turn-on-flyspell)
  (add-hook 'text-mode-hook 'turn-on-flyspell)
  (add-hook 'c-mode-common-hook 'flyspell-prog-mode)
  (add-hook 'java-mode-hook 'flyspell-prog-mode)
  (add-hook 'ruby-mode-hook 'flyspell-prog-mode)
  (add-hook 'lisp-mode-hook 'flyspell-mode)
  (add-hook 'emacs-lisp-mode-hook 'flyspell-mode)
  (defun turn-on-flyspell ()
    "Force flyspell-mode on using a positive arg.  For use in hooks."
    (interactive)
    (flyspell-mode 1))
#+end_src

** hs-mode
#+begin_src emacs-lisp 
  (defun toggle-selective-display (column)
    (interactive "P")
    (set-selective-display
     (or column
         (unless selective-display
           (1+ (current-column))))))
  
  (defun toggle-hiding (column)
    (interactive "P")
    (if hs-minor-mode
        (if (condition-case nil
                (hs-toggle-hiding)
              (error t))
            (hs-show-all))
      (toggle-selective-display column)))
  
  (global-set-key (kbd "C-+") 'toggle-hiding)
  (global-set-key [S-f2] 'hs-hide-level)
  (global-set-key [f2] 'hs-hide-all)
  
  (add-hook 'c-mode-common-hook   'hs-minor-mode)
  (add-hook 'emacs-lisp-mode-hook 'hs-minor-mode)
  (add-hook 'java-mode-hook       'hs-minor-mode)
  (add-hook 'lisp-mode-hook       'hs-minor-mode)
  (add-hook 'perl-mode-hook       'hs-minor-mode)
  (add-hook 'sh-mode-hook         'hs-minor-mode)
  (add-hook 'clojure-mode-hook    'hs-minor-mode)
  
  (setq hs-hide-comments-when-hiding-all nil)
  
#+end_src

* Programming
** Misc
#+begin_src emacs-lisp 
  (setq compilation-window-height 10)
  
  (setq auto-mode-alist
        (append '(("\\.C$"       . c++-mode)
                  ("\\.cc$"      . c++-mode)
                  ("\\.c$"       . c-mode)
                  ("\\.markdown$"  . markdown-mode)
                  ("\\.h$"       . c++-mode)
                  ("\\.i$"       . c++-mode)
                  ("\\.ii$"      . c++-mode)
                  ("\\.m$"       . objc-mode)
                  ("\\.\\([pP][Llm]\\|al\\)\\'" . cperl-mode)
                  ("\\.java$"    . java-mode)
                  ("\\.xml$"     . xml-mode)
                  ("\\.outline$" . outline-mode)
                  ("\\.sql$"     . c-mode)
                  ("\\.pde$"     . c++-mode)
                  ("\\.sh$"      . shell-script-mode)
                  ("\\.command$"      . shell-script-mode)
                  ("\\.mak$"     . makefile-mode)
                  ("\\.rb$"     . ruby-mode)
                  ("\\.php$"     . php-mode)
                  ("\\.GNU$"     . makefile-mode)
                  ("makefile$"   . makefile-mode)
                  ("Imakefile$"  . makefile-mode)
                  ("\\.Xdefaults$"    . xrdb-mode)
                  ("\\.Xenvironment$" . xrdb-mode)
                  ("\\.Xresources$"   . xrdb-mode)
                  ("*.\\.ad$"         . xrdb-mode)
                  ("\\.[eE]?[pP][sS]$" . ps-mode)
                  ("\\.zip$"     . archive-mode)
                  ("\\.tar$"     . tar-mode)
                  ("\\.tar.gz$"     . tar-mode)
                  ) auto-mode-alist))
  
  (defun indent-or-expand (arg)
    "Either indent according to mode, or expand the word preceding
    point."
    (interactive "*P")
    (if (and
         (or (bobp) (= ?w (char-syntax (char-before))))
         (or (eobp) (not (= ?w (char-syntax (char-after))))))
        (dabbrev-expand arg)
      (indent-according-to-mode)))
  
  (defun my-tab-fix ()
    (local-set-key (read-kbd-macro "TAB") 'indent-or-expand))
  
  (add-hook 'clojure-mode-hook 'my-tab-fix)
  (add-hook 'scheme-mode-hook 'my-tab-fix)
  (add-hook 'c-mode-hook 'my-tab-fix)
  (add-hook 'c++-mode-hook 'my-tab-fix)
  (add-hook 'java-mode-hook 'my-tab-fix)
  
  (defun na-bounce-sexp ()
    "Will bounce between matching parens just like % in vi"
    (interactive)
    (let ((prev-char (char-to-string (preceding-char)))
          (next-char (char-to-string (following-char))))
      (cond ((string-match "[[{(<]" next-char) (forward-sexp 1))
            ((string-match "[\]})>]" prev-char) (backward-sexp 1))
            (t (error "%s" "Not on a paren, brace, or bracket")))))
  
  (defun lispy-parens ()
    "Setup parens display for lisp modes"
    (setq show-paren-delay 0)
    (setq show-paren-style 'parenthesis)
    (make-variable-buffer-local 'show-paren-mode)
    (show-paren-mode 1)
    (set-face-background 'show-paren-match-face (face-background 'default))
    (if (boundp 'font-lock-comment-face)
        (set-face-foreground 'show-paren-match-face 
                             (face-foreground 'font-lock-comment-face))
      (set-face-foreground 'show-paren-match-face 
                           (face-foreground 'default)))
    (set-face-foreground 'show-paren-match-face "red")
    (set-face-attribute 'show-paren-match-face nil :weight 'extra-bold))
  (add-hook 'lisp-mode-hook 'lispy-parens)
  (add-hook 'emacs-lisp-mode-hook 'lispy-parens)
  (add-hook 'lisp-mode-hook 'abbrev-mode)
  (add-hook 'emacs-lisp-mode-hook 'abbrev-mode)
  (add-hook 'clojure-mode-hook 'abbrev-mode)
  (add-hook 'scheme-mode-hook 'abbrev-mode)
  (add-hook 'clojure-mode-hook 'lispy-parens)
  (add-hook 'scheme-mode-hook 'lispy-parens)
  
#+end_src
** Clojure
#+begin_src emacs-lisp 
  (cond 
   ((string= "apple" cur-op-sys)
    (setq clojure-command (concat "/Users/nakkaya/Dropbox/bash/lein repl")))
  ((string= "linux" cur-op-sys)
   (setq clojure-command (concat "/home/nakkaya/Dropbox/bash/lein repl")))
  ((string= "windows" cur-op-sys)
   (setq clojure-command (concat "/cygdrive/c/Dropbox/bash/lein repl"))))
  
  (setq lisp-programs 
        (list (list "clojure" clojure-command)
              (list "sbcl" "/opt/local/bin/sbcl")
              (list "gambit" "/opt/local/bin/gambit-gsc")))
  
  (defun na-run-lisp (arg)
    (interactive "P")
    (if (null arg)
        (run-lisp (second (first lisp-programs)))
      (let (choice) 
        (setq choice (completing-read "Lisp: " (mapcar 'first lisp-programs)))
        (dolist (l lisp-programs)
          (if (string= (first l) choice)
              (run-lisp (second l)))))))
    
  (defun remote-repl (arg)
    (interactive "P")
    (run-lisp (concat "nc " (read-string "IP: ") " " (read-string "Port: "))))
  
  (defun na-load-buffer ()
    (interactive)
    (point-to-register 5)
    (mark-whole-buffer)
    (lisp-eval-region (point) (mark) nil)
    (jump-to-register 5))
  
  ;;sub process support for clojure
  (add-hook 'clojure-mode-hook
            '(lambda ()
               (define-key clojure-mode-map 
                 "\e\C-x" 'lisp-eval-defun)
               (define-key clojure-mode-map 
                 "\C-x\C-e" 'lisp-eval-last-sexp)
               (define-key clojure-mode-map 
                 "\C-c\C-e" 'lisp-eval-last-sexp)
               (define-key clojure-mode-map 
                 "\C-c\C-r" 'lisp-eval-region)
               (define-key clojure-mode-map 
                 "\C-c\C-l" 'na-load-buffer)
               (define-key clojure-mode-map 
                 "\C-c\C-z" 'run-lisp)))
  
  (define-clojure-indent (from-blackboard 'defun))

  (require 'ob)
  (require 'ob-sh)
  
  (add-to-list 'org-babel-tangle-lang-exts '("clojure" . "clj"))
  
  (defvar org-babel-default-header-args:clojure 
    '((:results . "silent") (:tangle . "yes")))
  
  (defun org-babel-execute:clojure (body params)
    "Execute a block of Clojure code with Babel."
    (lisp-eval-string body)
    "Done!")
  
  (provide 'ob-clojure)
  
    
#+end_src

** Scheme
#+begin_src emacs-lisp
  ;;sub process support for clojure
  (add-hook 'scheme-mode-hook
            '(lambda ()
               (define-key scheme-mode-map 
                 "\e\C-x" 'lisp-eval-defun)
               (define-key scheme-mode-map 
                 "\C-x\C-e" 'lisp-eval-last-sexp)
               (define-key scheme-mode-map 
                 "\C-c\C-e" 'lisp-eval-last-sexp)
               (define-key scheme-mode-map 
                 "\C-c\C-r" 'lisp-eval-region)
               (define-key scheme-mode-map 
                 "\C-c\C-l" 'na-load-buffer)
               (define-key scheme-mode-map 
                 "\C-c\C-z" 'run-lisp)))
#+end_src
** git
#+begin_src emacs-lisp 
  (require 'git)
  (setq git-committer-name "Nurullah Akkaya")
  (setq git-committer-email "nurullah@nakkaya.com")
  
  (when (equal system-type 'darwin)
    (setenv "PATH" (concat "/opt/local/bin:/usr/local/bin:" (getenv "PATH")))
    (push "/opt/local/bin" exec-path))
  (setq exec-path (append exec-path '("/opt/local/bin")))
  
  (defun na-run-git-switch ()
    "Switch to git buffer or run git-status"
    (interactive)  
    (window-configuration-to-register 'z)
    (if (not (eq (get-buffer "*git-status*") nil))
        (switch-to-buffer "*git-status*")
      (git-status (read-directory-name "Select Directory: "))))
  
  (define-key git-status-mode-map (kbd "Q")
    '(lambda ()
       (interactive)
       (jump-to-register 'z)))
  
  (define-key git-status-mode-map (kbd "K")
    '(lambda ()
       (interactive)
       (kill-buffer)
       (jump-to-register 'z)))
#+end_src

** term
#+begin_src emacs-lisp 
  (setq term-term-name "xterm-color")
  (setq-default term-buffer-maximum-size 5000)
  
  (defun na-linux-run-term ()
    "run bash"
    (interactive)
    (term "/bin/bash"))
  
  (defun na-run-term-or-rename ()
    "create new shell or rename old"
    (interactive)  
    (if (not (eq (get-buffer "*terminal*")  nil ) )
        (progn
          ( setq new-buffer-name (read-from-minibuffer "Name shell to: " ) )
          (set-buffer "*terminal*")
          ( rename-buffer new-buffer-name )))
    
    (if (eq (get-buffer "*terminal*")  nil) 
        (progn
          (na-linux-run-term ))))
  
  (defun na-switch-between-terminals () 
    "cycle multiple terminals"
    (interactive)
    (if (not (eq (or (get-buffer "*terminal*") 
                     (get-buffer "*inferior-lisp*")) nil))
        (progn     
          (setq found nil)
          (bury-buffer)
          (setq head (car (buffer-list)))      
          (while  (eq found nil)  
            (set-buffer head)     
            (if (or (eq major-mode 'term-mode)
                    (eq major-mode 'inferior-lisp-mode))
                (setq found t)
              (progn
                (bury-buffer)
                (setq head (car (buffer-list)))))))))
  
#+end_src

* Gnus
#+begin_src emacs-lisp 
  (require 'gnus)
  (require 'browse-url)
  ;;
  ;;Gnus
  ;;
  (setq gnus-novice-user nil)
  (setq user-full-name "Nurullah Akkaya")
  (setq user-mail-address "nurullah@nakkaya.com")
  (setq mail-user-agent 'gnus-user-agent)
  ;;storage
  (setq gnus-directory "~/.gnus")
  (setq message-directory "~/.gnus/mail")
  (setq gnus-article-save-directory "~/.gnus/saved")
  (setq gnus-kill-files-directory "~/.gnus/scores")
  (setq gnus-cache-directory "~/.gnus/cache")
  (setq message-auto-save-directory "~/.gnus")
  
  ;; General speedups.
  
  (setq gnus-check-new-newsgroups nil) 
  (setq gnus-nov-is-evil nil) 
  (setq gnus-interactive-exit nil)
  (setq gnus-activate-level 1)
  (setq gnus-use-cache t)
  (setq gnus-save-newsrc-file t)
  (setq message-from-style 'angles) 
  (setq gnus-summary-line-format "%U%R%z%d %I%(%[%3L: %-10,10n%]%) %s\n")
  (setq gnus-agent nil)
  (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)
  ;; Inline images?
  (setq mm-attachment-override-types '("image/.*"))
  ;; No HTML mail
  (setq mm-discouraged-alternatives '("text/html" "text/richtext"))
  
  ;;threading
  (setq gnus-show-threads t
        gnus-thread-hide-subtree t        ;all threads will be hidden
        gnus-thread-hide-killed t
        ;; if t, the changed subject in the  middle of a thread is ignored.
        ;; default nil and the change accepted.
        gnus-thread-ignore-subject t
        ;;default 4
        gnus-thread-indent-level 2)
  
  (define-key gnus-summary-mode-map [(right)] 'gnus-summary-show-thread)
  (define-key gnus-summary-mode-map [(left)]  'gnus-summary-hide-thread)
  
  ;; Never show vcard stuff, I never need it anyway
  (setq gnus-ignored-mime-types '("text/x-vcard"))
  
  (setq gnus-posting-styles
        '((".*" (signature "Nurullah Akkaya\nhttp://nakkaya.com"))))
  
  (defun add-mail-headers ()
    (message-add-header
     (concat "X-Homepage: http://nakkaya.com")))
  (add-hook 'message-send-hook 'add-mail-headers)
  
  (setq gnus-visible-headers 
        (mapconcat 'regexp-quote
                   '("From:" "Newsgroups:" "Subject:" "Date:" 
                     "Organization:" "To:" "Cc:" "Followup-To" 
                     "Gnus-Warnings:"
                     "X-Sent:" "X-URL:" "User-Agent:" "X-Newsreader:"
                     "X-Mailer:" "Reply-To:"
                     "X-Attachments" "X-Diagnostic")
                   "\\|"))
  
  ;;* Higher Scoring of followups to myself
  ;;*================================
  (add-hook 'message-sent-hook 'gnus-score-followup-article)
  (add-hook 'message-sent-hook 'gnus-score-followup-thread)
  
  ;; Configure incoming mail (IMAP)
  (load "tls")
  (setq gnus-select-method '(nnimap "gmail"
                                    (nnimap-address "imap.gmail.com")
                                    (nnimap-server-port 993)
                                    (nnimap-authinfo-file "~/.authinfo")
                                    (nnimap-stream ssl)))
  
  (load "tls")
  (setq send-mail-function 'smtpmail-send-it
        message-send-mail-function 'smtpmail-send-it
        starttls-use-gnutls t
        starttls-gnutls-program "/opt/local/bin/gnutls-cli"
        starttls-extra-arguments nil      
        smtpmail-gnutls-credentials
        '(("smtp.gmail.com" 587 nil nil))
        ;; smtpmail-auth-credentials
        ;;'(("smtp.gmail.com" 587 "nurullah@nakkaya.com" "pass" ))
        smtpmail-starttls-credentials 
        '(("smtp.gmail.com" 587 "nurullah@nakkaya.com" nil))
        smtpmail-default-smtp-server "smtp.gmail.com"
        smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-service 587
        smtpmail-debug-info t
        smtpmail-local-domain "nakkaya.com")
  
  (require 'smtpmail)
  (add-hook 'mail-mode-hook 'mail-abbrevs-setup)
  (setq message-kill-buffer-on-exit t)
  
  (remove-hook 'gnus-mark-article-hook
               'gnus-summary-mark-read-and-unread-as-read)
  (add-hook 'gnus-mark-article-hook 'gnus-summary-mark-unread-as-read)
  
  (defun na-gmail-move-trash ()
    (interactive)
    (gnus-summary-move-article nil "[Gmail]/Trash"))
  
  (define-key gnus-summary-mode-map [(v)] 'na-gmail-move-trash)
  
  (defun switch-to-gnus (&optional arg)
    "Switch to a Gnus related buffer.
      Candidates are buffers starting with
       *mail or *reply or *wide reply
       *Summary or
       *Group*
   
      Use a prefix argument to start Gnus if no candidate exists."
    (interactive "P")
    (let (candidate
          (alist '(("^\\*\\(mail\\|\\(wide \\)?reply\\)" t)
                   ("^\\*Group")
                   ("^\\*Summary")
                   ("^\\*Article" nil
                    (lambda ()
                      (buffer-live-p 
                       gnus-article-current-summary))))))
      (catch 'none-found
        (dolist (item alist)
          (let (last
                (regexp (nth 0 item))
                (optional (nth 1 item))
                (test (nth 2 item)))
            (dolist (buf (buffer-list))
              (when (and (string-match regexp (buffer-name buf))
                         (> (buffer-size buf) 0))
                (setq last buf)))
            (cond ((and last (or (not test) (funcall test)))
                   (setq candidate last))
                  (optional
                   nil)
                  (t
                   (throw 'none-found t))))))
      (cond (candidate
             (progn 
               (make-frame '((name . "Gnus") (width . 130)))
               (set-frame-position (selected-frame) 0 1)
               (set-face-attribute 
                'default (selected-frame) :height 160 :width 'normal)
               (switch-to-buffer candidate)))
            (arg
             (gnus))
            (t
             (error "No candidate found")))))
  
  (define-key gnus-group-mode-map (kbd "Q")
    '(lambda ()
       (interactive)
       (delete-frame)))
  
  (defun mail-notify ()
    (let ((buffer (get-buffer "*Group*"))
          (count 0))
      (when buffer
        (with-current-buffer buffer
          (goto-char (point-min))
          (while (re-search-forward "\\([[:digit:]]+\\): INBOX" nil t)
            (setq count (+ count (string-to-number (match-string 1)))))))
      (if (> count 0)
          (shell-command 
           "/usr/bin/afplay ~/Downloads/Mail_Mother_Fucker.mp3"))))
  
  (add-hook 'gnus-after-getting-new-news-hook 'mail-notify)
  
  (gnus-demon-add-handler 'gnus-group-get-new-news 1 t)
  (gnus-demon-add-handler 'gnus-group-save-newsrc 1 t)
  (gnus-demon-init)
  
#+end_src

* Theme
#+begin_src emacs-lisp 
(setq frame-title-format (list "GNU Emacs " emacs-version))
(setq display-time-day-and-date nil )
(setq display-time-format "") 
(setq display-time-load-average-threshold 0 )
(setq display-time-string-forms '( load "," (if mail "" "")) )
(setq display-time-interval 5)
(display-time-mode 1)
(setq battery-mode-line-format "%b%p%" )
(display-battery-mode t)

(setq-default mode-line-format
	      '(""
		mode-line-modified
		(-3 . "%p") ;; position
		"[%b]"
		"%[("
		mode-name
		mode-line-process
		minor-mode-alist
		"%n" ")%]-"
		(line-number-mode "L%l-")
		(column-number-mode "C%c [")
		global-mode-string
		"] "
		"%f"		    ;; print file with full path
		" %-"))
#+end_src

#+begin_src emacs-lisp 
  (if window-system
      (progn 
        (deftheme solarized "")
  
        (custom-theme-set-faces
         'solarized
         '(default ((t (:background "#002b36" :foreground "#dcdcdc"))))
         '(cursor ((t (:background "#586e75" :foreground "#93a1a1"))))
         '(region ((t (:background "#586e75"))))
         '(mode-line ((t (:background "#586e75" :foreground "#073642"))))
         '(mode-line-inactive ((t (:background "#073642" :foreground "#586e75"))))
         '(fringe ((t (:foreground "#586e75" :background "#073642"))))
         '(minibuffer-prompt ((t (:foreground "#268bd2"))))
         '(font-lock-builtin-face ((t (:foreground "#859900"))))
         '(font-lock-comment-face ((t (:foreground "#586e75" :italic t)))) ; italic ja!
         '(font-lock-constant-face ((t (:foreground "#2aa198"))))
         '(font-lock-function-name-face ((t (:foreground "#268bd2"))))
         '(font-lock-keyword-face ((t (:foreground "#859900"))))
         '(font-lock-string-face ((t (:foreground "#2aa198"))))
         '(font-lock-type-face ((t (:foreground "#b58900"))))
         '(font-lock-variable-name-face ((t (:foreground "#268bd2"))))
         '(font-lock-warning-face ((t (:foreground "#d30102" :weight bold))))
         '(isearch ((t (:foreground "#b58900" :inverse-video t))))
         '(lazy-highlight ((t (:background "#073642")))) ; second highlight, typ?
         '(link ((t (:foreground "#6c71c4" :underline t))))
         '(link-visited ((t (:foreground "#8b008b" :underline t)))) ;; eh?
         '(button ((t (:underline t :background "#073642"))))
         '(header-line ((t (:background "#eee8d5" :foreground "#839496")))))
  
        (provide-theme 'solarized))
    (progn 
      (set-face-foreground 'default "color-250")
      (set-face-background 'default "color-233")
  
      (set-face-foreground 'font-lock-string-face "color-147")
      (set-face-foreground 'font-lock-keyword-face "color-202")
      (set-face-foreground 'font-lock-function-name-face "color-178")
      (set-face-foreground 'font-lock-builtin-face "color-148")
      (set-face-foreground 'font-lock-comment-face "color-30")))
  
#+end_src

* Misc

#+begin_src emacs-lisp 
  (defun na-reopen-file ()
    "Reopen file in buffer."
    (interactive)
    (let ((p (point)))
      (progn
        (find-alternate-file buffer-file-name)
        (goto-char p))))
#+end_src

* Session

#+begin_src emacs-lisp 
  (load "desktop")
  (desktop-load-default)
  (setq desktop-enable t)
  (require 'saveplace)
  (setq-default save-place t)
  (setq bookmark-save-flag 1 )
#+end_src

#+begin_src emacs-lisp 
  (add-hook 'server-visit-hook 'call-raise-frame)
  (add-hook 'find-file-hook 'call-raise-frame)
  (defun call-raise-frame ()
    (raise-frame))
  
  ;;(server-start)
#+end_src

#+begin_src emacs-lisp 
  (setq auto-save-list-file-prefix "~/.saves/auto-save-list/" )
  (setq
   backup-by-copying t                 ; don't clobber symlinks
   backup-directory-alist
   '(("." . "~/.saves"))                       ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)                  ; use versioned backups
  (setq tramp-auto-save-directory "~/.saves/tramp-autosave")
  
  ;;do not save tramp files
  (defun tv-list-tramp-buffer-file-name ()
    (let* ((desktop-info-list (mapcar #'desktop-buffer-info (buffer-list)))
        (tramp-buf-list (loop for i in desktop-info-list
                              if (and (listp i)
                                      (stringp (car (nth 8 i)))
                                      (string-match "^/su:.*\\|^/sudo:.*\\|^/scp:.*" (car (nth 8 i))))
                              collect (nth 2 i))))
      tramp-buf-list))
  
  (add-hook 'desktop-save-hook #'(lambda ()
                                (let ((del-buf-list
                                       (tv-list-tramp-buffer-file-name)))
                                  (dolist (i del-buf-list)
                                    (kill-buffer i)))))
#+end_src
* Skeletons
** Setup
#+begin_src emacs-lisp 
  (setq skeleton-pair t)
  (global-set-key (kbd "(") 'skeleton-pair-insert-maybe)
  (global-set-key (kbd "[") 'skeleton-pair-insert-maybe)
  (global-set-key (kbd "{") 'skeleton-pair-insert-maybe)
  (global-set-key (kbd "\"") 'skeleton-pair-insert-maybe)
  (setq abbrev-mode t)
  
  (add-hook 'clojure-mode-hook 
            (lambda ()
              (setq local-abbrev-table clojure-mode-abbrev-table)))
  
  (define-abbrev-table 'java-mode-abbrev-table '())
  (define-abbrev-table 'emacs-lisp-mode-abbrev-table '())
  (define-abbrev-table 'clojure-mode-abbrev-table '())
  (define-abbrev-table 'scheme-mode-abbrev-table '())
  (define-abbrev-table 'c++-mode-abbrev-table '())
  
#+end_src
** Clojure
#+begin_src emacs-lisp 
  (define-skeleton skel-clojure-println
    ""
    nil
    "(println "_")")
  (define-abbrev clojure-mode-abbrev-table "prt" "" 'skel-clojure-println)
  
  (define-skeleton skel-clojure-defn
    ""
    nil
    "(defn "_" [])")
  (define-abbrev clojure-mode-abbrev-table "defn" "" 'skel-clojure-defn)
  
  (define-skeleton skel-clojure-defn-
    ""
    nil
    "(defn- "_" [])")
  (define-abbrev clojure-mode-abbrev-table "def-" "" 'skel-clojure-defn- )
  
  (define-skeleton skel-clojure-if
    ""
    nil
    "(if ("_"))")
  (define-abbrev clojure-mode-abbrev-table "if" "" 'skel-clojure-if )
  
  (define-skeleton skel-clojure-let
    ""
    nil
    "(let ["_"] )")
  (define-abbrev clojure-mode-abbrev-table "let" "" 'skel-clojure-let)
  
  (define-skeleton skel-clojure-ref-set
    ""
    nil
    "(dosync (ref-set "_" ))")
  (define-abbrev clojure-mode-abbrev-table "refs" "" 'skel-clojure-ref-set)
  
  (define-skeleton skel-clojure-proxy
    ""
    nil
    "(proxy ["_"] [] "
    \n > ")")
  (define-abbrev clojure-mode-abbrev-table "proxy" "" 'skel-clojure-proxy)
  
  (define-skeleton skel-clojure-doseq
    ""
    nil
    "(doseq ["_"] "
    \n > ")")
  (define-abbrev clojure-mode-abbrev-table "doseq" "" 'skel-clojure-doseq)
  
  (define-skeleton skel-clojure-do
    ""
    nil
    "(do "_" "
    \n > ")")
  (define-abbrev clojure-mode-abbrev-table "do" "" 'skel-clojure-do)
  
  (define-skeleton skel-clojure-reduce
    ""
    nil
    "(reduce (fn[h v] ) "_" ) ")
  
  (define-abbrev clojure-mode-abbrev-table "reduce" "" 'skel-clojure-reduce)
  
  (define-skeleton skel-clojure-try
    ""
    nil
    "(try "_" (catch Exception e (println e)))")
  
  (define-abbrev clojure-mode-abbrev-table "try" "" 'skel-clojure-try)
  
  (define-skeleton skel-clojure-map
    ""
    nil
    "(map #() "_")")
  
  (define-abbrev clojure-mode-abbrev-table "map" "" 'skel-clojure-map)
  
#+end_src

** Scheme
#+begin_src emacs-lisp 
  (define-skeleton skel-scheme-display
    ""
    nil
    "(display "_")")
  (define-abbrev scheme-mode-abbrev-table "prt" "" 'skel-scheme-display)
  
  (define-skeleton skel-scheme-defn
    ""
    nil
    "(define ("_"))")
  (define-abbrev scheme-mode-abbrev-table "defn" "" 'skel-scheme-defn)
  
  (define-skeleton skel-scheme-if
    ""
    nil
    "(if ("_"))")
  (define-abbrev scheme-mode-abbrev-table "if" "" 'skel-scheme-if )
  
  (define-skeleton skel-scheme-let
    ""
    nil
    "(let ("_"))")
  (define-abbrev scheme-mode-abbrev-table "let" "" 'skel-scheme-let)
  
  (define-skeleton skel-scheme-for-each
    ""
    nil
    "(for-each (lambda ("_") ()))")
  (define-abbrev scheme-mode-abbrev-table "fore" "" 'skel-scheme-for-each)
  
  (define-skeleton skel-scheme-begin
    ""
    nil
    "(begin "_" "
    \n > ")")
  (define-abbrev scheme-mode-abbrev-table "begin" "" 'skel-scheme-do)
  
  (define-skeleton skel-scheme-reduce
    ""
    nil
    "(fold-right (lambda ("_") ()))")
  (define-abbrev scheme-mode-abbrev-table "reduce" "" 'skel-scheme-reduce)

  (define-skeleton skel-scheme-map
    ""
    nil
    "(map (lambda ("_") ()))")
  (define-abbrev scheme-mode-abbrev-table "map" "" 'skel-scheme-map)
  
#+end_src

** Cpp
#+begin_src emacs-lisp 
  (define-skeleton skel-cpp-prt
    ""
    nil
    \n >
    "cout<< " _ " <<endl;"
    \n >)
  (define-abbrev c++-mode-abbrev-table "cout"  "" 'skel-cpp-prt )
  
#+end_src
** ELisp
#+begin_src emacs-lisp 
  (define-skeleton skel-list-insert
    ""
    nil
    "(insert "_" )")
  (define-abbrev lisp-mode-abbrev-table "ins" "" 'skel-list-insert )
  
  (define-skeleton skel-list-setq
    ""
    nil
    "(setq "_" )")
  (define-abbrev lisp-mode-abbrev-table "set" "" 'skel-list-setq )
  
  (define-skeleton skel-list-deffun
    ""
    nil
    "(defun "_" () "
    \n >
    ")")
  (define-abbrev lisp-mode-abbrev-table "deff" "" 'skel-list-deffun )
  
  (define-skeleton skel-list-defvar
    ""
    nil
    "(defvar "_" )")
  (define-abbrev lisp-mode-abbrev-table "defv" "" 'skel-list-defvar )
  
  (define-skeleton skel-list-if
    ""
    nil
    "(if "
    _
    \n >
    " )")
  (define-abbrev lisp-mode-abbrev-table "if" "" 'skel-list-if )
  
  (define-skeleton skel-list-progn
    ""
    nil
    "(progn "
    _
    \n >
    " )")
  (define-abbrev lisp-mode-abbrev-table "progn" "" 'skel-list-progn )
  
#+end_src

** Java
#+begin_src emacs-lisp 
  (define-skeleton skel-java-println
    "Insert a Java println Statement"
    nil
    "System.out.println(" _ " );")
  (define-abbrev java-mode-abbrev-table "prt" "" 'skel-java-println )
  
  (define-skeleton skel-java-ife
    "Insert a Common If else Statement"
    nil
    \n >
    "if (" _ " ){"
    \n >
    "} else {"
    \n >
    "}")
  (define-abbrev java-mode-abbrev-table "ife" "" 'skel-java-ife )
  
  (define-skeleton skel-java-try
    "Insert a try catch block"
    nil
    \n >
    "try{"
    \n >
    _ \n
    "}catch( Exception e ) {" >
    " "
    \n > \n
    "}" >)
  (define-abbrev java-mode-abbrev-table "try" "" 'skel-java-try )
  
  (define-skeleton skel-java-if
    "Insert a Common If Statement"
    nil
    \n >
    "if (" _ " ){"
    \n >
    "}")
  
  (define-abbrev java-mode-abbrev-table "if" "" 'skel-java-if )
  (define-abbrev c++-mode-abbrev-table "if"  "" 'skel-java-if )
  
  (define-skeleton skel-java-for1
    "Insert a Common If Statement"
    nil
    \n >
    "for( int i=0 ; i<" _ " ;i++){"
    \n >
    "}")
  (define-abbrev java-mode-abbrev-table "for1" "" 'skel-java-for1 )
  
  
  (define-skeleton skel-java-timer
    "creates timing statements"
    nil
    \n >
    "final long start = System.currentTimeMillis();"
    \n >
    "System.out.println( Long.toString( System.currentTimeMillis() - start ) ) ;")
  (define-abbrev java-mode-abbrev-table "jtimer" "" 'skel-java-timer )
  
  (define-skeleton skel-java-comment
    "creates javadoc comment"
    nil
    \n >
    "/*"
    \n >
    "*"
    \n >
    "*"
    \n >
    "*"
    \n >
    "* @param"
    \n >
    "* @return"
    \n >
    "* @exception"
    \n >
    "*"
    \n >
    "*/"
    \n >)
  (define-abbrev java-mode-abbrev-table "jdcomment" "" 'skel-java-comment )
  
#+end_src

** org-mode
#+begin_src emacs-lisp
  (define-skeleton skel-org-src
    "Insert org src block."
    nil
    "#+begin_src"
     _ 
    \n > 
     "#+end_src")
  (define-abbrev text-mode-abbrev-table "osrc" "" 'skel-org-src)
#+end_src
