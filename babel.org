#+property: results silent

* General
** Load Path

   #+begin_src emacs-lisp 
     (setq dotfiles-dir (file-name-directory
                         (or load-file-name (buffer-file-name))))
     
     (add-to-list 'load-path dotfiles-dir)
     (add-to-list 'load-path (concat dotfiles-dir "/ext/"))
     (add-to-list 'load-path (concat dotfiles-dir "/ext/org-mode/lisp/"))
     (add-to-list 'load-path (concat dotfiles-dir "/ext/org-mode/contrib/lisp/"))
     (add-to-list 'load-path (concat dotfiles-dir "/ext/tmtxt-dired-async.git/"))
   #+end_src

** Load/Install Melpa Packages

   #+begin_src emacs-lisp
     ; list the packages you want
     (setq package-list '(magit clojure-mode expand-region python-mode git-annex
                                monroe clojure-mode-extra-font-locking autopair
                                multi-term dired-details yaml-mode matlab-mode))

     ; list the repositories containing them
     (setq package-archives '(("melpa" . "http://melpa.org/packages/")
                              ("elpa" . "http://tromey.com/elpa/")
                              ("gnu" . "https://elpa.gnu.org/packages/")
                              ("marmalade" . "https://marmalade-repo.org/packages/")))

     ; activate all the packages (in particular autoloads)
     (package-initialize)

     ; fetch the list of packages available 
     (when (not package-archive-contents)
       (package-refresh-contents))

     ; install the missing packages
     (dolist (package package-list)
       (when (not (package-installed-p package))
         (package-install package)))

   #+end_src

** Options

   #+begin_src emacs-lisp 
     (setq large-file-warning-threshold 256000000)
     ;;debug
     (setq debug-on-error t) 
     ;;enable blinking cursor
     (blink-cursor-mode 1)
     (put 'erase-buffer 'disabled nil)
     
     ;;do not bug me when undo limit is reached.
     (custom-set-variables
      '(warning-suppress-types (quote ((undo discard-info)))))
     
     (menu-bar-mode -1)
     ;;do not continue line when split frame
     (setq truncate-partial-width-windows nil)
     ;; turn on font-lock mode
     (global-font-lock-mode t)
     
     (setq bookmark-default-file "~/annex/notes/emacs.bookmark")
     (setq column-number-mode t)
     (setq dired-dwim-target t)
     (setq fill-column 72)
     (setq inhibit-startup-screen t)
     (setq next-line-add-newlines nil)
     (setq query-replace-highlight t)
     (setq search-highlight t)
     (setq transient-mark-mode t)
     
     ;; I hate tabs!
     (setq-default indent-tabs-mode nil)
     (setq delete-by-moving-to-trash nil)
     
     ;disable backup
     (setq backup-inhibited t)
   #+end_src

   When a file changes on disk notice the change and start showing the
   new version unless I have unsaved changes. 

   #+begin_src emacs-lisp
     (global-auto-revert-mode 1)
   #+end_src

   Detect OS,

   #+begin_src emacs-lisp 
     (defvar na-os-is-darwin nil)
     (defvar na-os-is-windows nil)
     (defvar na-os-is-linux nil)
     
     (cond
      ((string-match "GNU" (emacs-version))
       (cond 
        ((string-match "linux" system-configuration)  (setq na-os-is-linux t))
        ((string-match "nt" system-configuration)     (setq na-os-is-windows t))
        ((string-match "cygwin" system-configuration) (setq na-os-is-windows t))
        ((string-match "apple" system-configuration)  (setq na-os-is-darwin t)))))
   #+end_src

   Do not open a new frame for each file on OSX,

   #+begin_src emacs-lisp 
     (when na-os-is-darwin
       (setq ns-pop-up-frames nil))
   #+end_src

   Replace yes or no with y or n,

   #+begin_src emacs-lisp 
     (defun yes-or-no-p (arg)
       "An alias for y-or-n-p, because I hate having to type 'yes' or 'no'."
       (y-or-n-p arg))
   #+end_src

   Color on selection,

   #+begin_src emacs-lisp 
     (defface completion-setup-directory-face  '((t (:foreground "Blue")))
       "Face to use for directories."
       :group 'color-file-completion)
     
     (defcustom color-file-completion-always t "If true, always turn on regexps in
     completion buffers."
       :group 'color-file-completion
       :type 'boolean)
     
     (defun completion-setup-directory-face()
       "When we are completing a filename, highlight directories."
       (interactive)
       ;;if this is completing a filename... highlight faces...
       (when (or color-file-completion-always
                 (eq minibuffer-completion-table 'read-file-name-internal))
         (let((font-lock-verbose nil))
           (font-lock-mode 1)
           (font-lock-add-keywords nil '(("[^ \n]+/" 0 'completion-setup-directory-face keep)))
           (font-lock-fontify-buffer))))
     
     (add-hook 'completion-list-mode-hook 'completion-setup-directory-face)
   #+end_src

   Support Turkish alphabet,

   #+begin_src emacs-lisp 
     (setq locale-coding-system 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
     (prefer-coding-system 'utf-8)
   #+end_src

   Copy/Paste under Linux

   #+begin_src emacs-lisp 
     (when na-os-is-linux
       (setq x-select-enable-clipboard t))
   #+end_src

** Input

   Copy/Pase when running from terminal,

   #+begin_src emacs-lisp
     (defun copy-to-x-clipboard ()
       (interactive)
       (if (region-active-p)
           (progn
             ;; my clipboard manager only intercept CLIPBOARD
             (shell-command-on-region (region-beginning) (region-end)
                                      (cond
                                       ((eq system-type 'cygwin) "putclip")
                                       ((eq system-type 'darwin) "reattach-to-user-namespace pbcopy")
                                       (t "xsel -ib")))
             (message "Yanked region to clipboard!")
             (deactivate-mark))
         (message "No region active; can't yank to clipboard!")))
     
     (defun paste-from-x-clipboard()
       (interactive)
       (shell-command
        (cond
         ((eq system-type 'cygwin) "getclip")
         ((eq system-type 'darwin) "reattach-to-user-namespace pbpaste")
         (t "xsel -ob"))
        1))
   #+end_src

   Single line scroll.

   #+begin_src emacs-lisp 
     (defun scroll-window-forward-line ()
       "Move window forward one line leaving cursor at relative position in window."
       (interactive)
       (scroll-up 1))
     
     (defun scroll-window-backward-line ()
       "Move window backward one line leaving cursor at relative position in window."
       (interactive)
       (scroll-down 1)) 
     
     (define-key global-map [wheel-up] 'scroll-window-backward-line)
     (define-key global-map [wheel-down] 'scroll-window-forward-line)
   #+end_src

   Mouse setup when running in a terminal,

   #+begin_src emacs-lisp
     (unless window-system
       (xterm-mouse-mode t)
       (require 'mouse)
       (defun track-mouse (e)) 
       (setq mouse-sel-mode t)
     
       (define-key global-map [mouse-4] 'scroll-window-backward-line)
       (define-key global-map [mouse-5] 'scroll-window-forward-line))
   #+end_src

   Set up the keyboard so the delete key on both the regular keyboard
   and the keypad delete the character under the cursor and to the right
   under X, instead of the default, backspace behavior.

   #+begin_src emacs-lisp 
     (global-set-key [delete] 'delete-char)
     (global-set-key [kp-delete] 'delete-char)
     (define-key key-translation-map [?\C-h] [?\C-?])
   #+end_src

   Mac specific,

   #+begin_src emacs-lisp 
     (global-set-key [S-f1] 'ns-do-hide-emacs)
     (setq mac-option-modifier 'super)
     (setq mac-command-modifier 'meta)
   #+end_src

   #+begin_src emacs-lisp 
     (global-set-key [f1] 'jump-to-org-agenda)
     (global-set-key [f2] 'org-babel-tangle)
     (global-set-key [S-f2] 'na-export-html)
     (global-set-key [f3] 'na-term-toggle-mode)
     (global-set-key [f4] 'org-capture)
     (global-set-key [f8] 'toggle-truncate-lines)

     (global-set-key "\M-[1;5C" 'forward-word)
     (global-set-key "\M-[1;5D" 'backward-word)
     (global-set-key "\M-[1;5A" 'backward-paragraph)
     (global-set-key "\M-[1;5B" 'forward-paragraph)

     (global-set-key (kbd "C-S-<left>") 'shrink-window-horizontally)
     (global-set-key (kbd "C-S-<right>") 'enlarge-window-horizontally)
     (global-set-key (kbd "C-S-<down>") 'shrink-window)
     (global-set-key (kbd "C-S-<up>") 'enlarge-window)

     (global-set-key [(control d)] 'na-bounce-sexp)
     (add-hook 'c++-mode-hook
         '(lambda ()
            (local-set-key [(control d)] 'na-bounce-sexp)))
     (add-hook 'c-mode-hook
         '(lambda ()
            (local-set-key [(control d)] 'na-bounce-sexp)))
     (add-hook 'java-mode-hook
         '(lambda ()
            (local-set-key [(control d)] 'na-bounce-sexp)))

     (define-key global-map [(control \])] 'ibuffer)
     (add-hook 'term-mode-hook
               '(lambda ()
                  (define-key term-raw-map [(control \])] 'ibuffer)))

     (define-key global-map [(meta p)] 'na-cm-rotate)
     (define-key global-map [(meta control  p)] 'na-cm-save-point)

     (add-hook 'term-mode-hook
               '(lambda ()
                  (define-key term-raw-map [(control \\)] 'other-window)))
     (global-set-key [(control \\)] 'other-window)

     (define-key global-map [(meta \\)] 'na-next-term)
     (define-key global-map [(super \\)] 'na-next-term)
     (add-hook 'term-mode-hook
               '(lambda ()
                  (define-key term-raw-map [(meta \\)] 'na-next-term)))
     (add-hook 'term-mode-hook
               '(lambda ()
                  (define-key term-raw-map [(super \\)] 'na-next-term)))

     (global-set-key "\C-xgs" 'magit-status)
     (global-set-key "\C-xgl" 'na-search-org-headers)

     (define-key global-map [home] 'beginning-of-line)
     (define-key global-map [end] 'end-of-line)

     (global-set-key (kbd "C-x t") 'na-new-term) ;; create a new one
     (global-set-key (kbd "C-z") 'undo) ; 【Ctrl+z】
   #+end_src

** Session

   Start server, save buffer state on exit and reload on startup,

   #+begin_src emacs-lisp 
     (load "server")
     
     (setq main-instance-found (member "-main-instance" command-line-args))
     (setq command-line-args (delete "-main-instance" command-line-args))
     
     (when main-instance-found 
       (server-start)
       (load "desktop")
       (desktop-load-default)
       (setq desktop-enable t)
       (require 'saveplace)
       (setq-default save-place t))
   #+end_src

   Always save bookmarks.

   #+begin_src emacs-lisp 
     (setq bookmark-save-flag 1)
   #+end_src

   Bring frame to front when opening files.

   #+begin_src emacs-lisp 
     (add-hook 'server-visit-hook 'call-raise-frame)
     (add-hook 'find-file-hook 'call-raise-frame)
     
     (defun call-raise-frame ()
       (raise-frame))
   #+end_src

** Theme

  #+begin_src emacs-lisp 
    (setq frame-title-format (list "GNU Emacs " emacs-version))
    
    (setq-default mode-line-format
                  '(""
                    mode-line-modified
                    (-3 . "%p") ;; position
                    " - %b - "
                    mode-name
                    mode-line-process
                    minor-mode-alist
                    "%n" " - "
                    (line-number-mode "L%l ")
                    (column-number-mode "C%c ")))
  #+end_src

  #+begin_src emacs-lisp 
    (defvar theme-background "color-232")
    (defvar theme-text-color "color-250")

    (set-face-foreground 'default theme-text-color)
    (set-face-background 'default theme-background)
    (set-face-background 'match theme-background)
    (set-face-background 'italic theme-background)
    (set-face-foreground 'font-lock-string-face "color-147")
    (set-face-foreground 'font-lock-keyword-face "color-202")
    (set-face-foreground 'font-lock-function-name-face "color-178")
    (set-face-foreground 'font-lock-builtin-face "color-148")
    (set-face-foreground 'font-lock-comment-face "color-30")
    (set-face-foreground 'org-block-begin-line "color-236")
    (set-face-foreground 'org-block-end-line "color-236")
    (set-face-foreground 'org-todo "color-124")
    (set-face-background 'secondary-selection theme-background)

    (eval-after-load "magit" 
      '(progn
         (remove-hook 'magit-section-highlight-hook 'magit-diff-highlight)
         (remove-hook 'magit-section-highlight-hook 'magit-section-highlight)
         (set-face-background 'magit-diff-removed-highlight theme-background)
         (set-face-background 'magit-diff-added-highlight theme-background)
         (set-face-background 'magit-diff-context-highlight theme-background)
         (set-face-background 'magit-diff-added theme-background)
         (set-face-foreground 'magit-diff-added "brightgreen")
         (set-face-background 'magit-diff-removed theme-background)
         (set-face-foreground 'magit-diff-removed "brightred")
         (set-face-background 'magit-diff-hunk-heading theme-background)
         (set-face-foreground 'magit-diff-hunk-heading "color-27")))

    (eval-after-load "diff-mode" 
      '(progn
         (set-face-foreground 'diff-added "brightgreen")
         (set-face-foreground 'diff-removed "brightred")
         (set-face-foreground 'diff-header "color-27")
         (set-face-background 'diff-header "color-233")
         (set-face-background 'diff-file-header "color-233")
         (set-face-background 'diff-refine-change "color-233")))

    (set-face-attribute  'mode-line
                         nil 
                         :foreground "color-166"
                         :background "color-235")
    (set-face-attribute  'mode-line-inactive
                         nil 
                         :foreground "color-240"
                         :background "color-234")
  #+end_src

** Misc

   Split frame into four windows,

   #+BEGIN_SRC emacs-lisp
     (defun na-split-window-four ()
       (interactive)
       (delete-other-windows)
       (split-window-horizontally)
       (other-window 1)
       (split-window-vertically)
       (other-window 1)
       (other-window 1)
       (split-window-vertically))
   #+END_SRC

   Zoom In/Out

   #+BEGIN_SRC emacs-lisp
     (defun na-font-big ()
       (interactive)
       (set-face-attribute 'default nil :height 
                           (+ (face-attribute 'default :height) 10)))
     
     (defun na-font-small ()
       (interactive)
       (set-face-attribute 'default nil :height 
                           (- (face-attribute 'default :height) 10)))
     
     (define-key ctl-x-map [(control ?+)] 'na-font-big)
     (define-key ctl-x-map [(control ?-)] 'na-font-small)
   #+END_SRC

   Maximize frame.

   #+begin_src emacs-lisp
     (defun na-maximize-frame ()
       (interactive)
       (cond 
        (na-os-is-darwin  (let ((px (display-pixel-width))
                                (py (display-pixel-height))
                                (fx (frame-char-width))
                                (fy (frame-char-height))
                                tx ty)
     
                            (setq tx (- (/ px fx) 3))
                            (setq ty (- (/ py fy) 4))
                            (set-frame-position (selected-frame) 1 1)
                            (set-frame-width (selected-frame) tx)
                            (set-frame-height (selected-frame) ty)))
        (na-os-is-linux (progn 
                          (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
                                                 '(2 "_NET_WM_STATE_MAXIMIZED_VERT" 0))
                          (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
                                                 '(2 "_NET_WM_STATE_MAXIMIZED_HORZ" 0))))))
   #+end_src

   Will bounce between matching parens just like % in vi

   #+begin_src emacs-lisp
     (defun na-bounce-sexp ()
       (interactive)
       (let ((prev-char (char-to-string (preceding-char)))
             (next-char (char-to-string (following-char))))
         (cond ((string-match "[[{(<]" next-char) (forward-sexp 1))
               ((string-match "[\]})>]" prev-char) (backward-sexp 1))
               (t (error "%s" "Not on a paren, brace, or bracket")))))
   #+end_src

   Highlight matching parens.

   #+begin_src emacs-lisp
     (defun na-highlight-mathing-paren ()
       (setq show-paren-delay 0)
       (setq show-paren-style 'parenthesis)
       (make-variable-buffer-local 'show-paren-mode)
       (show-paren-mode 1)
       (set-face-background 'show-paren-match-face (face-background 'default))
       (if (boundp 'font-lock-comment-face)
         (set-face-foreground 'show-paren-match-face 
                              (face-foreground 'font-lock-comment-face))
         (set-face-foreground 'show-paren-match-face 
                              (face-foreground 'default)))
       (set-face-foreground 'show-paren-match-face "red")
       (set-face-attribute 'show-paren-match-face nil :weight 'extra-bold))
     
     (add-hook 'lisp-mode-hook 'na-highlight-mathing-paren)
     (add-hook 'emacs-lisp-mode-hook 'na-highlight-mathing-paren)
     (add-hook 'clojure-mode-hook 'na-highlight-mathing-paren)
     (add-hook 'scheme-mode-hook 'na-highlight-mathing-paren)
     (add-hook 'c++-mode-hook 'na-highlight-mathing-paren)
     (add-hook 'c-mode-hook 'na-highlight-mathing-paren)
   #+end_src

   Indent selected region with different mode than the buffer uses,

   #+begin_src emacs-lisp
     (defvar na-indent-region-prev "")
     
     (defun na-indent-region (start end)
       (interactive "r")
       (let ((col (save-excursion (goto-char (region-beginning))
                       (current-column))))
         (kill-region start end)
         (insert
          (with-temp-buffer
            (let ((mode (completing-read 
                         "Mode: "
                         (mapcar (lambda (e) 
                                   (list (symbol-name e)))
                                 (apropos-internal "-mode$" 'commandp))
                         nil t na-indent-region-prev)))
              (setq na-indent-region-prev mode)
              (funcall (intern mode)))
            (yank)
            ;;un escape "
            (goto-char (point-min))
            (replace-string "\\\"" "\"")
            (indent-region (point-min) (point-max) nil)
            ;;escape "
            (goto-char (point-min))
            (replace-string "\"" "\\\"")
            ;;select all but first line
            (goto-char (point-min))
            (forward-line)
            (push-mark (point))
            (push-mark (point-max) nil t)
            ;;shift all text to col
            (indent-rigidly (region-beginning) (region-end) col)
            (buffer-string)))))
   #+end_src

* Modes
** C/C++

   #+begin_src emacs-lisp
     (add-to-list 'auto-mode-alist '("[.]pde$" . c++-mode))
     (add-to-list 'auto-mode-alist '("[.]ino$" . c++-mode))
     (add-to-list 'auto-mode-alist '("[.]h$" . c++-mode))
     (add-to-list 'auto-mode-alist '("[.]cpp$" . c++-mode))
   #+end_src

** Dired
   
   #+begin_src emacs-lisp
     (require 'dired)
   #+end_src

   #+begin_src emacs-lisp
     (setq dired-listing-switches "-aBhl  --group-directories-first")
     
     (require 'dired-details)
     (dired-details-install)
     (add-hook 'dired-mode-hook 'auto-revert-mode)
     
     (require 'dired-x)
     (setq dired-omit-files "^\\...+$")
     (add-hook 'dired-mode-hook (lambda () (dired-omit-mode 1)))
   #+end_src

   #+begin_src emacs-lisp
     (add-hook 'dired-mode-hook
               (lambda () 
                 (setq mode-line-format
                       '((-3 . "%p") ;; position
                         minor-mode-alist
                         " " default-directory))))
   #+end_src

   #+begin_src emacs-lisp
     (defun na-dired-get-size ()
       (interactive)
       (let ((files (dired-get-marked-files)))
         (with-temp-buffer
           (apply 'call-process "/usr/bin/du" nil t nil "-sch" files)
           (message "Size of all marked files: %s"
                    (progn 
                      (re-search-backward "\\(^[0-9.,]+[A-Za-z]+\\).*total$")
                      (match-string 1))))))
     
     (define-key dired-mode-map (kbd "?") 'na-dired-get-size)
   #+end_src

   Don't bug me for each directory.

   #+begin_src emacs-lisp
     (setq dired-recursive-deletes 'always)
   #+end_src

   Go up one directory and kill buffer associated with the previous
   directory.

   #+begin_src emacs-lisp 
     (defun na-dired-up-directory-after-kill ()
       "Call 'dired-up-directory' after calling '(kill-buffer (current-buffer))'."
       (interactive)
       (let* ((buf (current-buffer))
             (kill-curr (if (= (length (get-buffer-window-list buf)) 
                               1)
                            t nil)))
         (dired-up-directory)
         (when kill-curr
           (kill-buffer buf))))
   #+end_src

  Works same as above but goes down in a directory tree.

   #+begin_src emacs-lisp 
     (defun na-dired-down-directory-after-kill ()
       "Call 'dired-find-alternate-file' after calling '(kill-buffer (current-buffer))'."
       (interactive)
       (let ((file (dired-get-filename))) 
         (if (file-directory-p file) 
             (let* ((buf (current-buffer))
                   (kill-curr (if (= (length (get-buffer-window-list buf)) 
                                     1)
                                  t nil)))
               (dired-find-file)
               (when kill-curr
                 (kill-buffer buf)))
           (dired-advertised-find-file))))
   #+end_src

  #+begin_src emacs-lisp
    (setq na-external-open-files-types 
          '("pdf" "avi" "mp4" "flv" "wmv" "mov" "mkv" 
            "jpg" "png" "m4v" "mpg" "mpeg" "ts" "m3u"))
  #+end_src

  #+begin_src emacs-lisp
    (setq na-file-assocs (make-hash-table :test 'equal))

    (if na-os-is-darwin
        (progn 
          (puthash "m3u" "/Applications/VLC.app/Contents/MacOS/VLC" na-file-assocs)
          (puthash "avi" "/Applications/VLC.app/Contents/MacOS/VLC" na-file-assocs)
          (puthash "mp4" "/Applications/VLC.app/Contents/MacOS/VLC" na-file-assocs)
          (puthash "flv" "/Applications/VLC.app/Contents/MacOS/VLC" na-file-assocs)
          (puthash "wmv" "/Applications/VLC.app/Contents/MacOS/VLC" na-file-assocs)
          (puthash "mov" "/Applications/VLC.app/Contents/MacOS/VLC" na-file-assocs)
          (puthash "mkv" "/Applications/VLC.app/Contents/MacOS/VLC" na-file-assocs)
          (puthash "m4v" "/Applications/VLC.app/Contents/MacOS/VLC" na-file-assocs)
          (puthash "mpg" "/Applications/VLC.app/Contents/MacOS/VLC" na-file-assocs)
          (puthash "ts" "/Applications/VLC.app/Contents/MacOS/VLC" na-file-assocs)
          (puthash "mpeg" "/Applications/VLC.app/Contents/MacOS/VLC" na-file-assocs)))

    (if na-os-is-linux
        (progn 
          (puthash "avi" "vlc" na-file-assocs)
          (puthash "mp4" "vlc" na-file-assocs)
          (puthash "flv" "vlc" na-file-assocs)
          (puthash "wmv" "vlc" na-file-assocs)
          (puthash "mov" "vlc" na-file-assocs)
          (puthash "mkv" "vlc" na-file-assocs)
          (puthash "m4v" "vlc" na-file-assocs)
          (puthash "mpg" "vlc" na-file-assocs)
          (puthash "ts" "vlc" na-file-assocs)
          (puthash "mpeg" "vlc" na-file-assocs)
          (puthash "jpg" "gpicview" na-file-assocs)
          (puthash "png" "gpicview" na-file-assocs)))
  #+end_src

   Open file using external app or /xdg-open/,

   #+begin_src emacs-lisp
     (if na-os-is-linux
         (setq na-dired-external-viewer "xdg-open")
       (setq na-dired-external-viewer "open"))
     
     (defun na-dired-display-external (extension)
       "Open file at point in an external application."
       (interactive)
       (let ((file (dired-get-filename))
             (ext-viewer (gethash extension na-file-assocs))
             (process-connection-type nil))
         (if ext-viewer
             (start-process "" nil ext-viewer file)
             (start-process "" nil na-dired-external-viewer file))))
     
     (defun na-dired-open ()
       "Open file at point in an external application."
       (interactive)
       (let ((file-extension (file-name-extension 
                              (dired-get-filename))))
         (if file-extension
             (if (member (downcase file-extension) na-external-open-files-types)
                 (na-dired-display-external (downcase file-extension))
               (na-dired-down-directory-after-kill))
           (na-dired-down-directory-after-kill))))
   #+end_src

   Open file with Beamer app for Apple TV streaming,

   #+begin_src emacs-lisp
     (defun na-dired-display-beamer ()
       (interactive)
       (let ((file (dired-get-filename))
             (process-connection-type nil))
         (shell-command "killall Beamer")
         (start-process "" nil "/Applications/Beamer.app/Contents/MacOS/Beamer" file)))
   #+end_src

   #+begin_src emacs-lisp
     (defun na-dired-display-xee ()
       (interactive)
       (let ((file (dired-get-filename))
             (process-connection-type nil))
         (start-process "" nil "open" "-a" "Xee³" file)))
   #+end_src

  #+begin_src emacs-lisp
    (define-key dired-mode-map "\C-w" 'na-dired-up-directory-after-kill)
    (define-key dired-mode-map [return] 'na-dired-open)
    (define-key dired-mode-map (kbd "RET") 'na-dired-open)
  #+end_src

*** Dired Rsync

    https://github.com/tommytxtruong/tmtxt-dired-async

    #+begin_src emacs-lisp
      (require 'dired-aux)
      (require 'tmtxt-dired-async)
      
      (define-key dired-mode-map (kbd "C-c C-r") 'tmtxt/dired-async-rsync)
      (setq-default tmtxt/dired-async-rsync-show-progress t)
      (setq-default tmtxt/dired-async-rsync-show-verbosity t)
      (setq-default tmtxt/dired-async-rsync-archive-mode t)
      (setq-default tmtxt/dired-async-rsync-compress-mode nil)
      
      (define-key dired-mode-map (kbd "C-c C-t") 'na-dired-async-rsync-move)
      (define-key dired-mode-map (kbd "C-c C-z") 'tmtxt/dired-async-zip)
      (setq-default tmtxt/dired-async-zip-compression-level "9")
      (define-key dired-mode-map (kbd "C-c C-u") 'tmtxt/dired-async-unzip)
      
      (defun tmtxt/dired-async-rsync-progress-argument ()
        "Return the progress argument for rsync command"
        (tmtxt/dired-async-argument
         tmtxt/dired-async-rsync-show-progress
         "--progress -L "))
    #+end_src

    Use rsync to move files,

    #+begin_src emacs-lisp      
      (defun na-dired-async-rsync-move (dest)
        (interactive ;; offer dwim target as the suggestion
         (list (expand-file-name (read-file-name "Rsync to:" (dired-dwim-target-directory)))))
      
        (let* ((dir-str (dired-dwim-target-directory))
               (files (dired-get-marked-files nil current-prefix-arg))
               dired-async-rsync-command)
          ;; the rsync command
          (setq dired-async-rsync-command 
                (concat "rsync -avz --remove-source-files "))
          ;; append the arguments for rsync command
          (setq dired-async-rsync-command
                (concat dired-async-rsync-command
                        (tmtxt/dired-async-rsync-arguments)))
          ;; add all selected file names as arguments to the rsync command
          (dolist (file files)
            (setq dired-async-rsync-command
                  (concat dired-async-rsync-command 
                          (shell-quote-argument file) " ")))
          ;; append the destination to the rsync command
          (setq dired-async-rsync-command
                (concat dired-async-rsync-command 
                        (shell-quote-argument dir-str)))
      
          ;;execute the command asynchronously
          (tmtxt/dired-async dired-async-rsync-command "rsync"
                             'tmtxt/dired-async-rsync-process-handler)))
    #+end_src

*** Git Annex

    #+begin_src emacs-lisp
      (require 'git-annex)
      
      (defvar git-annex-exec "~/Apps/git-annex.linux/git-annex")
      
      (cond 
       (na-os-is-darwin  (setq git-annex-exec "/Applications/git-annex.app/Contents/MacOS/git-annex")))
    #+end_src

**** Add

    Asynchronous git annex add,

    #+begin_src emacs-lisp
      (defun na-annex-async-add ()
        (interactive)
        (let ((files (dired-get-marked-files nil current-prefix-arg))
              annex-command)
      
          (setq annex-command (concat git-annex-exec " add "))
          ;; add all selected file names as arguments to the annex command
          (dolist (file files)
            (setq annex-command
                  (concat annex-command (shell-quote-argument file) " ")))
      
          (setq annex-command
                (concat annex-command 
                        "; git commit -m \"Updated\""))
      
          (tmtxt/dired-async annex-command "git-annex"
                             'tmtxt/dired-async-rsync-process-handler)))
    #+end_src

**** Sync

    #+begin_src emacs-lisp
      (defun na-annex-async-sync ()
        (interactive)
        (let ((annex-command (concat git-annex-exec " sync")))
          (tmtxt/dired-async annex-command "git-annex"
                             'tmtxt/dired-async-rsync-process-handler)))
    #+end_src

**** Get

    Asynchronous git annex get,

    #+begin_src emacs-lisp
      (defun na-annex-async-get ()
        (interactive)
        (let ((files (dired-get-marked-files nil current-prefix-arg))
              annex-command)
      
          (setq annex-command "")
          ;; add all selected file names as arguments to the annex command
          (dolist (file files)
            (setq annex-command
                  (concat annex-command 
                          (concat git-annex-exec " get ")
                          (file-name-nondirectory (shell-quote-argument file)) ";")))
      
          (tmtxt/dired-async annex-command "git-annex"
                             'tmtxt/dired-async-rsync-process-handler)))
    #+end_src

**** Drop

    Asynchronous git annex drop,

    #+begin_src emacs-lisp
      (defun na-annex-async-drop ()
        (interactive)
        (let ((files (dired-get-marked-files nil current-prefix-arg))
              annex-command)
      
          (setq annex-command "")
          ;; add all selected file names as arguments to the annex command
          (dolist (file files)
            (setq annex-command
                  (concat annex-command 
                          (concat git-annex-exec " drop ")
                          (file-name-nondirectory (shell-quote-argument file)) ";")))
      
          (tmtxt/dired-async annex-command "git-annex"
                             'tmtxt/dired-async-rsync-process-handler)))
    #+end_src

**** Move

    #+begin_src emacs-lisp
      (defun na-annex-async-move (arg)
        (interactive "P")
        (let ((files (dired-get-marked-files nil current-prefix-arg))
              annex-command
              move-to)
      
          (setq move-to (completing-read 
                         "Remote: " 
                         (split-string (shell-command-to-string "git remote") "\n")))
      
          (setq annex-command (concat git-annex-exec " move "))
          ;; add all selected file names as arguments to the annex command
          (dolist (file files)
            (setq annex-command
                  (concat annex-command 
                          (file-name-nondirectory (shell-quote-argument file)) " ")))
          
          (setq annex-command
                (concat annex-command " --to " move-to ";"))
      
          (tmtxt/dired-async annex-command "git-annex"
                             'tmtxt/dired-async-rsync-process-handler)))
    #+end_src

**** Copy

    #+begin_src emacs-lisp
      (defun na-annex-async-copy (arg)
        (interactive "P")
        (let ((files (dired-get-marked-files nil current-prefix-arg))
              annex-command
              copy-to)
      
          (setq copy-to (completing-read 
                         "Remote: " 
                         (split-string (shell-command-to-string "git remote") "\n")))
      
          (setq annex-command (concat git-annex-exec " copy "))
          ;; add all selected file names as arguments to the annex command
          (dolist (file files)
            (setq annex-command
                  (concat annex-command 
                          (file-name-nondirectory (shell-quote-argument file)) " ")))
          
          (setq annex-command
                (concat annex-command " --to " copy-to ";"))
      
          (tmtxt/dired-async annex-command "git-annex"
                             'tmtxt/dired-async-rsync-process-handler)))
    #+end_src

**** Whereis

    Run git annex whereis for marked files,

    #+begin_src emacs-lisp
      (defun na-annex-whereis ()
        (interactive)
        (let ((files (dired-get-marked-files nil current-prefix-arg))
              annex-command)
      
          (setq annex-command "")
          ;; add all selected file names as arguments to the annex command
          (dolist (file files)
            (setq annex-command
                  (concat annex-command 
                          (concat git-annex-exec " whereis ")
                           
                          (file-name-nondirectory (shell-quote-argument file)) ";")))
          (async-shell-command annex-command (concat git-annex-exec " whereis "))
          (other-window 1)
          (local-set-key (kbd "q") '(lambda () 
                                      (interactive)
                                      (kill-this-buffer) 
                                      (other-window 1)))))
    #+end_src

**** Rename

    Run git annex move/rename

    #+begin_src emacs-lisp
      (defun na-annex-rename ()
        (interactive)
        (let* ((file (shell-quote-argument (file-name-nondirectory (dired-get-filename))))
               (to-name (shell-quote-argument 
                         (expand-file-name 
                          (read-file-name "Rename to:" (dired-dwim-target-directory)))))
               annex-command)
      
          (setq annex-command (concat "git mv " file " " to-name
                                      "; git commit -m Moved"))
          (shell-command annex-command)))
    #+end_src

**** Delete

    Run git annex delete

    #+begin_src emacs-lisp
      (defun na-annex-delete (arg)
        (interactive "P")
        (let ((files (dired-get-marked-files nil current-prefix-arg))
              annex-command)
      
          (setq annex-command "git rm -r ")
          ;; add all selected file names as arguments to the annex command
          (dolist (file files)
            (setq annex-command
                  (concat annex-command 
                          (file-name-nondirectory (shell-quote-argument file)) " ")))
      
          (setq annex-command (concat annex-command "; git commit -m Deleted"))
          
          (tmtxt/dired-async annex-command "git-annex"
                             'tmtxt/dired-async-rsync-process-handler)))
    #+end_src

**** Find File

    Get a list of remote repos,

    #+begin_src emacs-lisp
      (defun na-annex-repo-list ()
        (interactive)
        (split-string
         (replace-regexp-in-string
          "\n" " "
          (replace-regexp-in-string
           "remote.*url " "" 
           (shell-command-to-string "git config --get-regexp remote.*.url")))))
    #+end_src

    #+begin_src emacs-lisp
      (defun na-annex-find-file (path file)
        (shell-command-to-string (concat "cd " path 
                                         ";" git-annex-exec " find \"*" 
                                         (shell-quote-argument file)
                                         "\" --format='${file}'")))
      (defun na-annex-open ()
        (interactive)
        (let* ((file (file-name-nondirectory (dired-get-filename)))
               (locations (remove-if-not (lambda (x) (not (string= "" x))) 
                                         (mapcar (lambda (path)
                                                   (let ((loc (na-annex-find-file path file)))
                                                     (if (string= "" loc)
                                                         ""
                                                       (concat path loc))))
                                                 (na-annex-repo-list))))
               (process-connection-type nil))
          (start-process "" nil na-dired-external-viewer (car locations))))
    #+end_src

**** Replicate

    #+begin_src emacs-lisp
      (defun na-annex-remotes-by-free-space ()
        (interactive)
        (let* ((remotes (-> (shell-command-to-string "git remote")
                          (split-string "\n")
                          (nbutlast 1)))
      
               (remote-infos (-map 
                              (lambda (remote) 
                                (let* ((url (->> (concat "git config --get-regexp "
                                                         "remote." remote ".url"
                                                         "| awk '{print $2}'")
                                              (shell-command-to-string)
                                              (replace-regexp-in-string "\n" "")))
                                       (free-space (->> (concat "df -k " url
                                                                "| tail -n +2 "
                                                                "| awk '{print $4}'")
                                                     (shell-command-to-string)
                                                     (replace-regexp-in-string "\n" "")
                                                     (string-to-number))))
                                  (list free-space remote url))) remotes)))
          (--sort (> (car it) (car other)) remote-infos)))
      
      (defun na-annex-replicate ()
        (interactive)
        (let* ((files (dired-get-marked-files nil current-prefix-arg))
               (remotes (--map (nth 2 it) (na-annex-remotes-by-free-space)))
               (top-level (->> (shell-command-to-string "git rev-parse --show-toplevel")
                           (replace-regexp-in-string "\n" "" )))
               (relative (replace-regexp-in-string top-level "" default-directory))
               annex-command)
          
          (setq annex-command " ")
          ;; add all selected file names as arguments to the annex command
          (dolist (file files)
            (setq annex-command
                  (concat annex-command
                          "for remote in " (mapconcat 'identity remotes " ") "; "
                          "do "
                          "cd $remote" (shell-quote-argument relative) ";"
                          git-annex-exec " get " 
                          (file-name-nondirectory (shell-quote-argument file)) 
                          " --not --copies 2;"
                          git-annex-exec " sync;"
                          "done;"
                          )))
          
          (tmtxt/dired-async annex-command "git-annex"
                             'tmtxt/dired-async-rsync-process-handler)))
    #+end_src

**** Jump

    #+begin_src emacs-lisp
      (defun na-annex-jump (arg)
        (interactive "P")
        (let* ((top-level (replace-regexp-in-string
                           "\n" ""
                           (shell-command-to-string "git rev-parse --show-toplevel")))
               (relative (replace-regexp-in-string top-level "" default-directory))
               remote)
          (setq remote (completing-read 
                        "Remote: " 
                        (split-string (shell-command-to-string "git remote") "\n")))
      
          (let ((remote-path (replace-regexp-in-string
                              "/\n" ""
                              (shell-command-to-string 
                               (concat "git config remote." remote ".url")))))
            (kill-this-buffer)
            (find-file (concat remote-path relative)))))
    #+end_src

**** Keybindings

    Setup keybindings,

    #+begin_src emacs-lisp
      (defvar git-annex-async-dired-map
        (let ((map (make-keymap)))
          (define-key map "a" 'na-annex-async-add)
          (define-key map "g" 'na-annex-async-get)
          (define-key map "m" 'na-annex-async-move)
          (define-key map "c" 'na-annex-async-copy)
          (define-key map "j" 'na-annex-jump)
          (define-key map "w" 'na-annex-whereis)
          (define-key map "r" 'na-annex-rename)
          (define-key map "d" 'na-annex-delete)
          (define-key map "x" 'na-annex-replicate)
          (define-key map "s" 'na-annex-async-sync)
          (define-key map (kbd "RET") 'na-annex-open)
          map)
        "Git-annex keymap for `dired-mode' buffers.")
      
      (add-hook 'dired-mode-hook
                (lambda () (define-key dired-mode-map "!" git-annex-async-dired-map)))
    #+end_src

*** Mr

    Run mr command in directory if in dired buffer or home,

    #+begin_src emacs-lisp
      (defun na-mr-cleanup-term (cmd)
        (with-current-buffer (concat "mr-" cmd)
          (beginning-of-buffer)
          (let ((beg (point)))
            (re-search-forward (concat "mr "cmd":"))
            (goto-char (match-beginning 0))
            (let ((end (point)))
              (delete-region beg end)))
          
          (replace-regexp (concat "^ terminal") "")
          (replace-regexp (concat "^mr "cmd":.*\n\n") "")
          
          (highlight-lines-matching-regexp 
           (concat "^mr "cmd":") 'hi-green)
          
          (let ((beg (re-search-forward (concat "mr "cmd":.*\ok.*\)"))))
            (end-of-buffer)
            (let ((end (point)))
              (delete-region beg end)))
          (beginning-of-buffer)))
      
      (defun na-mr-run-handle-close (cmd)
        "Close current term buffer when `exit' from term buffer."
        (when (ignore-errors (get-buffer-process (current-buffer)))
          (set-process-sentinel (get-buffer-process (current-buffer))
                                `(lambda (proc change)
                                  (when (string-match "\\(finished\\|exited\\)" change)
                                    (na-mr-cleanup-term ,cmd))))))
      
      (defun na-mr-run-setup-term (cmd buffer-dir)
        (term "/bin/bash")
        (rename-buffer (concat "mr-" cmd))
        (term-send-raw-string 
         (concat "cd " (shell-quote-argument buffer-dir) "\n"))
        (term-send-raw-string (concat "mr "cmd"\n"))
        (term-send-raw-string "exit\n")
        (switch-to-buffer (concat "mr-" cmd))
        (na-mr-run-handle-close cmd))
      
      (defun na-mr-run-aux (cmd &optional dir)
        (interactive)
      
        (if (not (eq nil (get-buffer (concat "mr-" cmd))))
            (kill-buffer (concat "mr-" cmd)))
      
        (window-configuration-to-register 'a)
        (let* ((dired-buffer-p (derived-mode-p 'dired-mode))
               (buffer-dir (expand-file-name (if dir
                                                 dir
                                                 (if dired-buffer-p
                                                     default-directory
                                                   "~/")))))
          (na-mr-run-setup-term cmd buffer-dir)))
    #+end_src

    Run mr status,

    #+begin_src emacs-lisp
      (defun na-mr-status ()
        (interactive)
        (na-mr-run-aux "status"))
    #+end_src

    Run mr up,

    #+begin_src emacs-lisp
      (defun na-mr-pull ()
        (interactive)
        (na-mr-run-aux "pull"))
    #+end_src

    Run mr fastPush,

    #+begin_src emacs-lisp
      (defun na-mr-fast-push (&optional dir)
        (interactive)
        (na-mr-run-aux "push" dir))
    #+end_src

    Run mr sync,

    #+begin_src emacs-lisp
      (defun na-mr-sync ()
        (interactive)
        (na-mr-run-aux "sync"))
    #+end_src

** Org

   #+begin_src emacs-lisp
     (require 'org)
     (require 'htmlize)
   #+end_src

   #+begin_src emacs-lisp
     (setq org-directory "~/annex/notes/")
     (setq org-return-follows-link t)
     (setq org-hide-leading-stars t)
   #+end_src

   Use firefox for links when on Linux,

   #+begin_src emacs-lisp
     (when na-os-is-linux
       (setq browse-url-browser-function 'browse-url-generic
             browse-url-generic-program "firefox"))
   #+end_src

   Custom /html/ export. Export to Dropbox public folder.

   #+begin_src emacs-lisp
     (defun na-export-html ()
       (interactive)
       (org-export-as-html nil)
       (let* ((file (concat (car (split-string (buffer-name) "\\.")) ".html"))
              (out-file (concat "~/annex/www/dropbox.nakkaya.com/" file)))
         (rename-file file out-file t)
         (org-open-file out-file)))
   #+end_src

   Custom /html/ export. Export to Dropbox public folder. Delete any
   temporary files.

   #+begin_src emacs-lisp
     (defun na-export-pdf ()
       (interactive)
       (org-export-as-pdf-and-open nil)
       (delete-file (concat (car (split-string (buffer-name) "\\.")) ".tex"))
       (let* ((file (concat (car (split-string (buffer-name) "\\.")) ".pdf"))
              (out-file (concat "~/annex/www/dropbox.nakkaya.com/" file)))
         (rename-file file out-file t)
         (org-open-file out-file)))
   #+end_src
   
   Do an incremental search on org headers,

   #+begin_src emacs-lisp
     (defun na-search-org-headers (&optional arg)
       (interactive "P")
       (let ((char (read-char (concat "S: " arg))))
         (if (= char 13)
             (progn (pop-to-buffer "*Occur*")
                    (next-line)
                    (local-set-key (kbd "RET") 
                                   '(lambda () 
                                      (interactive)
                                      (occur-mode-goto-occurrence)
                                      (kill-buffer "*Occur*"))))
           (if (= char 127)
               (let ((str (substring arg 0 (- (length arg) 1))))
                 (occur (concat "^\\*+.*" str ".*"))
                 (na-search-org-headers str))
             (let ((str (concat arg (char-to-string char))))
               (occur (concat "^\\*+.*" str ".*"))
               (na-search-org-headers str))))))
   #+end_src

   #+begin_src emacs-lisp
     ;; any headline with level <= 4 is a target
     (setq org-refile-targets '((nil :maxlevel . 4)
                                     ; all top-level headlines in the
                                     ; current buffer are used (first) as a
                                     ; refile target
                                (org-agenda-files :maxlevel . 2)))
     
     ;; provide refile targets as paths, including the file name
     ;; (without directory) as level 1 of the path
     (setq org-refile-use-outline-path 'file)
     
     ;; allow to create new nodes (must be confirmed by the user) as
     ;; refile targets
     (setq org-refile-allow-creating-parent-nodes 'confirm)
   #+end_src

*** agenda

    #+begin_src emacs-lisp
      (setq org-todo-keyword-faces
            '(("EMAIL" . font-lock-builtin-face)
              ("TODO" . "color-160")
              ("WAITING" . font-lock-function-name-face)
              ("BACKBURNER" . font-lock-function-name-face)
              ("FEEDBACK" . font-lock-function-name-face)
              ("VERIFY" . font-lock-function-name-face)
              ("DONE" . "color-26")
              ("CANCELED" . "color-24")))
      
      (setq org-todo-keywords
            '((sequence "TODO" "EMAIL" "URGENT" "WAITING" "BACKBURNER" "FEEDBACK" "VERIFY" "|" "DONE" "CANCELED")))
    #+end_src

    #+begin_src emacs-lisp
      (when (file-exists-p "~/annex/notes/brain.org")
        (setq org-agenda-files (list "~/annex/notes/brain.org")))
      
      (setq org-agenda-custom-commands
            '(("h" "Agenda and Todo"
                    ((agenda "" ((org-agenda-ndays 3)))
                     (todo "EMAIL")
                     (todo "TODO")
                     (todo "WAITING")
                     (todo "BACKBURNER")))))
      
      (setq org-agenda-window-setup 'current-window)
      (setq org-agenda-restore-windows-after-quit t)
      (setq org-agenda-show-all-dates t)
      (setq org-deadline-warning-days 150)
      (org-toggle-sticky-agenda)
    #+end_src

    Display the current agenda.

    #+begin_src emacs-lisp
      (let ((window-configuration))
        (defun jump-to-org-agenda ()
          (interactive)
          (setq window-configuration (current-window-configuration))
          (delete-other-windows)
          (org-agenda nil "h")
          (org-agenda-redo)
          (local-set-key [f1] '(lambda () 
                                 (interactive)
                                 (kill-this-buffer)
                                 (set-window-configuration window-configuration)))))
    #+end_src

*** latex

    #+BEGIN_SRC emacs-lisp
      (setq org-latex-to-pdf-process '("~/.org2pdf.sh %b"))
    #+END_SRC

    #+BEGIN_SRC sh :tangle ~/.org2pdf.sh
      #!/bin/sh -f
      # first argument should be base latex file name
      F=$1
      echo 'Using ' $F
      echo '--------------------------------- running pdflatex first'
      pdflatex -interaction=batchmode $F
      echo '--------------------------------- running bibtex next'
      bibtex $(basename $F)
      echo '--------------------------------- running pdflatex again (and again)'
      pdflatex -interaction=batchmode $F
      pdflatex -interaction=batchmode $F
    #+END_SRC

    #+begin_src emacs-lisp
      (setq-default TeX-master t)
      (setq reftex-default-bibliography
            (quote
             ("~/.default.bib")))
      
      (defun na-org-mode-reftex-setup ()
        (interactive)
        (load-library "reftex")
        (and (buffer-file-name)
             (file-exists-p (buffer-file-name))
             (reftex-parse-all)))
      
      (add-hook 'org-mode-hook 'na-org-mode-reftex-setup)
    #+end_src

    #+begin_src emacs-lisp
      (setq org-latex-listings t)
      (add-to-list 'org-latex-packages-alist '("" "listings"))
      (add-to-list 'org-latex-packages-alist '("" "color"))
      
      (require 'ox-latex)
      (add-to-list 'org-latex-classes
                   '("literate-code"
                     "\\documentclass{article}\n
                       \\usepackage[x11names]{xcolor} % for a (setq of predefined color names, like LemonChiffon1
                       \\renewcommand{\\rmdefault}{phv} % Arial \n
                       \\renewcommand{\\sfdefault}{phv} % Arial
                       \\setlength{\\parindent}{0pt}
                       \\setlength{\\parskip}{1ex plus 0.5ex minus 0.2ex}
      
                       \\usepackage{tikz}
                       \\usetikzlibrary{backgrounds,shapes,arrows,positioning,calc,snakes,fit}
                       \\usepgflibrary{decorations.markings}
                       \\usepackage{mathtools}
      
                       \\usepackage[hmargin=3cm,vmargin=3.5cm]{geometry} \n
                       \\usepackage{hyperref}
                       \\hypersetup{
                           colorlinks,%
                           citecolor=black,%
                           filecolor=black,%
                           linkcolor=[rgb]{0.1,0.5,1.0},%
                           urlcolor=black
                       }
                       \\RequirePackage[calcwidth]{titlesec}
                       \\RequirePackage{color}
                       
                       \\definecolor{seccol}{rgb}{0.1,0.5,1.0}
                         
                       \\titleformat{\\section}[hang]{\\sffamily\\bfseries}
                       {\\color{seccol}\\Huge\\thesection}{0pt}{\\linebreak\\huge\\raggedleft}[{\\titlerule[0.5pt]}]
        
                       \\titleformat{\\subsection}[hang]{\\color{seccol}\\sffamily\\bfseries}
                       {}{0pt}{\\linebreak\\Large}[]
        
                       \\titleformat{\\subsubsection}[hang]{\\color{seccol}\\sffamily\\bfseries}
                       {}{0pt}{\\linebreak\\large}[]

                       \\titleformat{\\paragraph}[hang]{\\color{black}\\sffamily\\bfseries}
                       {}{0pt}{\\linebreak\\normalsize}[]        
        
                       \\usepackage{listings}
                       
                       \\definecolor{lineno}{rgb}{0.5,0.5,0.5}
                       \\definecolor{code}{rgb}{0,0.1,0.6}
                       \\definecolor{keyword}{rgb}{0.5,0.1,0.1}
                       
                       \\lstset{
                           basicstyle=\\sffamily\\small\\color{code},
                           showspaces=false,
                           showstringspaces=false,
                           numbers=left,
                           firstnumber=1,
                           stepnumber=5,
                           numberfirstline=true,
                           numberstyle=\\color{lineno}\\sffamily\\scriptsize,
                           keywordstyle=\\color{keyword}\\bfseries,
                           stringstyle=\\itshape,
                           aboveskip=15pt,
                           belowskip=15pt
                       }
                       
                       \\makeatletter
                       \\gdef\\lst@SkipOrPrintLabel{%
                           \\ifnum\\lst@skipnumbers=\\z@
                               \\global\\advance\\lst@skipnumbers-\\lst@stepnumber\\relax
                               \\lst@PlaceNumber
                               \\lst@numberfirstlinefalse
                           \\else
                               \\lst@ifnumberfirstline
                                   {\\def\\thelstnumber{Line \\@arabic\\c@lstnumber}\\lst@PlaceNumber}%
                                   \\lst@numberfirstlinefalse
                               \\else
                                   {\\def\\thelstnumber{-}\\lst@PlaceNumber}%
                               \\fi
                           \\fi
                           \\global\\advance\\lst@skipnumbers\\@ne}%
                       \\makeatother
                       
                       \\lstdefinelanguage{Lisp}%
                       {morekeywords={*,*1,*2,*3,*agent*,*allow-unresolved-vars*,*assert*,*clojure-version*,*command-line-args*,%
                       *compile-files*,*compile-path*,*e,*err*,*file*,*flush-on-newline*,*in*,*macro-meta*,%
                       *math-context*,*ns*,*out*,*print-dup*,*print-length*,*print-level*,*print-meta*,*print-readably*,%
                       *read-eval*,*source-path*,*use-context-classloader*,*warn-on-reflection*,+,-,->,->>,..,/,:else,%
                       <,<=,=,==,>,>=,@,accessor,aclone,add-classpath,add-watch,agent,agent-errors,aget,alength,alias,%
                       all-ns,alter,alter-meta!,alter-var-root,amap,ancestors,and,apply,areduce,array-map,aset,%
                       aset-boolean,aset-byte,aset-char,aset-double,aset-float,aset-int,aset-long,aset-short,assert,%
                       assoc,assoc!,assoc-in,associative?,atom,await,await-for,await1,bases,bean,bigdec,bigint,binding,%
                       bit-and,bit-and-not,bit-clear,bit-flip,bit-not,bit-or,bit-set,bit-shift-left,bit-shift-right,%
                       bit-test,bit-xor,boolean,boolean-array,booleans,bound-fn,bound-fn*,butlast,byte,byte-array,%
                       bytes,cast,char,char-array,char-escape-string,char-name-string,char?,chars,chunk,chunk-append,%
                       chunk-buffer,chunk-cons,chunk-first,chunk-next,chunk-rest,chunked-seq?,class,class?,%
                       clear-agent-errors,clojure-version,coll?,comment,commute,comp,comparator,compare,compare-and-set!,%
                       compile,complement,concat,cond,condp,conj,conj!,cons,constantly,construct-proxy,contains?,count,%
                       counted?,create-ns,create-struct,cycle,dec,decimal?,declare,def,definline,defmacro,defmethod,%
                       defmulti,defn,defn-,defonce,defprotocol,defstruct,deftype,delay,delay?,deliver,deref,derive,%
                       descendants,destructure,disj,disj!,dissoc,dissoc!,distinct,distinct?,do,do-template,doall,doc,%
                       dorun,doseq,dosync,dotimes,doto,double,double-array,doubles,drop,drop-last,drop-while,empty,empty?,%
                       ensure,enumeration-seq,eval,even?,every?,false,false?,ffirst,file-seq,filter,finally,find,find-doc,%
                       find-ns,find-var,first,float,float-array,float?,floats,flush,fn,fn?,fnext,for,force,format,future,%
                       future-call,future-cancel,future-cancelled?,future-done?,future?,gen-class,gen-interface,gensym,%
                       get,get-in,get-method,get-proxy-class,get-thread-bindings,get-validator,hash,hash-map,hash-set,%
                       identical?,identity,if,if-let,if-not,ifn?,import,in-ns,inc,init-proxy,instance?,int,int-array,%
                       integer?,interleave,intern,interpose,into,into-array,ints,io!,isa?,iterate,iterator-seq,juxt,%
                       key,keys,keyword,keyword?,last,lazy-cat,lazy-seq,let,letfn,line-seq,list,list*,list?,load,load-file,%
                       load-reader,load-string,loaded-libs,locking,long,long-array,longs,loop,macroexpand,macroexpand-1,%
                       make-array,make-hierarchy,map,map?,mapcat,max,max-key,memfn,memoize,merge,merge-with,meta,%
                       method-sig,methods,min,min-key,mod,monitor-enter,monitor-exit,name,namespace,neg?,new,newline,%
                       next,nfirst,nil,nil?,nnext,not,not-any?,not-empty,not-every?,not=,ns,ns-aliases,ns-imports,%
                       ns-interns,ns-map,ns-name,ns-publics,ns-refers,ns-resolve,ns-unalias,ns-unmap,nth,nthnext,num,%
                       number?,odd?,or,parents,partial,partition,pcalls,peek,persistent!,pmap,pop,pop!,pop-thread-bindings,%
                       pos?,pr,pr-str,prefer-method,prefers,primitives-classnames,print,print-ctor,print-doc,print-dup,%
                       print-method,print-namespace-doc,print-simple,print-special-doc,print-str,printf,println,println-str,%
                       prn,prn-str,promise,proxy,proxy-call-with-super,proxy-mappings,proxy-name,proxy-super,%
                       push-thread-bindings,pvalues,quot,rand,rand-int,range,ratio?,rational?,rationalize,re-find,%
                       re-groups,re-matcher,re-matches,re-pattern,re-seq,read,read-line,read-string,recur,reduce,ref,%
                       ref-history-count,ref-max-history,ref-min-history,ref-set,refer,refer-clojure,reify,%
                       release-pending-sends,rem,remove,remove-method,remove-ns,remove-watch,repeat,repeatedly,%
                       replace,replicate,require,reset!,reset-meta!,resolve,rest,resultset-seq,reverse,reversible?,%
                       rseq,rsubseq,second,select-keys,send,send-off,seq,seq?,seque,sequence,sequential?,set,set!,%
                       set-validator!,set?,short,short-array,shorts,shutdown-agents,slurp,some,sort,sort-by,sorted-map,%
                       sorted-map-by,sorted-set,sorted-set-by,sorted?,special-form-anchor,special-symbol?,split-at,%
                       split-with,str,stream?,string?,struct,struct-map,subs,subseq,subvec,supers,swap!,symbol,symbol?,%
                       sync,syntax-symbol-anchor,take,take-last,take-nth,take-while,test,the-ns,throw,time,to-array,%
                       to-array-2d,trampoline,transient,tree-seq,true,true?,try,type,unchecked-add,unchecked-dec,%
                       unchecked-divide,unchecked-inc,unchecked-multiply,unchecked-negate,unchecked-remainder,%
                       unchecked-subtract,underive,unquote,unquote-splicing,update-in,update-proxy,use,val,vals,%
                       var,var-get,var-set,var?,vary-meta,vec,vector,vector?,when,when-first,when-let,when-not,%
                       while,with-bindings,with-bindings*,with-in-str,with-loading-context,with-local-vars,%
                       with-meta,with-open,with-out-str,with-precision,xml-seq,zero?,zipmap
                       },%
                          sensitive,% ???
                          alsodigit=-,%
                          morecomment=[l];,%
                          morestring=[b]\"%
                         }[keywords,comments,strings]%"
                     
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                     ("\\paragraph{%s}" . "\\paragraph*{%s}")
                     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
      
    #+end_src

*** html

    #+begin_src emacs-lisp
      (setq org-export-html-style
        "
      <style type=\"text/css\">
        @media all
        {
          body {
            font-family: \"Helvetica Neue\", \"Lucida Grande\", \"Lucida Sans Unicode\", Helvetica, Arial, sans-serif !important;
            font-size: 14px;
            line-height: 21px;
            color: #333;
            width: 850px;
        
            max-width: 95%;
            margin: auto;
            background: #f6f6f6;
            /* background-image: url(http://orgmode.org/worg-unicorn.png); */
            background-position: 25px 5px;
            background-repeat: no-repeat;
            }
            body #content {
              padding-top: 70px;
            }
            body .title {
              margin-left: 120px;
            }
        
          /* TOC inspired by http://jashkenas.github.com/coffee-script */
          #table-of-contents {
            font-size: 10pt;
            position: fixed;
            right: 0em;
            top: 0em;
            background: white;
            -webkit-box-shadow: 0 0 1em #777777;
            -moz-box-shadow: 0 0 1em #777777;
            -webkit-border-bottom-left-radius: 5px;
            -moz-border-radius-bottomleft: 5px;
            text-align: right;
            /* ensure doesn't flow off the screen when expanded */
            max-height: 80%;
            overflow: auto; }
            #table-of-contents h2 {
              font-size: 10pt;
              max-width: 8em;
              font-weight: normal;
              padding-left: 0.5em;
              padding-left: 0.5em;
              padding-top: 0.05em;
              padding-bottom: 0.05em; }
            #table-of-contents #text-table-of-contents {
              display: none;
              text-align: left; }
            #table-of-contents:hover #text-table-of-contents {
              display: block;
              padding: 0.5em;
              margin-top: -1.5em; }
        
          #license {
            padding: .3em;
            border: 1px solid grey;
            background-color: #eeeeee;
          }
        
          h1 {
        /*
            font-family:Sans;
            font-weight:bold; */
            font-size:2.1em;
            padding:0 0 30px 0;
            margin-top: 10px;
            margin-bottom: 10px;
            margin-right: 7%;
            color: #6C5D4F;
          }
        
        /*
          h2:before {
            content: \"* \"
          }
        
          h3:before {
            content: \"** \"
          }
        
          h4:before {
            content: \"*** \"
          }
        ,*/
        
          h2 {
            font-family:Arial,sans-serif;
            font-size:1.45em;
            line-height:16px;
            padding:7px 0 0 0;
            color: #6E2432;
          }
        
          .outline-text-2 {
            margin-left: 0.1em
          }
        
          .title {
        
          }
        
          h3 {
            font-family:Arial,sans-serif;
            font-size:1.3em;
            color: #A34D32;
            margin-left: 0.6em;
          }
        
          .outline-text-3 {
            margin-left: 0.9em;
          }
        
          h4 {
            font-family:Arial,sans-serif;
            font-size:1.2em;
            margin-left: 1.2em;
            color: #A5573E;
          }
        
          .outline-text-4 {
            margin-left: 1.45em;
          }
        
          a {text-decoration: none; color: #537d7b}
          /* a:visited {text-decoration: none; color: #224444} */ /* Taken out because color too similar to text. */
          a:visited {text-decoration: none; color: #98855b}  /* this is now the color of the Unicorns horn */
          a:hover {text-decoration: underline; color: #a34d32}
        
          .todo {
            color: #CA0000;
          }
        
          .done {
            color: #006666;
          }
        
          .timestamp-kwd {
            color: #444;
          }
        
          .tag {
        
          }
        
          li {
            margin: .4em;
          }
        
          table {
            border: none;
          }
        
          td {
            border: none;
          }
        
          th {
            border: none;
          }
        
          code {
            font-size: 100%;
            color: black;
            border: 1px solid #DEDEDE;
            padding: 0px 0.2em;
          }
        
          img {
            border: none;
          }
        
          .share img {
            opacity: .4;
            -moz-opacity: .4;
            filter: alpha(opacity=40);
          }
        
          .share img:hover {
            opacity: 1;
            -moz-opacity: 1;
            filter: alpha(opacity=100);
          }
        
          /* pre {border: 1px solid #555; */
          /*      background: #EEE; */
          /*      font-size: 9pt; */
          /*      padding: 1em; */
          /*     } */
        
          /* pre { */
          /*     color: #e5e5e5; */
          /*     background-color: #000000; */
          /*     padding: 1.4em; */
          /*     border: 2px solid grey; */
          /* } */
        
          /* pre { */
          /*     background-color: #2b2b2b; */
          /*     border: 4px solid grey; */
          /*     color: #EEE; */
          /*     overflow: auto; */
          /*     padding: 1em; */
          /*  } */
        
          pre {
            font-family: Monaco, Consolas, \"Lucida Console\", monospace;
            color: gainsboro;
            background-color: #373737;
            padding: 1.2em;
            border: 1px solid #dddddd;
            overflow: auto;
        
            -moz-border-radius: 5px;
            border-radius: 5px;
      
            -webkit-box-shadow: 0px 0px 4px rgba(0,0,0,0.23);
            -moz-box-shadow: 0px 0px 4px rgba(0,0,0,0.23);
            box-shadow: 0px 0px 4px rgba(0,0,0,0.23);
          }
        
          .org-info-box {
            clear:both;
            margin-left:auto;
            margin-right:auto;
            padding:0.7em;
            /* border:1px solid #CCC; */
            /* border-radius:10px; */
            /* -moz-border-radius:10px; */
          }
          .org-info-box img {
            float:left;
            margin:0em 0.5em 0em 0em;
          }
          .org-info-box p {
            margin:0em;
            padding:0em;
          }
        
        
          .builtin {
            /* font-lock-builtin-face */
            color: #f4a460;
          }
          .comment {
            /* font-lock-comment-face */
            color: #737373;
          }
          .comment-delimiter {
            /* font-lock-comment-delimiter-face */
            color: #666666;
          }
          .constant {
            /* font-lock-constant-face */
            color: #db7093;
          }
          .doc {
            /* font-lock-doc-face */
            color: #b3b3b3;
          }
          .function-name {
            /* font-lock-function-name-face */
            color: #5f9ea0;
          }
          .headline {
            /* headline-face */
            color: #ffffff;
            background-color: #000000;
            font-weight: bold;
          }
          .keyword {
            /* font-lock-keyword-face */
            color: #4682b4;
          }
          .negation-char {
          }
          .regexp-grouping-backslash {
          }
          .regexp-grouping-construct {
          }
          .string {
            /* font-lock-string-face */
            color: #ccc79a;
          }
          .todo-comment {
            /* todo-comment-face */
            color: #ffffff;
            background-color: #000000;
            font-weight: bold;
          }
          .variable-name {
            /* font-lock-variable-name-face */
            color: #ff6a6a;
          }
          .warning {
            /* font-lock-warning-face */
            color: #ffffff;
            background-color: #cd5c5c;
            font-weight: bold;
          }
          pre.a {
            color: inherit;
            background-color: inherit;
            font: inherit;
            text-decoration: inherit;
          }
          pre.a:hover {
            text-decoration: underline;
          }
        
          /* Styles for org-info.js */
        
          .org-info-js_info-navigation
          {
            border-style:none;
          }
        
          #org-info-js_console-label
          {
            font-size:10px;
            font-weight:bold;
            white-space:nowrap;
          }
        
          .org-info-js_search-highlight
          {
            background-color:#ffff00;
            color:#000000;
            font-weight:bold;
          }
        
          #org-info-js-window
          {
            border-bottom:1px solid black;
            padding-bottom:10px;
            margin-bottom:10px;
          }
        
        
        
          .org-info-search-highlight
          {
            background-color:#adefef; /* same color as emacs default */
            color:#000000;
            font-weight:bold;
          }
        
          .org-bbdb-company {
            /* bbdb-company */
            font-style: italic;
          }
          .org-bbdb-field-name {
          }
          .org-bbdb-field-value {
          }
          .org-bbdb-name {
            /* bbdb-name */
            text-decoration: underline;
          }
          .org-bold {
            /* bold */
            font-weight: bold;
          }
          .org-bold-italic {
            /* bold-italic */
            font-weight: bold;
            font-style: italic;
          }
          .org-border {
            /* border */
            background-color: #000000;
          }
          .org-buffer-menu-buffer {
            /* buffer-menu-buffer */
            font-weight: bold;
          }
          .org-builtin {
            /* font-lock-builtin-face */
            color: #da70d6;
          }
          .org-button {
            /* button */
            text-decoration: underline;
          }
          .org-c-nonbreakable-space {
            /* c-nonbreakable-space-face */
            background-color: #ff0000;
            font-weight: bold;
          }
          .org-calendar-today {
            /* calendar-today */
            text-decoration: underline;
          }
          .org-comment {
            /* font-lock-comment-face */
            color: #b22222;
          }
          .org-comment-delimiter {
            /* font-lock-comment-delimiter-face */
            color: #b22222;
          }
          .org-constant {
            /* font-lock-constant-face */
            color: #5f9ea0;
          }
          .org-cursor {
            /* cursor */
            background-color: #000000;
          }
          .org-default {
            /* default */
            color: #000000;
            background-color: #ffffff;
          }
          .org-diary {
            /* diary */
            color: #ff0000;
          }
          .org-doc {
            /* font-lock-doc-face */
            color: #bc8f8f;
          }
          .org-escape-glyph {
            /* escape-glyph */
            color: #a52a2a;
          }
          .org-file-name-shadow {
            /* file-name-shadow */
            color: #7f7f7f;
          }
          .org-fixed-pitch {
          }
          .org-fringe {
            /* fringe */
            background-color: #f2f2f2;
          }
          .org-function-name {
            /* font-lock-function-name-face */
            color: #0000ff;
          }
          .org-header-line {
            /* header-line */
            color: #333333;
            background-color: #e5e5e5;
          }
          .org-help-argument-name {
            /* help-argument-name */
            font-style: italic;
          }
          .org-highlight {
            /* highlight */
            background-color: #b4eeb4;
          }
          .org-holiday {
            /* holiday */
            background-color: #ffc0cb;
          }
          .org-info-header-node {
            /* info-header-node */
            color: #a52a2a;
            font-weight: bold;
            font-style: italic;
          }
          .org-info-header-xref {
            /* info-header-xref */
            color: #0000ff;
            text-decoration: underline;
          }
          .org-info-menu-header {
            /* info-menu-header */
            font-weight: bold;
          }
          .org-info-menu-star {
            /* info-menu-star */
            color: #ff0000;
          }
          .org-info-node {
            /* info-node */
            color: #a52a2a;
            font-weight: bold;
            font-style: italic;
          }
          .org-info-title-1 {
            /* info-title-1 */
            font-size: 172%;
            font-weight: bold;
          }
          .org-info-title-2 {
            /* info-title-2 */
            font-size: 144%;
            font-weight: bold;
          }
          .org-info-title-3 {
            /* info-title-3 */
            font-size: 120%;
            font-weight: bold;
          }
          .org-info-title-4 {
            /* info-title-4 */
            font-weight: bold;
          }
          .org-info-xref {
            /* info-xref */
            color: #0000ff;
            text-decoration: underline;
          }
          .org-isearch {
            /* isearch */
            color: #b0e2ff;
            background-color: #cd00cd;
          }
          .org-italic {
            /* italic */
            font-style: italic;
          }
          .org-keyword {
            /* font-lock-keyword-face */
            color: #a020f0;
          }
          .org-lazy-highlight {
            /* lazy-highlight */
            background-color: #afeeee;
          }
          .org-link {
            /* link */
            color: #0000ff;
            text-decoration: underline;
          }
          .org-link-visited {
            /* link-visited */
            color: #8b008b;
            text-decoration: underline;
          }
          .org-match {
            /* match */
            background-color: #ffff00;
          }
          .org-menu {
          }
          .org-message-cited-text {
            /* message-cited-text */
            color: #ff0000;
          }
          .org-message-header-cc {
            /* message-header-cc */
            color: #191970;
          }
          .org-message-header-name {
            /* message-header-name */
            color: #6495ed;
          }
          .org-message-header-newsgroups {
            /* message-header-newsgroups */
            color: #00008b;
            font-weight: bold;
            font-style: italic;
          }
          .org-message-header-other {
            /* message-header-other */
            color: #4682b4;
          }
          .org-message-header-subject {
            /* message-header-subject */
            color: #000080;
            font-weight: bold;
          }
          .org-message-header-to {
            /* message-header-to */
            color: #191970;
            font-weight: bold;
          }
          .org-message-header-xheader {
            /* message-header-xheader */
            color: #0000ff;
          }
          .org-message-mml {
            /* message-mml */
            color: #228b22;
          }
          .org-message-separator {
            /* message-separator */
            color: #a52a2a;
          }
          .org-minibuffer-prompt {
            /* minibuffer-prompt */
            color: #0000cd;
          }
          .org-mm-uu-extract {
            /* mm-uu-extract */
            color: #006400;
            background-color: #ffffe0;
          }
          .org-mode-line {
            /* mode-line */
            color: #000000;
            background-color: #bfbfbf;
          }
          .org-mode-line-buffer-id {
            /* mode-line-buffer-id */
            font-weight: bold;
          }
          .org-mode-line-highlight {
          }
          .org-mode-line-inactive {
            /* mode-line-inactive */
            color: #333333;
            background-color: #e5e5e5;
          }
          .org-mouse {
            /* mouse */
            background-color: #000000;
          }
          .org-negation-char {
          }
          .org-next-error {
            /* next-error */
            background-color: #eedc82;
          }
          .org-nobreak-space {
            /* nobreak-space */
            color: #a52a2a;
            text-decoration: underline;
          }
          .org-org-agenda-date {
            /* org-agenda-date */
            color: #0000ff;
          }
          .org-org-agenda-date-weekend {
            /* org-agenda-date-weekend */
            color: #0000ff;
            font-weight: bold;
          }
          .org-org-agenda-restriction-lock {
            /* org-agenda-restriction-lock */
            background-color: #ffff00;
          }
          .org-org-agenda-structure {
            /* org-agenda-structure */
            color: #0000ff;
          }
          .org-org-archived {
            /* org-archived */
            color: #7f7f7f;
          }
          .org-org-code {
            /* org-code */
            color: #7f7f7f;
          }
          .org-org-column {
            /* org-column */
            background-color: #e5e5e5;
          }
          .org-org-column-title {
            /* org-column-title */
            background-color: #e5e5e5;
            font-weight: bold;
            text-decoration: underline;
          }
          .org-org-date {
            /* org-date */
            color: #a020f0;
            text-decoration: underline;
          }
          .org-org-done {
            /* org-done */
            color: #228b22;
            font-weight: bold;
          }
          .org-org-drawer {
            /* org-drawer */
            color: #0000ff;
          }
          .org-org-ellipsis {
            /* org-ellipsis */
            color: #b8860b;
            text-decoration: underline;
          }
          .org-org-formula {
            /* org-formula */
            color: #b22222;
          }
          .org-org-headline-done {
            /* org-headline-done */
            color: #bc8f8f;
          }
          .org-org-hide {
            /* org-hide */
            color: #e5e5e5;
          }
          .org-org-latex-and-export-specials {
            /* org-latex-and-export-specials */
            color: #8b4513;
          }
          .org-org-level-1 {
            /* org-level-1 */
            color: #0000ff;
          }
          .org-org-level-2 {
            /* org-level-2 */
            color: #b8860b;
          }
          .org-org-level-3 {
            /* org-level-3 */
            color: #a020f0;
          }
          .org-org-level-4 {
            /* org-level-4 */
            color: #b22222;
          }
          .org-org-level-5 {
            /* org-level-5 */
            color: #228b22;
          }
          .org-org-level-6 {
            /* org-level-6 */
            color: #5f9ea0;
          }
          .org-org-level-7 {
            /* org-level-7 */
            color: #da70d6;
          }
          .org-org-level-8 {
            /* org-level-8 */
            color: #bc8f8f;
          }
          .org-org-link {
            /* org-link */
            color: #a020f0;
            text-decoration: underline;
          }
          .org-org-property-value {
          }
          .org-org-scheduled-previously {
            /* org-scheduled-previously */
            color: #b22222;
          }
          .org-org-scheduled-today {
            /* org-scheduled-today */
            color: #006400;
          }
          .org-org-sexp-date {
            /* org-sexp-date */
            color: #a020f0;
          }
          .org-org-special-keyword {
            /* org-special-keyword */
            color: #bc8f8f;
          }
          .org-org-table {
            /* org-table */
            color: #0000ff;
          }
          .org-org-tag {
            /* org-tag */
            font-weight: bold;
          }
          .org-org-target {
            /* org-target */
            text-decoration: underline;
          }
          .org-org-time-grid {
            /* org-time-grid */
            color: #b8860b;
          }
          .org-org-todo {
            /* org-todo */
            color: #ff0000;
          }
          .org-org-upcoming-deadline {
            /* org-upcoming-deadline */
            color: #b22222;
          }
          .org-org-verbatim {
            /* org-verbatim */
            color: #7f7f7f;
            text-decoration: underline;
          }
          .org-org-warning {
            /* org-warning */
            color: #ff0000;
            font-weight: bold;
          }
          .org-outline-1 {
            /* outline-1 */
            color: #0000ff;
          }
          .org-outline-2 {
            /* outline-2 */
            color: #b8860b;
          }
          .org-outline-3 {
            /* outline-3 */
            color: #a020f0;
          }
          .org-outline-4 {
            /* outline-4 */
            color: #b22222;
          }
          .org-outline-5 {
            /* outline-5 */
            color: #228b22;
          }
          .org-outline-6 {
            /* outline-6 */
            color: #5f9ea0;
          }
          .org-outline-7 {
            /* outline-7 */
            color: #da70d6;
          }
          .org-outline-8 {
            /* outline-8 */
            color: #bc8f8f;
          }
          .outline-text-1, .outline-text-2, .outline-text-3, .outline-text-4, .outline-text-5, .outline-text-6 {
            /* Add more spacing between section. Padding, so that folding with org-info.js works as expected. */
        
          }
        
          .org-preprocessor {
            /* font-lock-preprocessor-face */
            color: #da70d6;
          }
          .org-query-replace {
            /* query-replace */
            color: #b0e2ff;
            background-color: #cd00cd;
          }
          .org-regexp-grouping-backslash {
            /* font-lock-regexp-grouping-backslash */
            font-weight: bold;
          }
          .org-regexp-grouping-construct {
            /* font-lock-regexp-grouping-construct */
            font-weight: bold;
          }
          .org-region {
            /* region */
            background-color: #eedc82;
          }
          .org-rmail-highlight {
          }
          .org-scroll-bar {
            /* scroll-bar */
            background-color: #bfbfbf;
          }
          .org-secondary-selection {
            /* secondary-selection */
            background-color: #ffff00;
          }
          .org-shadow {
            /* shadow */
            color: #7f7f7f;
          }
          .org-show-paren-match {
            /* show-paren-match */
            background-color: #40e0d0;
          }
          .org-show-paren-mismatch {
            /* show-paren-mismatch */
            color: #ffffff;
            background-color: #a020f0;
          }
          .org-string {
            /* font-lock-string-face */
            color: #bc8f8f;
          }
          .org-texinfo-heading {
            /* texinfo-heading */
            color: #0000ff;
          }
          .org-tool-bar {
            /* tool-bar */
            color: #000000;
            background-color: #bfbfbf;
          }
          .org-tooltip {
            /* tooltip */
            color: #000000;
            background-color: #ffffe0;
          }
          .org-trailing-whitespace {
            /* trailing-whitespace */
            background-color: #ff0000;
          }
          .org-type {
            /* font-lock-type-face */
            color: #228b22;
          }
          .org-underline {
            /* underline */
            text-decoration: underline;
          }
          .org-variable-name {
            /* font-lock-variable-name-face */
            color: #b8860b;
          }
          .org-variable-pitch {
          }
          .org-vertical-border {
          }
          .org-warning {
            /* font-lock-warning-face */
            color: #ff0000;
            font-weight: bold;
          }
          .rss_box {}
          .rss_title, rss_title a {}
          .rss_items {}
          .rss_item a:link, .rss_item a:visited, .rss_item a:active {}
          .rss_item a:hover {}
          .rss_date {}
        
          #postamble { 
              padding-top: 1em;
              font-size: 0.8em;
              color: #464646;
              line-height: 30%;
          }
        
        } /* END OF @media all */
        
        
        
        @media screen
        {
          #table-of-contents {
            float: right;
            border: 1px solid #CCC;
            max-width: 50%;
            overflow: auto;
          }
        } /* END OF @media screen */
      </style>")      
    #+end_src

*** babel

    #+begin_src emacs-lisp
      (require 'ob)
      (require 'ob-sh)
      (require 'ob-latex)
      (setq org-src-window-setup 'current-window)
      (setq org-src-fontify-natively t)
      (setq org-confirm-babel-evaluate nil)
    #+end_src

*** Capture

    #+begin_src emacs-lisp
      (require 'org-protocol)
    #+end_src

    #+BEGIN_SRC conf :tangle ~/.org-protocol.desktop
      [Desktop Entry]
      Name=org-protocol
      Exec=emacsclient %u
      Type=Application
      Terminal=false
      Categories=System;
      MimeType=x-scheme-handler/org-protocol;
    #+END_SRC

    #+BEGIN_EXAMPLE
      ln -s ~/.org-protocol.desktop ~/.local/share/applications/org-protocol.desktop
      update-desktop-database ~/.local/share/applications/
    #+END_EXAMPLE

    #+begin_src emacs-lisp
      (defun na-page-title (link)
        (let ((title (nth 1 (split-string link "\]\\["))))
          (substring title 0 (- (length title) 2))))
      
      (defun na-org-capture-url (link)
        (let ((title (nth 0 (split-string link "\]\\["))))
          (url-unhex-string (substring title 2 (length title)))))
      
      (defun na-org-capture-email-gmail-title (title)
        (replace-regexp-in-string " - nurullah@nakkaya.com - nakkaya.com Mail" "" 
                                  title))
      
      (defun na-org-capture-email-gmail-id (url)
        (string-match "&th=\\(.*\\)&" url)
        (match-string-no-properties 1 url))
      
      (setq org-capture-templates
            '(("l" "Link" entry (file+olp "~/annex/notes/brain.org" "Read Later")
               "* %(na-page-title (current-kill 0))\n %i \n  %(na-org-capture-url (current-kill 0)) %?\n" :immediate-finish t :prepend t)
              ("e" "Email" entry (file+olp "~/annex/notes/brain.org" "Tasks")
               "* EMAIL %(na-org-capture-email-gmail-title (na-page-title (current-kill 0)))\n  %?%i\n  https://mail.google.com/mail/#inbox/%(na-org-capture-email-gmail-id (na-org-capture-url (current-kill 0)))\n" :prepend t)
              ("t" "Todo" entry (file+olp "~/annex/notes/brain.org" "Tasks")
               "* TODO %?\n %i\n" :prepend t)
              ))
    #+end_src

** tramp

   C-x C-f /sudo:root@host[#port]:/path/to/file

   #+begin_src emacs-lisp
     (set-default 'tramp-default-proxies-alist (quote ((".*" "\\`root\\'" "/ssh:%h:"))))
   #+end_src

   Tramp Host Completion

   #+begin_src emacs-lisp
     (require 'tramp)
     (setq na-tramp-ssh-completions
           '((tramp-parse-sconfig "~/.ssh/config")
             ;;(tramp-parse-shosts "~/.ssh/known_hosts")
             ))
     (mapc (lambda (method)
             (tramp-set-completion-function 
              method na-tramp-ssh-completions))
           '("fcp" "rsync" "scp" "scpc" "scpx" "sftp" "ssh"))
   #+end_src

** IBuffer

   #+begin_src emacs-lisp 
     (setq ibuffer-saved-filter-groups
           (quote (("default"
                    ("Notes"
                     (or (name . "^brain.org$")
                         (name . "^pass.gpg$")
                         (name . "^brain.org_archive$")
                         (name . "^bookmarks.org_archive$")))
                    ("IRC" (mode . erc-mode))
                    ("Source" (or
                               (mode . java-mode)
                               (mode . clojure-mode)
                               (mode . org-mode)
                               (mode . bibtex-mode)
                               (mode . latex-mode)
                               (mode . xml-mode)
                               (mode . nxml-mode)
                               (mode . scheme-mode)
                               (mode . python-mode)
                               (mode . ruby-mode)
                               (mode . shell-script-mode)
                               (mode . sh-mode)
                               (mode . c-mode)
                               (mode . lisp-mode)
                               (mode . cperl-mode)
                               (mode . pixie-mode)
                               (mode . yaml-mode)
                               (mode . asm-mode)
                               (mode . emacs-lisp-mode)
                               (mode . c++-mode)
                               (mode . makefile-bsdmake-mode)
                               (mode . makefile-mode)
                               (mode . makefile-gmake-mode)
                               (mode . matlab-mode)
                               (mode . css-mode)))
                    ("Terminal" (or (mode . term-mode)
                                    (mode . inferior-lisp-mode)
                                    (mode . inferior-python-mode)
                                    (name . "^*MATLAB.*")
                                    (name . "^*monroe.*")
                                    (name . "^\\*offlineimap\\*$")))
                    ("Dired" (or (mode . dired-mode) 
                                 (mode . sr-mode)))
                    ("Magit" (or (name . "^\\*magit.*\\*$")
                                 (mode . magit-status-mode)
                                 (mode . magit-diff-mode)
                                 (mode . magit-process-mode)
                                 (mode . magit-stash-mode)
                                 (mode . magit-revision-mode)
                                 (mode . magit-log-mode)))
                    ("Emacs" (or
                              (name . "^\\*Process List\\*$")
                              (name . "^\\*Dired log\\*$")
                              (name . "^\\*info\\*$")
                              (name . "^\\*Man.*\\*$")
                              (name . "^\\*tramp.+\\*$")
                              (name . "^\\*trace.+SMTP.+\\*$")
                              (name . "^\\.todo-do")
                              (name . "^\\*scratch\\*$")
                              (name . "^\\*git-status\\*$")
                              (name . "^\\*git-diff\\*$")
                              (name . "^\\*git-commit\\*$")
                              (name . "^\\*Git Command Output\\*$")
                              (name . "^\\*Org Export/Publishing Help\\*$")
                              (name . "^\\*Org-Babel Error Output\\*$")
                              (name . "^\\*Org PDF LaTeX Output\\*$")
                              (name . "^\\*Org Agenda\\*$")
                              (name . "^\\*Calendar\\*$")
                              (name . "^\\*Messages\\*$")
                              (name . "^\\*Completions\\*$")
                              (name . "^\\*Warnings\\*$")
                              (name . "^\\*Org Agenda.*\\*$")
                              (name . "^\\*Org Help\\*$")
                              (name . "^\\*Backtrace\\*$")
                              (name . "^TAGS$")
                              (name . "^\\*Help\\*$")
                              (name . "^\\*Shell Command Output\\*$")
                              (name . "^\\*Calculator\\*$")
                              (name . "^\\*Calc Trail\\*$")
                              (name . "^\\*Compile-Log\\*$")))))))

     (setq ibuffer-show-empty-filter-groups nil)

     (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-switch-to-saved-filter-groups "default")))
     (setq ibuffer-expert t)

     (setq ibuffer-formats '((mark modified read-only " "
                                   (name 18 18 :left :elide)
                                   " "
                                   (mode 16 16 :left :elide)
                                   " " filename-and-process)
                             (mark " "
                                   (name 16 -1)
                                   " " filename)))
   #+end_src

** EasyPG

   #+begin_src emacs-lisp 
     (require 'epa)
     (epa-file-enable)
     
     (cond 
      (na-os-is-darwin  (setq epg-gpg-program "/usr/local/bin/gpg"))
      (na-os-is-windows (setq epg-gpg-program (concat "/bin/gpg"))))
   #+end_src

** Text Mode

   #+begin_src emacs-lisp 
     (delete-selection-mode)
     (setq fill-column 80)
     (add-hook 'text-mode-hook 'turn-on-auto-fill)
   #+end_src

** Flyspell

   #+begin_src emacs-lisp 
     (autoload 'flyspell-mode "flyspell" "On-the-fly spelling checker." t)
     
     (add-hook 'message-mode-hook 'turn-on-flyspell)
     (add-hook 'text-mode-hook 'turn-on-flyspell)
     (add-to-list 'ispell-skip-region-alist '("+begin_src" . "+end_src"))
     
     (defun turn-on-flyspell ()
       "Force flyspell-mode on using a positive arg.  For use in hooks."
       (interactive)
       (flyspell-mode 1))
   #+end_src

** Lisp
*** Common

    Custom /run-lisp/ that allows you to choose which lisp to run.

    #+begin_src emacs-lisp
      (setq lisp-programs 
            (list (list "ccl" "/home/nakkaya/Apps/ccl/lx86cl64")
                  (list "sbcl" "/opt/local/bin/sbcl")
                  (list "gambit" "/opt/local/bin/gambit-gsc")))

      (defun na-run-lisp (arg)
        (interactive "P")
        (if (null arg)
            (run-lisp (second (first lisp-programs)))
          (let (choice) 
            (setq choice (completing-read "Lisp: " (mapcar 'first lisp-programs)))
            (dolist (l lisp-programs)
              (if (string= (first l) choice)
                  (run-lisp (second l)))))))
    #+end_src

    #+begin_src emacs-lisp
      (add-hook 'inferior-lisp-mode-hook
                '(lambda ()
                   (define-key inferior-lisp-mode-map "\M-[1;5A" 'comint-previous-input)
                   (define-key inferior-lisp-mode-map "\M-[1;5B" 'comint-next-input)))
    #+end_src

*** Clojure

    #+begin_src emacs-lisp
      (require 'clojure-mode)
      (require 'monroe)
      (require 'clojure-mode-extra-font-locking)
      (add-hook 'clojure-mode-hook 'clojure-enable-monroe)
    #+end_src

    ClojureScript mode.

    #+begin_src emacs-lisp
      (add-to-list 'auto-mode-alist '("[.]cljs$" . clojure-mode))
    #+end_src

    org-babel support.

    #+begin_src emacs-lisp
      (add-to-list 'org-babel-tangle-lang-exts '("clojure" . "clj"))

      (defvar org-babel-default-header-args:clojure 
        '((:results . "silent")))

      (defun org-babel-execute:clojure (body params)
        "Execute a block of Clojure code with Babel."
        (with-temp-buffer
          (insert body)
          (monroe-eval-buffer)))

      (provide 'ob-clojure)
    #+end_src

    Replace, /fn/ with /λ/ and /#/ with /ƒ/.

    #+begin_src emacs-lisp
      (let ((fn `(("(\\(fn\\)[\[[:space:]]"
                   (0 (progn (compose-region (match-beginning 1)
                                             (match-end 1) "λ")
                             nil)))))
            (inline-fn `(("\\(#\\)("
                          (0 (progn (compose-region (match-beginning 1)
                                                    (match-end 1) "ƒ")
                                    nil))))))
            
            (font-lock-add-keywords 'clojure-mode fn)
            (font-lock-add-keywords 'clojure-mode inline-fn)
            (font-lock-add-keywords 'org-mode fn)
            (font-lock-add-keywords 'org-mode inline-fn))
    #+end_src

    #+begin_src emacs-lisp
      (global-set-key "\C-xrl" 'monroe)
      (define-key clojure-mode-map "\C-xrl" 'monroe)
      (add-hook 'clojure-mode-hook
                '(lambda ()
                   (define-key clojure-mode-map (kbd "C-c t") 'multi-term-next)))

      (add-hook 'nrepl-connected-hook
                '(lambda ()
                   (define-key cider-repl-mode-map "\M-[1;5A" 'nrepl-previous-input)
                   (define-key cider-repl-mode-map "\M-[1;5B" 'nrepl-next-input)))
    #+end_src

*** Common Lisp
    
    #+begin_src emacs-lisp
      (add-hook 'lisp-mode-hook
                (lambda ()
                  (set (make-local-variable 'lisp-indent-function)
                       'common-lisp-indent-function)))
    #+end_src
    
*** Scheme

    Sub process support for Scheme.

    #+begin_src emacs-lisp
      (add-hook 'scheme-mode-hook
                '(lambda ()
                   (define-key scheme-mode-map 
                     "\e\C-x" 'lisp-eval-defun)
                   (define-key scheme-mode-map 
                     "\C-x\C-e" 'lisp-eval-last-sexp)
                   (define-key scheme-mode-map 
                     "\C-c\C-r" 'lisp-eval-region)
                   (define-key scheme-mode-map 
                     "\C-c\C-c" '(lambda ()
                                   (interactive)
                                   (lisp-eval-string (buffer-string))))
                   (define-key scheme-mode-map 
                     "\C-c\C-z" 'run-lisp)))
    #+end_src

** Git

   #+begin_src emacs-lisp
     (require 'git)
   #+end_src

   #+begin_src emacs-lisp 
     (setq git-committer-name "Nurullah Akkaya")
     (setq git-committer-email "nurullah@nakkaya.com")
     
     (setq vc-follow-symlinks t)
     (setq magit-hide-diffs t)
     
     (when (equal system-type 'darwin)
       (setenv "PATH" (concat "/opt/local/bin:/usr/local/bin:" (getenv "PATH")))
       (push "/opt/local/bin" exec-path))
     (setq exec-path (append exec-path '("/opt/local/bin")))
   #+end_src
 
** multi-term

   #+begin_src emacs-lisp
     (require 'multi-term)
     (setq multi-term-program "/bin/bash")

     (defun na-new-term ()
       (interactive)
       (multi-term)
       ;;pass C-c
       (define-key term-raw-map [?\C-c] 'term-send-raw))

     (defun na-next-term ()
       (interactive)
       (if (> (length multi-term-buffer-list) 0)
           (let* ((term-buffers (sort (copy-tree multi-term-buffer-list)
                                      (lambda (x y)
                                        (string< (buffer-name x) (buffer-name y)))))
                  (buff-list (if (get-buffer "*monroe*")
                                 (append term-buffers (list (get-buffer "*monroe*")))
                               term-buffers))
                  (buff-list (if (get-buffer "*MATLAB*")
                                 (append buff-list (list (get-buffer "*MATLAB*")))
                               buff-list))
                  (buffer-list-len (length buff-list))
                  (index (position (current-buffer) buff-list)))
             (if index
                 (let ((target-index (mod (+ index 1) buffer-list-len)))
                   (switch-to-buffer (nth target-index buff-list)))
               (switch-to-buffer (car buff-list))))
         (na-new-term)))

     ;; from https://bitbucket.org/tavisrudd/emacs.d/src/f3738b580538/dss-term.el
     (defun na-term-toggle-mode ()
       "Toggle between term-char-mode and term-line-mode."
       (interactive)
       (if (term-in-line-mode)
           (progn
             (term-char-mode)
             (term-send-raw-string "\C-e"))
         (term-line-mode)))

     (add-hook 'term-mode-hook
               '(lambda ()
                  (define-key term-raw-map [(control y)] 'term-paste)))
   #+end_src

   #+begin_src emacs-lisp
     (add-hook 'term-mode-hook
                     (lambda () 
                       (setq mode-line-format
                             '((-3 . "%p") ;; position
                               " %b "
                               mode-line-process))))
   #+end_src

** jump

   Create marks in buffer so you can jump between them using these
   functions.

   #+begin_src emacs-lisp
     (defvar na-cm-ring nil
       "List of markers that points to buffer-positions.")
     (defun na-cm-same-pos ()
       (and na-cm-ring
            (equal (point) (marker-position (car na-cm-ring)))
            (equal (current-buffer) (marker-buffer (car na-cm-ring)))))
     
     (defun na-cm-save-point (arg)
       (interactive "P")
       (if (or (and arg (< (prefix-numeric-value arg) 0))
               (na-cm-same-pos))
           (progn
             (setq na-cm-ring (cdr na-cm-ring))
             (message "Point deleted from stack (%d left)" (length na-cm-ring)))
         (setq na-cm-ring (cons (point-marker) na-cm-ring))
         (message "Point saved (%d saved)" (length na-cm-ring))))
     
     (defun na-cm-rotate (num)
       "If point differ from first position in ring then goto that.
     Otherwise rotate the ring of points and go to the now newest point in the ring"
       (interactive "P")
       (if (not na-cm-ring)
           (error "No points saved!"))
       (setq num
             (if (null num) (if (na-cm-same-pos) 1 0)
               (prefix-numeric-value num)))
       (setq num (mod num (length na-cm-ring)))
       (let ((top nil))
         (while (> num 0)
           (setq top (cons (car na-cm-ring) top))
           (setq na-cm-ring (cdr na-cm-ring))
           (setq num (1- num)))
         (setq na-cm-ring (append na-cm-ring (nreverse top)))
         (if (marker-position (car na-cm-ring))
             (progn
               (switch-to-buffer (marker-buffer (car na-cm-ring)))
               (goto-char (car na-cm-ring)))
           (setq na-cm-ring (cdr na-cm-ring))
           (na-cm-rotate 1))))
   #+end_src

** smart-tab

   #+begin_src emacs-lisp
     (require 'smart-tab)
     (global-smart-tab-mode 1)
   #+end_src

** hide/show mode

   #+begin_src emacs-lisp
     (setq hs-common-hook (lambda()
                            (local-set-key (kbd "C-c <right>") 'hs-show-block)
                            (local-set-key (kbd "C-c <left>")  'hs-hide-block)
                            (local-set-key (kbd "C-c <up>")    'hs-hide-all)
                            (local-set-key (kbd "C-c <down>")  'hs-show-all)
                            (hs-minor-mode t)))
     
     (add-hook 'clojure-mode-hook hs-common-hook)
     (add-hook 'java-mode-hook hs-common-hook)
     (add-hook 'c-mode-common-hook hs-common-hook)
   #+end_src

** ERC

   #+BEGIN_SRC emacs-lisp
     (require 'erc-join)
     (erc-autojoin-mode 1)
     (setq erc-autojoin-channels-alist
               '(("freenode.net" "#clojure")
                 ("oftc.net" "#pentadactyl")))
     
     (setq erc-fill-column 75)
     (setq erc-track-remove-disconnected-buffers t)
     (setq erc-hide-list '("JOIN" "PART" "QUIT"))
     
     (load "~/.erc-auth.el" t)
   #+END_SRC

** tiling

   #+begin_src emacs-lisp
     (require 'tiling)
     (require 'buffer-move)
     (define-key global-map (kbd "C-M-\\") 'tiling-cycle)
     (define-key global-map (kbd "S-M-<up>"   ) 'buf-move-up)
     (define-key global-map "\M-[1;4A" 'buf-move-up)
     (define-key global-map (kbd "S-M-<down>" ) 'buf-move-down)
     (define-key global-map "\M-[1;4B" 'buf-move-down)
     (define-key global-map (kbd "S-M-<right>") 'buf-move-right)
     (global-set-key "\M-[1;4c" 'buf-move-right)
     (define-key global-map (kbd "S-M-<left>" ) 'buf-move-left)
     (global-set-key "\M-[1;4D" 'buf-move-left)
   #+end_src

** expand-region

   #+begin_src emacs-lisp
     (require 'expand-region)
     (global-set-key (kbd "C-=") 'er/expand-region)
   #+end_src

** Weka

   Syntax highlighting for weka arff files,

   #+begin_src emacs-lisp
     (require 'generic)
     (define-generic-mode 'arff-file-mode
       (list ?%)
       (list "attribute" "relation" "end" "data")
       '(
         ("\\('.*'\\)" 1 'font-lock-string-face)    
         ("^\\@\\S-*\\s-\\(\\S-*\\)" 1 'font-lock-string-face)    
         ("^\\@.*\\(real\\)" 1 'font-lock-type-face)    
         ("^\\@.*\\(integer\\)" 1 'font-lock-type-face)    
         ("^\\@.*\\(numeric\\)" 1 'font-lock-type-face)    
         ("^\\@.*\\(string\\)" 1 'font-lock-type-face)    
         ("^\\@.*\\(date\\)" 1 'font-lock-type-face)    
         ("^\\@.*\\({.*}\\)" 1 'font-lock-type-face)    
         ("^\\({\\).*\\(}\\)$" (1 'font-lock-reference-face) (2
                                                              'font-lock-reference-face))
         ("\\(\\?\\)" 1 'font-lock-reference-face)    
         ("\\(\\,\\)" 1 'font-lock-keyword-face)    
         ("\\(-?[0-9]+?.?[0-9]+\\)" 1 'font-lock-constant-face)    
         ("\\(\\@\\)" 1 'font-lock-preprocessor-face)    
         )
       (list "\.arff?")
       (list
        (function
         (lambda () 
           (setq font-lock-defaults (list 'generic-font-lock-defaults nil t ; case insensitive
                                          (list (cons ?* "w") (cons ?- "w"))))
           (turn-on-font-lock))))
       "Mode for arff-files.")
   #+end_src

** Python

   Code exec,

   - C-c ! - repl
   - C-c C-c - Execute Buffer
   - C-c | - Region

   #+BEGIN_SRC emacs-lisp
     (require 'python-mode)

     ; use IPython
     (setq-default py-shell-name "ipython")
     (setq-default py-which-bufname "IPython")
     ; use the wx backend, for both mayavi and matplotlib
     (setq py-python-command-args
       '("--gui=wx" "--pylab=wx" "-colors" "Linux"))
     (setq py-force-py-shell-name-p t)

     ; switch to the interpreter after executing code
     (setq py-shell-switch-buffers-on-execute-p t)
     (setq py-switch-buffers-on-execute-p nil)
     ; don't split windows
     (setq py-split-windows-on-execute-p nil)
     ; try to automagically figure out indentation
     (setq py-smart-indentation t)
   #+END_SRC

** Matlab

   #+BEGIN_SRC emacs-lisp
     (matlab-cedet-setup)

     (setq-default matlab-shell-command "~/Documents/Matlab/bin/matlab")

     (add-to-list 'auto-mode-alist '("[.]m$" . matlab-mode))

     (define-key matlab-mode-map 
       "\C-xrl" '(lambda ()
                   (interactive)
                   (matlab-shell)))

     (define-key matlab-mode-map 
       "\C-c\C-c" '(lambda ()
                     (interactive)
                     (matlab-shell-run-cell)))

     (define-key matlab-mode-map 
       "\C-c\C-r" '(lambda ()
                     (interactive)
                     (matlab-shell-run-region)))
   #+END_SRC

* Skeletons
** Setup

   #+begin_src emacs-lisp 
     (require 'autopair)
     (autopair-global-mode)

     (setq abbrev-mode t)
     (add-hook 'inferior-lisp-mode-hook 'abbrev-mode)
     (add-hook 'lisp-mode-hook 'abbrev-mode)
     (add-hook 'emacs-lisp-mode-hook 'abbrev-mode)
     (add-hook 'clojure-mode-hook 'abbrev-mode)
     (add-hook 'scheme-mode-hook 'abbrev-mode)
     (add-hook 'c++-mode-hook 'abbrev-mode)
     (add-hook 'c-mode-hook 'abbrev-mode)
     (add-hook 'org-mode-hook 'abbrev-mode)

     (add-hook 'clojure-mode-hook 
               (lambda ()
                 (setq local-abbrev-table clojure-mode-abbrev-table)))

     (add-hook 'inferior-lisp-mode-hook 
               (lambda ()
                 (setq local-abbrev-table inferior-lisp-mode-abbrev-table)))

     (define-abbrev-table 'inferior-lisp-mode-abbrev-table '())
     (define-abbrev-table 'java-mode-abbrev-table '())
     (define-abbrev-table 'emacs-lisp-mode-abbrev-table '())
     (define-abbrev-table 'clojure-mode-abbrev-table '())
     (define-abbrev-table 'scheme-mode-abbrev-table '())
     (define-abbrev-table 'c++-mode-abbrev-table '())
   #+end_src

** Clojure

   #+begin_src emacs-lisp 
     (define-skeleton skel-clojure-println
       ""
       nil
       "(println "_")")
     (define-abbrev clojure-mode-abbrev-table "prt" "" 'skel-clojure-println)
     
     (define-skeleton skel-clojure-defn
       ""
       nil
       "(defn "_" [])")
     (define-abbrev clojure-mode-abbrev-table "defn" "" 'skel-clojure-defn)
     
     (define-skeleton skel-clojure-defn-
       ""
       nil
       "(defn- "_" [])")
     (define-abbrev clojure-mode-abbrev-table "def-" "" 'skel-clojure-defn- )
     
     (define-skeleton skel-clojure-if
       ""
       nil
       "(if ("_"))")
     (define-abbrev clojure-mode-abbrev-table "if" "" 'skel-clojure-if )
     
     (define-skeleton skel-clojure-let
       ""
       nil
       "(let ["_"] )")
     (define-abbrev clojure-mode-abbrev-table "let" "" 'skel-clojure-let)
     
     (define-skeleton skel-clojure-ref-set
       ""
       nil
       "(dosync (ref-set "_" ))")
     (define-abbrev clojure-mode-abbrev-table "refs" "" 'skel-clojure-ref-set)
     
     (define-skeleton skel-clojure-proxy
       ""
       nil
       "(proxy ["_"] [] "
       \n > ")")
     (define-abbrev clojure-mode-abbrev-table "proxy" "" 'skel-clojure-proxy)
     
     (define-skeleton skel-clojure-doseq
       ""
       nil
       "(doseq ["_"] "
       \n > ")")
     (define-abbrev clojure-mode-abbrev-table "doseq" "" 'skel-clojure-doseq)
     
     (define-skeleton skel-clojure-do
       ""
       nil
       "(do "_" "
       \n > ")")
     (define-abbrev clojure-mode-abbrev-table "do" "" 'skel-clojure-do)
     
     (define-skeleton skel-clojure-reduce
       ""
       nil
       "(reduce (fn[h v] ) "_" ) ")
     
     (define-abbrev clojure-mode-abbrev-table "reduce" "" 'skel-clojure-reduce)
     
     (define-skeleton skel-clojure-try
       ""
       nil
       "(try "_" (catch Exception e (println e)))")
     
     (define-abbrev clojure-mode-abbrev-table "try" "" 'skel-clojure-try)
     
     (define-skeleton skel-clojure-map
       ""
       nil
       "(map #() "_")")
     
     (define-abbrev clojure-mode-abbrev-table "map" "" 'skel-clojure-map)
   #+end_src

** Scheme

   #+begin_src emacs-lisp 
     (define-skeleton skel-scheme-display
       ""
       nil
       "(display "_")")
     (define-abbrev scheme-mode-abbrev-table "prt" "" 'skel-scheme-display)
     
     (define-skeleton skel-scheme-defn
       ""
       nil
       "(define ("_"))")
     (define-abbrev scheme-mode-abbrev-table "defn" "" 'skel-scheme-defn)
     
     (define-skeleton skel-scheme-if
       ""
       nil
       "(if ("_"))")
     (define-abbrev scheme-mode-abbrev-table "if" "" 'skel-scheme-if )
     
     (define-skeleton skel-scheme-let
       ""
       nil
       "(let ("_"))")
     (define-abbrev scheme-mode-abbrev-table "let" "" 'skel-scheme-let)
     
     (define-skeleton skel-scheme-for-each
       ""
       nil
       "(for-each (lambda ("_") ()))")
     (define-abbrev scheme-mode-abbrev-table "fore" "" 'skel-scheme-for-each)
     
     (define-skeleton skel-scheme-begin
       ""
       nil
       "(begin "_" "
       \n > ")")
     (define-abbrev scheme-mode-abbrev-table "begin" "" 'skel-scheme-do)
     
     (define-skeleton skel-scheme-reduce
       ""
       nil
       "(fold-right (lambda ("_") ()))")
     (define-abbrev scheme-mode-abbrev-table "reduce" "" 'skel-scheme-reduce)
     
     (define-skeleton skel-scheme-map
       ""
       nil
       "(map (lambda ("_") ()))")
     (define-abbrev scheme-mode-abbrev-table "map" "" 'skel-scheme-map)
     
   #+end_src

** Cpp

   #+begin_src emacs-lisp 
     (define-skeleton skel-cpp-prt
       ""
       nil
       \n >
       "std::cout << " _ " << std::endl;"
       \n >)
     (define-abbrev c++-mode-abbrev-table "cout"  "" 'skel-cpp-prt)

     (define-skeleton skel-cpp-lambda
       ""
       nil
       \n >
       "auto " _ " = [] () { };"
       \n >)
     (define-abbrev c++-mode-abbrev-table "lambda"  "" 'skel-cpp-lambda)

     (define-skeleton skel-cpp-sprintln
       ""
       nil
       \n >
       "Serial.println(" _ ");"
       \n >)
     (define-abbrev c++-mode-abbrev-table "sprtn"  "" 'skel-cpp-println)

     (define-skeleton skel-arduino
       ""
       nil
       \n >
       "#define DEBUG

     // Machine States
     typedef void *(*StateFunc)();

     void *StateBoot(void);

     void *StateBoot(){
       delay(100);
       return (void*)StateBoot;
     }

     void setup(){
     #ifdef DEBUG
       Serial.begin(9600);
     #endif
     }

     void loop(){
       StateFunc stateFunc = StateBoot;

       while(1) {
         stateFunc = (StateFunc)(*stateFunc)();
       }
     }")
   #+end_src

** ELisp

   #+begin_src emacs-lisp 
     (define-skeleton skel-list-insert
       ""
       nil
       "(insert "_" )")
     (define-abbrev lisp-mode-abbrev-table "ins" "" 'skel-list-insert )
     
     (define-skeleton skel-list-setq
       ""
       nil
       "(setq "_" )")
     (define-abbrev lisp-mode-abbrev-table "set" "" 'skel-list-setq )
     
     (define-skeleton skel-list-deffun
       ""
       nil
       "(defun "_" () "
       \n >
       ")")
     (define-abbrev lisp-mode-abbrev-table "deff" "" 'skel-list-deffun )
     
     (define-skeleton skel-list-defvar
       ""
       nil
       "(defvar "_" )")
     (define-abbrev lisp-mode-abbrev-table "defv" "" 'skel-list-defvar )
     
     (define-skeleton skel-list-if
       ""
       nil
       "(if "
       _
       \n >
       " )")
     (define-abbrev lisp-mode-abbrev-table "if" "" 'skel-list-if )
     
     (define-skeleton skel-list-progn
       ""
       nil
       "(progn "
       _
       \n >
       " )")
     (define-abbrev lisp-mode-abbrev-table "progn" "" 'skel-list-progn )
     
   #+end_src

** Java

   #+begin_src emacs-lisp 
     (define-skeleton skel-java-println
       "Insert a Java println Statement"
       nil
       "System.out.println(" _ " );")
     (define-abbrev java-mode-abbrev-table "prt" "" 'skel-java-println )
     
     (define-skeleton skel-java-ife
       "Insert a Common If else Statement"
       nil
       \n >
       "if (" _ " ){"
       \n >
       "} else {"
       \n >
       "}")
     (define-abbrev java-mode-abbrev-table "ife" "" 'skel-java-ife )
     
     (define-skeleton skel-java-try
       "Insert a try catch block"
       nil
       \n >
       "try{"
       \n >
       _ \n
       "}catch( Exception e ) {" >
       " "
       \n > \n
       "}" >)
     (define-abbrev java-mode-abbrev-table "try" "" 'skel-java-try )
     
     (define-skeleton skel-java-if
       "Insert a Common If Statement"
       nil
       \n >
       "if (" _ " ){"
       \n >
       "}")
     
     (define-abbrev java-mode-abbrev-table "if" "" 'skel-java-if )
     (define-abbrev c++-mode-abbrev-table "if"  "" 'skel-java-if )
     
     (define-skeleton skel-java-for1
       "Insert a Common If Statement"
       nil
       \n >
       "for( int i=0 ; i<" _ " ;i++){"
       \n >
       "}")
     (define-abbrev java-mode-abbrev-table "for1" "" 'skel-java-for1 )
     
     
     (define-skeleton skel-java-timer
       "creates timing statements"
       nil
       \n >
       "final long start = System.currentTimeMillis();"
       \n >
       "System.out.println( Long.toString( System.currentTimeMillis() - start ) ) ;")
     (define-abbrev java-mode-abbrev-table "jtimer" "" 'skel-java-timer )
     
     (define-skeleton skel-java-comment
       "creates javadoc comment"
       nil
       \n >
       "/*"
       \n >
       "*"
       \n >
       "*"
       \n >
       "*"
       \n >
       "* @param"
       \n >
       "* @return"
       \n >
       "* @exception"
       \n >
       "*"
       \n >
       "*/"
       \n >)
     (define-abbrev java-mode-abbrev-table "jdcomment" "" 'skel-java-comment )
     
   #+end_src

** Org

   #+begin_src emacs-lisp
     (define-skeleton skel-org-src
       "Insert org src block clojure."
       nil
       >
       "#+begin_src clojure"
       \n >
        _ 
       \n > 
        "#""+end_src"
        >)
     (define-abbrev text-mode-abbrev-table "ocsrc" "" 'skel-org-src)
   #+end_src

   #+begin_src emacs-lisp
     (define-skeleton skel-org-note
       "Insert org template for a note."
       nil
       >
       "#+Title: " _ \n >
       "#+DATE:" \n >
       "#+OPTIONS: author:nil creator:nil toc:nil" \n >
       "#+LATEX_HEADER: \\usepackage[cm]{fullpage}" \n >
       "#+LATEX_HEADER: \\usepackage{listings}" \n >
       "#+LATEX_HEADER: \\renewcommand{\\rmdefault}{phv} % Arial" \n >
       "#+LATEX_HEADER: \\usepackage{hyperref}" \n >
       "#+LATEX_HEADER: \\hypersetup{" \n >
       "#+LATEX_HEADER:     colorlinks,%" \n >
       "#+LATEX_HEADER:     citecolor=black,%" \n >
       "#+LATEX_HEADER:     filecolor=black,%" \n >
       "#+LATEX_HEADER:     linkcolor=blue,%" \n >
       "#+LATEX_HEADER:     urlcolor=black" \n >
       "#+LATEX_HEADER: }" \n >
       >)
   #+end_src
* After Load

  #+begin_src emacs-lisp
    (delete-other-windows)
  #+end_src


