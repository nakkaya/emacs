#+property: results silent

* General
** Load Path

   #+begin_src emacs-lisp 
     (setq dotfiles-dir (file-name-directory
                         (or load-file-name (buffer-file-name))))
     
     (add-to-list 'load-path dotfiles-dir)
     (add-to-list 'load-path (concat dotfiles-dir "/ext/"))
     (add-to-list 'load-path (concat dotfiles-dir "/ext/clojure-mode/"))
     (add-to-list 'load-path (concat dotfiles-dir "/ext/haskell-mode/"))
     (add-to-list 'load-path (concat dotfiles-dir "/ext/gitsum/"))
     (add-to-list 'load-path (concat dotfiles-dir "/ext/org-mode/lisp/"))
     (add-to-list 'load-path (concat dotfiles-dir "/ext/org-mode/contrib/lisp/"))
     (add-to-list 'load-path (concat dotfiles-dir "/ext/expand-region.el/"))
     (add-to-list 'load-path (concat dotfiles-dir "/ext/mu4e/"))
     (add-to-list 'load-path (concat dotfiles-dir "/ext/god-mode/"))
   #+end_src

** Options

   #+begin_src emacs-lisp 
     (setq large-file-warning-threshold 256000000)
     ;;debug
     (setq debug-on-error t) 
     ;;enable blinking cursor
     (blink-cursor-mode 1)
     (put 'erase-buffer 'disabled nil)
     
     (when window-system
       ;;disable scroll bar
       (toggle-scroll-bar nil)
       (tool-bar-mode -1))
     
     (menu-bar-mode -1)
     ;;do not continue line when split frame
     (setq truncate-partial-width-windows nil)
     ;; turn on font-lock mode
     (global-font-lock-mode t)
     (when window-system
       ;; use extended compound-text coding for X clipboard
       (set-selection-coding-system 'compound-text-with-extensions))
     
     (setq bookmark-default-file "~/source/bash/emacs.bookmark")
     (setq column-number-mode t)
     (setq dired-dwim-target t)
     (setq fill-column 72)
     (setq inhibit-startup-screen t)
     (setq next-line-add-newlines nil)
     (setq query-replace-highlight t)
     (setq search-highlight t)
     (setq transient-mark-mode t)

     ;; I hate tabs!
     (setq-default indent-tabs-mode nil)
     (setq delete-by-moving-to-trash nil)
     
     ;disable backup
     (setq backup-inhibited t)
   #+end_src

   When a file changes on disk notice the change and start showing the
   new version unless I have unsaved changes. 

   #+begin_src emacs-lisp
     (global-auto-revert-mode 1)
   #+end_src

   Detect OS,

   #+begin_src emacs-lisp 
     (defvar na-os-is-darwin nil)
     (defvar na-os-is-windows nil)
     (defvar na-os-is-linux nil)
     
     (cond
      ((string-match "GNU" (emacs-version))
       (cond 
        ((string-match "linux" system-configuration)  (setq na-os-is-linux t))
        ((string-match "nt" system-configuration)     (setq na-os-is-windows t))
        ((string-match "cygwin" system-configuration) (setq na-os-is-windows t))
        ((string-match "apple" system-configuration)  (setq na-os-is-darwin t)))))
   #+end_src

   Do not open a new frame for each file on OSX,

   #+begin_src emacs-lisp 
     (when na-os-is-darwin
       (setq ns-pop-up-frames nil))
   #+end_src

   Replace yes or no with y or n,

   #+begin_src emacs-lisp 
     (defun yes-or-no-p (arg)
       "An alias for y-or-n-p, because I hate having to type 'yes' or 'no'."
       (y-or-n-p arg))
   #+end_src

   Color on selection,

   #+begin_src emacs-lisp 
     (defface completion-setup-directory-face  '((t (:foreground "Blue")))
       "Face to use for directories."
       :group 'color-file-completion)
     
     (defcustom color-file-completion-always t "If true, always turn on regexps in
     completion buffers."
       :group 'color-file-completion
       :type 'boolean)
     
     (defun completion-setup-directory-face()
       "When we are completing a filename, highlight directories."
       (interactive)
       ;;if this is completing a filename... highlight faces...
       (when (or color-file-completion-always
                 (eq minibuffer-completion-table 'read-file-name-internal))
         (let((font-lock-verbose nil))
           (font-lock-mode 1)
           (font-lock-add-keywords nil '(("[^ \n]+/" 0 'completion-setup-directory-face keep)))
           (font-lock-fontify-buffer))))
     
     (add-hook 'completion-list-mode-hook 'completion-setup-directory-face)
   #+end_src

   Support Turkish alphabet,

   #+begin_src emacs-lisp 
     (setq locale-coding-system 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
     (prefer-coding-system 'utf-8)
   #+end_src

   Copy/Paste under Linux

   #+begin_src emacs-lisp 
     (when na-os-is-linux
       (setq x-select-enable-clipboard t))
   #+end_src

** Input

   Single line scroll.

   #+begin_src emacs-lisp 
     (defun scroll-window-forward-line ()
       "Move window forward one line leaving cursor at relative position in window."
       (interactive)
       (scroll-up 1))
     
     (defun scroll-window-backward-line ()
       "Move window backward one line leaving cursor at relative position in window."
       (interactive)
       (scroll-down 1)) 
     
     (define-key global-map [wheel-up] 'scroll-window-backward-line)
     (define-key global-map [wheel-down] 'scroll-window-forward-line)
   #+end_src

   Mouse setup when running in a terminal,

   #+begin_src emacs-lisp
     (unless window-system
       (xterm-mouse-mode t)
       (require 'mouse)
       (defun track-mouse (e)) 
       (setq mouse-sel-mode t)
     
       (define-key global-map [mouse-4] 'scroll-window-backward-line)
       (define-key global-map [mouse-5] 'scroll-window-forward-line))
   #+end_src

   Set up the keyboard so the delete key on both the regular keyboard
   and the keypad delete the character under the cursor and to the right
   under X, instead of the default, backspace behavior.

   #+begin_src emacs-lisp 
     (global-set-key [delete] 'delete-char)
     (global-set-key [kp-delete] 'delete-char)
   #+end_src

   Mac specific,

   #+begin_src emacs-lisp 
     (global-set-key [S-f1] 'ns-do-hide-emacs)
     (setq mac-option-modifier 'super)
     (setq mac-command-modifier 'meta)
   #+end_src

   #+begin_src emacs-lisp 
     (global-set-key [f1] 'na-mu-switch)
     (global-set-key [S-f1] 'na-mobile-sync)
     (global-set-key [f2] 'org-babel-tangle)
     (global-set-key [S-f2] 'na-export-html)
     (global-set-key [f3] 'na-term-toggle-mode)
     (global-set-key [f4] 'na-cmus-switch)
     (global-set-key [f8] 'toggle-truncate-lines)
     (global-set-key [f12] 'na-mr-status)
     (global-set-key [S-f12] 'na-mr-fast-push)
     (global-set-key [M-f12] 'na-mr-up)
     
     (global-set-key [(control d)] 'na-bounce-sexp)
     (add-hook 'c++-mode-hook
         '(lambda ()
            (local-set-key [(control d)] 'na-bounce-sexp)))
     (add-hook 'c-mode-hook
         '(lambda ()
            (local-set-key [(control d)] 'na-bounce-sexp)))
     
     (define-key global-map [(control \])] 'ibuffer)
     (add-hook 'term-mode-hook
               '(lambda ()
                  (define-key term-raw-map [(control \])] 'ibuffer)))
     
     (define-key global-map [(meta p)] 'na-cm-rotate)
     (define-key global-map [(meta control  p)] 'na-cm-save-point)
     
     (add-hook 'term-mode-hook
               '(lambda ()
                  (define-key term-raw-map [(control \\)] 'other-window)))
     (global-set-key [(control \\)] 'other-window)
     
     (define-key global-map [(meta \\)] 'na-next-term)
     (define-key global-map [(super \\)] 'na-next-term)
     (add-hook 'term-mode-hook
               '(lambda ()
                  (define-key term-raw-map [(meta \\)] 'na-next-term)))
     (add-hook 'term-mode-hook
               '(lambda ()
                  (define-key term-raw-map [(super \\)] 'na-next-term)))
     
     (global-set-key "\C-xgs" 'na-run-git-switch)
     
     (define-key global-map [home] 'beginning-of-line)
     (define-key global-map [end] 'end-of-line)
     
     (global-set-key (kbd "C-x t") 'na-new-term) ;; create a new one
   #+end_src

** Session

   Save buffer state on exit and reload on startup.

   #+begin_src emacs-lisp 
     (load "desktop")
     (desktop-load-default)
     (setq desktop-enable t)
     (require 'saveplace)
     (setq-default save-place t)
     (setq bookmark-save-flag 1)
   #+end_src

   Bring frame to front when opening files.

   #+begin_src emacs-lisp 
     (add-hook 'server-visit-hook 'call-raise-frame)
     (add-hook 'find-file-hook 'call-raise-frame)
     
     (defun call-raise-frame ()
       (raise-frame))
   #+end_src

   Start server,

   #+begin_src emacs-lisp 
     (server-start)
   #+end_src

** Theme

  #+begin_src emacs-lisp 
    (setq frame-title-format (list "GNU Emacs " emacs-version))
    
    (if window-system
        (progn 
          (require 'powerline)
          (powerline-default)
          (setq-default mode-line-format
                        '("%e"
                          (:eval
                           (let* ((active (eq (frame-selected-window) (selected-window)))
                                  (face1 (if active 'powerline-active1 'powerline-inactive1))
                                  (face2 (if active 'powerline-active2 'powerline-inactive2))
                                  (lhs (list
                                        (powerline-raw "%*" nil 'l)
                                        (powerline-buffer-size nil 'l)
                                        (powerline-buffer-id nil 'l)
                                        
                                        (powerline-raw " ")
                                        (powerline-arrow-right nil face1)
                                        
                                        (powerline-major-mode face1 'l)
                                        (powerline-minor-modes face1 'l)
                                        (powerline-raw mode-line-process face1 'l)
                                        
                                        (powerline-narrow face1 'l)
                                        
                                        (powerline-arrow-right face1 face2)
                                        
                                        (powerline-vc face2)
                                        ))
                                  (rhs (list
                                        (powerline-raw global-mode-string face2 'r)
                                        
                                        (powerline-arrow-left face2 face1)
                                        
                                        (powerline-raw "%4l" face1 'r)
                                        (powerline-raw ":" face1)
                                        (powerline-raw "%3c" face1 'r)
                                        
                                        (powerline-arrow-left face1 nil)
                                        (powerline-raw " ")
                                        
                                        (powerline-raw "%6p" nil 'r)
                                        
                                        (powerline-hud face2 face1))))
                             (concat
                              (powerline-render lhs)
                              (powerline-fill face2 (powerline-width rhs))
                              (powerline-render rhs)))))))
      (setq-default mode-line-format
                    '(""
                      mode-line-modified
                      (-3 . "%p") ;; position
                      "[%b]"
                      "%[("
                      mode-name
                      mode-line-process
                      minor-mode-alist
                      "%n" ")%]-"
                      (line-number-mode "L%l-")
                      (column-number-mode "C%c - ")
                      "%f"                ;; print file with full path
                      " %-")))
  #+end_src

  #+begin_src emacs-lisp 
    (if window-system
        (progn 
          (set-face-foreground 'default "#bcbcbc")
          (set-face-background 'default "#060606")
          (set-face-foreground 'font-lock-string-face "#afafff")
          (set-face-foreground 'font-lock-keyword-face "#00affe")
          (set-face-foreground 'font-lock-function-name-face "#f9a505")
          (set-face-foreground 'font-lock-builtin-face "#28ed00")
          (set-face-foreground 'font-lock-comment-face "#008787")
          (set-face-foreground 'org-block-begin-line "#303030")
          (set-face-foreground 'org-block-end-line "#303030")
          (set-face-foreground 'org-todo "#ff5f00")
          (set-face-foreground 'org-warning "#ff5f00")
          (set-face-foreground 'org-agenda-structure "#00affe")
          
          (eval-after-load "diff-mode" 
            '(progn
               (set-face-foreground 'diff-added "#00ff00")
               (set-face-foreground 'diff-removed "#ff0000")
               (set-face-foreground 'diff-header "#005fff")
               (set-face-background 'diff-header "#060606")
               (set-face-background 'diff-file-header "#060606")
               (set-face-background 'diff-file-header "#121212")
               (set-face-background 'diff-refine-change "#121212")))
          
          
          (if (string= system-name "belentepe")
              (progn
                (set-face-background 'mode-line "#8a0000")
                (set-face-background 'mode-line-inactive "#380000"))
            (progn
              (set-face-background 'modeline "#8a0000")
              (set-face-background 'modeline-inactive "#380000"))))
      (progn 
        (set-face-foreground 'default "color-250")
        (set-face-background 'default "black")
        (set-face-foreground 'font-lock-string-face "color-147")
        (set-face-foreground 'font-lock-keyword-face "color-202")
        (set-face-foreground 'font-lock-function-name-face "color-178")
        (set-face-foreground 'font-lock-builtin-face "color-148")
        (set-face-foreground 'font-lock-comment-face "color-30")
        (set-face-foreground 'org-block-begin-line "color-236")
        (set-face-foreground 'org-block-end-line "color-236")
        (set-face-foreground 'org-todo "color-124")
    
        (eval-after-load "diff-mode" 
          '(progn
             (set-face-foreground 'diff-added "brightgreen")
             (set-face-foreground 'diff-removed "brightred")
             (set-face-foreground 'diff-header "color-27")
             (set-face-background 'diff-header "color-233")
             (set-face-background 'diff-file-header "color-233")
             (set-face-background 'diff-refine-change "color-233")))
    
        (eval-after-load "mu4e" '(progn
                                   (set-face-background 'mu4e-header-highlight-face "color-239")
                                   (set-face-foreground 'mu4e-unread-face "color-111")))
    
        (set-face-attribute  'mode-line
                             nil 
                             :foreground "black"
                             :background "brightblack")
        (set-face-attribute  'mode-line-inactive
                             nil 
                             :foreground "black"
                             :background "color-234")))
  #+end_src

  #+begin_src emacs-lisp
    (when window-system
      (variable-pitch-mode -1)
      (when na-os-is-linux
        (set-default-font "monaco-11")))
  #+end_src

** Misc

   Zoom In/Out

   #+BEGIN_SRC emacs-lisp
     (defun na-font-big ()
       (interactive)
       (set-face-attribute 'default nil :height 
                           (+ (face-attribute 'default :height) 10)))
     
     (defun na-font-small ()
       (interactive)
       (set-face-attribute 'default nil :height 
                           (- (face-attribute 'default :height) 10)))
     
     (define-key ctl-x-map [(control ?+)] 'na-font-big)
     (define-key ctl-x-map [(control ?-)] 'na-font-small)
   #+END_SRC

   Maximize frame.

   #+begin_src emacs-lisp
     (defun na-maximize-frame ()
       (interactive)
       (cond 
        (na-os-is-darwin  (let ((px (display-pixel-width))
                                (py (display-pixel-height))
                                (fx (frame-char-width))
                                (fy (frame-char-height))
                                tx ty)
     
                            (setq tx (- (/ px fx) 3))
                            (setq ty (- (/ py fy) 4))
                            (set-frame-position (selected-frame) 1 1)
                            (set-frame-width (selected-frame) tx)
                            (set-frame-height (selected-frame) ty)))
        (na-os-is-linux (progn 
                          (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
                                                 '(2 "_NET_WM_STATE_MAXIMIZED_VERT" 0))
                          (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
                                                 '(2 "_NET_WM_STATE_MAXIMIZED_HORZ" 0))))))
   #+end_src

   Will bounce between matching parens just like % in vi

   #+begin_src emacs-lisp
     (defun na-bounce-sexp ()
       (interactive)
       (let ((prev-char (char-to-string (preceding-char)))
             (next-char (char-to-string (following-char))))
         (cond ((string-match "[[{(<]" next-char) (forward-sexp 1))
               ((string-match "[\]})>]" prev-char) (backward-sexp 1))
               (t (error "%s" "Not on a paren, brace, or bracket")))))
   #+end_src

   Highlight matching parens.

   #+begin_src emacs-lisp
     (defun na-highlight-mathing-paren ()
       (setq show-paren-delay 0)
       (setq show-paren-style 'parenthesis)
       (make-variable-buffer-local 'show-paren-mode)
       (show-paren-mode 1)
       (set-face-background 'show-paren-match-face (face-background 'default))
       (if (boundp 'font-lock-comment-face)
         (set-face-foreground 'show-paren-match-face 
                              (face-foreground 'font-lock-comment-face))
         (set-face-foreground 'show-paren-match-face 
                              (face-foreground 'default)))
       (set-face-foreground 'show-paren-match-face "red")
       (set-face-attribute 'show-paren-match-face nil :weight 'extra-bold))
     
     (add-hook 'lisp-mode-hook 'na-highlight-mathing-paren)
     (add-hook 'emacs-lisp-mode-hook 'na-highlight-mathing-paren)
     (add-hook 'clojure-mode-hook 'na-highlight-mathing-paren)
     (add-hook 'scheme-mode-hook 'na-highlight-mathing-paren)
     (add-hook 'c++-mode-hook 'na-highlight-mathing-paren)
     (add-hook 'c-mode-hook 'na-highlight-mathing-paren)   
   #+end_src

   Indent selected region with different mode than the buffer uses,

   #+begin_src emacs-lisp
     (defvar na-indent-region-prev "")
     
     (defun na-indent-region (start end)
       (interactive "r")
       (let ((col (save-excursion (goto-char (region-beginning))
                       (current-column))))
         (kill-region start end)
         (insert
          (with-temp-buffer
            (let ((mode (completing-read 
                         "Mode: "
                         (mapcar (lambda (e) 
                                   (list (symbol-name e)))
                                 (apropos-internal "-mode$" 'commandp))
                         nil t na-indent-region-prev)))
              (setq na-indent-region-prev mode)
              (funcall (intern mode)))
            (yank)
            ;;un escape "
            (goto-char (point-min))
            (replace-string "\\\"" "\"")
            (indent-region (point-min) (point-max) nil)
            ;;escape "
            (goto-char (point-min))
            (replace-string "\"" "\\\"")
            ;;select all but first line
            (goto-char (point-min))
            (forward-line)
            (push-mark (point))
            (push-mark (point-max) nil t)
            ;;shift all text to col
            (indent-rigidly (region-beginning) (region-end) col)
            (buffer-string)))))
   #+end_src

* Modes
** C/C++

   #+begin_src emacs-lisp
     (add-to-list 'auto-mode-alist '("[.]pde$" . c++-mode))
   #+end_src

** Dired
   
   #+begin_src emacs-lisp
     (require 'dired)
   #+end_src

   #+begin_src emacs-lisp
     (setq dired-listing-switches "-aBhl  --group-directories-first")
     (require 'dired-details)
     (dired-details-install)
     (add-hook 'dired-mode-hook 'auto-revert-mode)
     
     (require 'dired-x)
     (setq dired-omit-files "^\\...+$")
     (add-hook 'dired-mode-hook (lambda () (dired-omit-mode 1)))
   #+end_src

   #+begin_src emacs-lisp
     (defun na-dired-get-size ()
       (interactive)
       (let ((files (dired-get-marked-files)))
         (with-temp-buffer
           (apply 'call-process "/usr/bin/du" nil t nil "-sch" files)
           (message "Size of all marked files: %s"
                    (progn 
                      (re-search-backward "\\(^[0-9.,]+[A-Za-z]+\\).*total$")
                      (match-string 1))))))
     
     (define-key dired-mode-map (kbd "?") 'na-dired-get-size)
   #+end_src

   Open file using /xdg-open/,

   #+begin_src emacs-lisp
     (defun na-dired-display-external ()
       "Open file at point in an external application."
       (interactive)
       (let ((file (dired-get-filename))
             (process-connection-type nil))
         (start-process "" nil na-dired-external-viewer file)))
     
     (setq na-dired-external-viewer "xdg-open")
     (define-key dired-mode-map '[\C-return] 'na-dired-display-external)
   #+end_src

   Don't bug me for each directory.

   #+begin_src emacs-lisp
     (setq dired-recursive-deletes 'always)
   #+end_src

   Go up one directory and kill buffer associated with the previous
   directory.

   #+begin_src emacs-lisp 
     (defun na-dired-up-directory-after-kill ()
       "Call 'dired-up-directory' after calling '(kill-buffer (current-buffer))'."
       (interactive)
       (let* ((buf (current-buffer))
             (kill-curr (if (= (length (get-buffer-window-list buf)) 
                               1)
                            t nil)))
         (dired-up-directory)
         (when kill-curr
           (kill-buffer buf))))
   #+end_src

  Works same as above but goes down in a directory tree.

   #+begin_src emacs-lisp 
     (defun na-dired-down-directory-after-kill ()
       "Call 'dired-find-alternate-file' after calling '(kill-buffer (current-buffer))'."
       (interactive)
       (let ((file (dired-get-filename))) 
         (if (file-directory-p file) 
             (let* ((buf (current-buffer))
                   (kill-curr (if (= (length (get-buffer-window-list buf)) 
                                     1)
                                  t nil)))
               (dired-find-file)
               (when kill-curr
                 (kill-buffer buf)))
           (dired-advertised-find-file))))
   #+end_src

  #+begin_src emacs-lisp
    (define-key dired-mode-map "\C-w" 'na-dired-up-directory-after-kill)
    (define-key dired-mode-map [return] 'na-dired-down-directory-after-kill)
    (define-key dired-mode-map [down-mouse-1] 'na-dired-display-external)
  #+end_src

*** Dired Rsync

    https://github.com/tommytxtruong/tmtxt-dired-async

    #+begin_src emacs-lisp
      (require 'dired-aux)
      (require 'tmtxt-dired-async)
      
      (define-key dired-mode-map (kbd "C-c C-r") 'tmtxt/dired-async-rsync)
      (setq-default tmtxt/dired-async-rsync-show-progress t)
      (setq-default tmtxt/dired-async-rsync-show-verbosity t)
      (setq-default tmtxt/dired-async-rsync-archive-mode t)
      (setq-default tmtxt/dired-async-rsync-compress-mode nil)
      
      (define-key dired-mode-map (kbd "C-c C-t") 'na-dired-async-rsync-move)
      (define-key dired-mode-map (kbd "C-c C-z") 'tmtxt/dired-async-zip)
      (setq-default tmtxt/dired-async-zip-compression-level "9")
      (define-key dired-mode-map (kbd "C-c C-u") 'tmtxt/dired-async-unzip)
    #+end_src

    Use rsync to move files,

    #+begin_src emacs-lisp      
      (defun na-dired-async-rsync-move (dest)
        (interactive ;; offer dwim target as the suggestion
         (list (expand-file-name (read-file-name "Rsync to:" (dired-dwim-target-directory)))))
      
        (let* ((dir-str (dired-dwim-target-directory))
               (files (dired-get-marked-files nil current-prefix-arg))
               dired-async-rsync-command)
          ;; the rsync command
          (setq dired-async-rsync-command 
                (concat "rsync -avz --remove-source-files "))
          ;; append the arguments for rsync command
          (setq dired-async-rsync-command
                (concat dired-async-rsync-command
                        (tmtxt/dired-async-rsync-arguments)))
          ;; add all selected file names as arguments to the rsync command
          (dolist (file files)
            (setq dired-async-rsync-command
                  (concat dired-async-rsync-command 
                          (shell-quote-argument file) " ")))
          ;; append the destination to the rsync command
          (setq dired-async-rsync-command
                (concat dired-async-rsync-command 
                        (shell-quote-argument dir-str)))
      
          ;;execute the command asynchronously
          (tmtxt/dired-async dired-async-rsync-command "rsync"
                             'tmtxt/dired-async-rsync-process-handler)))
    #+end_src

    #+begin_src emacs-lisp      
      (defun na-dired-async-rsync-ssh (dest)
        (interactive ;; offer dwim target as the suggestion
         (list (expand-file-name (read-file-name "Rsync to:" (dired-dwim-target-directory)))))
      
        (let ((dir-str (dired-dwim-target-directory)))
          (when (string-match ".*:\\(.*\\)@\\(.*\\)#\\(.*\\):\\(.*\\)" dir-str)
            (let ((user (match-string 1 dir-str))
                  (host (match-string 2 dir-str))
                  (port (match-string 3 dir-str))
                  (path (match-string 4 dir-str)))
              
              (let ((files (dired-get-marked-files nil current-prefix-arg))
                    dired-async-rsync-command)
                ;; the rsync command
                (setq dired-async-rsync-command (concat "rsync -avz -e 'ssh -p " port "' "))
                ;; append the arguments for rsync command
                (setq dired-async-rsync-command
                      (concat dired-async-rsync-command
                              (tmtxt/dired-async-rsync-arguments)))
                ;; add all selected file names as arguments to the rsync command
                (dolist (file files)
                  (setq dired-async-rsync-command
                        (concat dired-async-rsync-command (shell-quote-argument file) " ")))
                ;; append the destination to the rsync command
                (setq dired-async-rsync-command
                      (concat dired-async-rsync-command 
                              (shell-quote-argument (concat user "@" host ":" path))))

                ;;execute the command asynchronously
                (tmtxt/dired-async dired-async-rsync-command "rsync"
                                   'tmtxt/dired-async-rsync-process-handler))))))
    #+end_src

*** Git Annex

    #+begin_src emacs-lisp
      (require 'git-annex)
    #+end_src

    Asynchronous git annex add,

    #+begin_src emacs-lisp
      (defun na-annex-async-add ()
        (interactive)
        (let ((files (dired-get-marked-files nil current-prefix-arg))
              annex-command)
      
          (setq annex-command "git annex add ")
          ;; add all selected file names as arguments to the annex command
          (dolist (file files)
            (setq annex-command
                  (concat annex-command (shell-quote-argument file) " ")))
      
          (setq annex-command
                (concat annex-command 
                        "; git commit -m \"Updated\""))
      
          (tmtxt/dired-async annex-command "git-annex"
                             'tmtxt/dired-async-rsync-process-handler)))
    #+end_src

    Asynchronous git annex get,

    #+begin_src emacs-lisp
      (defun na-annex-async-get ()
        (interactive)
        (let ((files (dired-get-marked-files nil current-prefix-arg))
              annex-command)
      
          (setq annex-command "")
          ;; add all selected file names as arguments to the annex command
          (dolist (file files)
            (setq annex-command
                  (concat annex-command 
                          "git annex get " 
                          (file-name-nondirectory (shell-quote-argument file)) ";")))
      
          (tmtxt/dired-async annex-command "git-annex"
                             'tmtxt/dired-async-rsync-process-handler)))
    #+end_src

    Run git annex whereis for marked files,

    #+begin_src emacs-lisp
      (defun na-annex-whereis ()
        (interactive)
        (let ((files (dired-get-marked-files nil current-prefix-arg))
              annex-command)
      
          (setq annex-command "")
          ;; add all selected file names as arguments to the annex command
          (dolist (file files)
            (setq annex-command
                  (concat annex-command 
                          "git annex whereis " 
                          (file-name-nondirectory (shell-quote-argument file)) ";")))
          (async-shell-command annex-command "git annex whereis")
          (other-window 1)
          (local-set-key (kbd "q") '(lambda () 
                                      (interactive)
                                      (kill-this-buffer) 
                                      (other-window 1)))))
    #+end_src

    Run git annex move/rename

    #+begin_src emacs-lisp
      (defun na-annex-rename ()
        (interactive)
        (let* ((file (shell-quote-argument (file-name-nondirectory (dired-get-filename))))
               (to-name (shell-quote-argument (read-directory-name "Rename To: ")))
               annex-command)
      
          (setq annex-command (concat "git mv " file " " to-name
                                      "; git commit -m Moved"))
          (shell-command annex-command)))
    #+end_src

    Run git annex delete

    #+begin_src emacs-lisp
      (defun na-annex-delete ()
        (interactive)
        (let* ((file (shell-quote-argument (file-name-nondirectory (dired-get-filename))))
               annex-command)
          (setq annex-command (concat "git rm -r " file "; git commit -m Deleted"))
          (shell-command annex-command)))
    #+end_src

    Get a list of remote repos,

    #+begin_src emacs-lisp
      (defun na-annex-repo-list ()
        (interactive)
        (split-string
         (replace-regexp-in-string
          "\n" " "
          (replace-regexp-in-string
           "remote.*url " "" 
           (shell-command-to-string "git config --get-regexp remote.*.url")))))
    #+end_src

    #+begin_src emacs-lisp
      (defun na-annex-find-file (path file)
        (shell-command-to-string (concat "cd " path 
                                         ";git annex find \"*" file "\" --format='${file}'")))
      (defun na-annex-open ()
        (interactive)
        (let* ((file (file-name-nondirectory (dired-get-filename)))
               (locations (remove-if-not (lambda (x) (not (string= "" x))) 
                                         (mapcar (lambda (path)
                                                   (let ((loc (na-annex-find-file path file)))
                                                     (if (string= "" loc)
                                                         ""
                                                       (concat path loc))))
                                                 (na-annex-repo-list))))
              (process-connection-type nil))
          (start-process "" nil na-dired-external-viewer (car locations))))
      
      (defun na-annex-sync ()
        (interactive)
        (tmtxt/dired-async (mapconcat 'identity
                                      (mapcar (lambda (path)
                                                (concat "cd " path ";git annex sync"))
                                              (cons (shell-quote-argument default-directory) 
                                                    (na-annex-repo-list)))
                                      ";")
                           "git-annex"
                           'tmtxt/dired-async-rsync-process-handler))
    #+end_src

    Setup keybindings,

    #+begin_src emacs-lisp
      (defvar git-annex-async-dired-map
        (let ((map (make-keymap)))
          (define-key map "a" 'na-annex-async-add)
          (define-key map "g" 'na-annex-async-get)
          (define-key map "s" 'na-annex-sync)
          (define-key map "w" 'na-annex-whereis)
          (define-key map "r" 'na-annex-rename)
          (define-key map "d" 'na-annex-delete)
          (define-key map (kbd "RET") 'na-annex-open)
          map)
        "Git-annex keymap for `dired-mode' buffers.")
      
      (add-hook 'dired-mode-hook
                (lambda () (define-key dired-mode-map "!" git-annex-async-dired-map)))
    #+end_src

*** Mr

    Run mr command in directory if in dired buffer or home,

    #+begin_src emacs-lisp
      (defun na-mr-run-aux (cmd)
        (interactive)
      
        (if (not (eq nil (get-buffer (concat "mr-" cmd))))
            (kill-buffer (concat "mr-" cmd)))
      
        (window-configuration-to-register 'a)
        (let* ((dired-buffer-p (derived-mode-p 'dired-mode))
               (buffer-dir (expand-file-name default-directory)))
          
          (term "/bin/bash")
          (rename-buffer (concat "mr-" cmd))
          (if dired-buffer-p
              (term-send-raw-string 
               (concat "cd " (shell-quote-argument buffer-dir) "\n"))
            (term-send-raw-string "cd ~/\n"))
          (term-send-raw-string (concat "mr "cmd"\n"))
          (term-send-raw-string "exit\n")
          
          (switch-to-buffer (concat "mr-" cmd))
          
          (while (get-buffer-process (concat "mr-" cmd))
            (sit-for 0.5))
          
          (beginning-of-buffer)
          (let ((beg (point)))
            (re-search-forward (concat "mr "cmd":"))
            (beginning-of-line)
            (let ((end (point)))
              (delete-region beg end)))
          
          (replace-regexp (concat "^mr "cmd":.*\n\n") "")
          
          (let ((beg (re-search-forward (concat "mr "cmd":.*\ok\)"))))
            (end-of-buffer)
            (let ((end (point)))
              (delete-region beg end)))
          (beginning-of-buffer)
          
          (local-set-key 
           (kbd "q") 
           '(lambda () 
              (interactive)
              (kill-this-buffer)
              (jump-to-register 'a)))))
    #+end_src

    Run mr status,

    #+begin_src emacs-lisp
      (defun na-mr-status ()
        (interactive)
        (na-mr-run-aux "status"))
    #+end_src

    Run mr up,

    #+begin_src emacs-lisp
      (defun na-mr-up ()
        (interactive)
        (na-mr-run-aux "up"))
    #+end_src

    Run mr fastPush,

    #+begin_src emacs-lisp
      (defun na-mr-fast-push ()
        (interactive)
        (na-mr-run-aux "fastPush"))
    #+end_src

** Org

   #+begin_src emacs-lisp
     (require 'org)
     (require 'htmlize)
   #+end_src

   #+begin_src emacs-lisp
     (setq org-directory "~/source/org/")
     (setq org-return-follows-link t)
     (setq org-hide-leading-stars t)
   #+end_src

   Use firefox for links when on Linux,

   #+begin_src emacs-lisp
     (when na-os-is-linux
       (setq browse-url-browser-function 'browse-url-generic
             browse-url-generic-program "firefox"))
   #+end_src

   Custom /html/ export. Export to Dropbox public folder.

   #+begin_src emacs-lisp
     (defun na-export-html ()
       (interactive)
       (org-export-as-html nil)
       (let* ((file (concat (car (split-string (buffer-name) "\\.")) ".html"))
              (out-file (concat "~/annex/www/dropbox.nakkaya.com/" file)))
         (rename-file file out-file t)
         (org-open-file out-file)))
   #+end_src

   Custom /html/ export. Export to Dropbox public folder. Delete any
   temporary files.

   #+begin_src emacs-lisp
     (defun na-export-pdf ()
       (interactive)
       (org-export-as-pdf-and-open nil)
       (delete-file (concat (car (split-string (buffer-name) "\\.")) ".tex"))
       (let* ((file (concat (car (split-string (buffer-name) "\\.")) ".pdf"))
              (out-file (concat "~/annex/www/dropbox.nakkaya.com/" file)))
         (rename-file file out-file t)
         (org-open-file out-file)))
   #+end_src
   
   Do an incremental search on org headers,

   #+begin_src emacs-lisp
     (defun na-search-org-headers (&optional arg)
       (interactive "P")
       (let ((char (read-char (concat "S: " arg))))
         (if (= char 13)
             (progn (pop-to-buffer "*Occur*")
                    (next-line)
                    (local-set-key (kbd "<return>") 
                                   '(lambda () 
                                      (interactive)
                                      (occur-mode-goto-occurrence)
                                      (kill-buffer "*Occur*"))))
           (if (= char 127)
               (let ((str (substring arg 0 (- (length arg) 1))))
                 (occur (concat "^\\*+.*" str ".*"))
                 (na-search-org-headers str))
             (let ((str (concat arg (char-to-string char))))
               (occur (concat "^\\*+.*" str ".*"))
               (na-search-org-headers str))))))
     
     (define-key org-mode-map (kbd "C-c C-v") 'na-search-org-headers)
   #+end_src

   Do mobile sync,

   #+begin_src emacs-lisp
     (defun na-mobile-sync ()
       (interactive)
       (org-mobile-pull)
       (org-mobile-push))
   #+end_src

*** agenda

    #+begin_src emacs-lisp
      (setq org-mobile-inbox-for-pull "~/source/org/from-mobile.org")
      (setq org-mobile-directory "/scpc:nakkaya@5.9.103.70#443:/home/nakkaya/mobile-org")
      (setq org-mobile-files (list "~/source/org/gtd.org"))
      (setq org-agenda-files (list "~/source/org/gtd.org"))
      
      (setq org-mobile-force-id-on-agenda-items nil)
      (setq org-agenda-custom-commands
            '(("h" "Agenda and Todo"
                    ((agenda "" ((org-agenda-ndays 3)))
                     (todo "TODO")
                     (todo "WAITING")
                     (todo "BACKBURNER")))))
      
      (setq org-agenda-window-setup 'other-window)
      (setq org-agenda-restore-windows-after-quit t)
      (setq org-agenda-show-all-dates t)
      (setq org-deadline-warning-days 150)
      (org-toggle-sticky-agenda)
      (org-agenda nil "h")
    #+end_src

    Display the current agenda.

    #+begin_src emacs-lisp
      (defun jump-to-org-agenda ()
        (interactive)
        (let ((agenda-window (get-buffer-window org-agenda-buffer-name t)))
          (if agenda-window
            (with-selected-window agenda-window (org-agenda-redo))
            (funcall (lambda () (org-agenda nil "h"))))))
    #+end_src

*** latex

    #+BEGIN_SRC emacs-lisp
      (setq org-latex-to-pdf-process '("~/Dropbox/bash/org2pdf.sh %b"))
    #+END_SRC

    #+begin_src emacs-lisp
      (setq-default TeX-master t)
      (setq reftex-default-bibliography
            (quote
             ("~/Dropbox/org/default.bib")))
      
      (defun na-org-mode-reftex-setup ()
        (interactive)
        (load-library "reftex")
        (and (buffer-file-name)
             (file-exists-p (buffer-file-name))
             (reftex-parse-all)))
      
      (add-hook 'org-mode-hook 'na-org-mode-reftex-setup)
    #+end_src

    #+begin_src emacs-lisp
      (setq org-latex-listings t)
      (add-to-list 'org-latex-packages-alist '("" "listings"))
      (add-to-list 'org-latex-packages-alist '("" "color"))
      
      (require 'ox-latex)
      (add-to-list 'org-latex-classes
                   '("literate-code"
                     "\\documentclass{article}\n
                       \\usepackage[x11names]{xcolor} % for a (setq of predefined color names, like LemonChiffon1
                       \\renewcommand{\\rmdefault}{phv} % Arial \n
                       \\renewcommand{\\sfdefault}{phv} % Arial
                       \\setlength{\\parindent}{0pt}
                       \\setlength{\\parskip}{1ex plus 0.5ex minus 0.2ex}
      
                       \\usepackage{tikz}
                       \\usetikzlibrary{backgrounds,shapes,arrows,positioning,calc,snakes,fit}
                       \\usepgflibrary{decorations.markings}
                       \\usepackage{mathtools}
      
                       \\usepackage[hmargin=3cm,vmargin=3.5cm]{geometry} \n
                       \\usepackage{hyperref}
                       \\hypersetup{
                           colorlinks,%
                           citecolor=black,%
                           filecolor=black,%
                           linkcolor=[rgb]{0.1,0.5,1.0},%
                           urlcolor=black
                       }
                       \\RequirePackage[calcwidth]{titlesec}
                       \\RequirePackage{color}
                       
                       \\definecolor{seccol}{rgb}{0.1,0.5,1.0}
                         
                       \\titleformat{\\section}[hang]{\\sffamily\\bfseries}
                       {\\color{seccol}\\Huge\\thesection}{0pt}{\\linebreak\\huge\\raggedleft}[{\\titlerule[0.5pt]}]
        
                       \\titleformat{\\subsection}[hang]{\\color{seccol}\\sffamily\\bfseries}
                       {}{0pt}{\\linebreak\\Large}[]
        
                       \\titleformat{\\subsubsection}[hang]{\\color{seccol}\\sffamily\\bfseries}
                       {}{0pt}{\\linebreak\\large}[]
        
        
                       \\usepackage{listings}
                       
                       \\definecolor{lineno}{rgb}{0.5,0.5,0.5}
                       \\definecolor{code}{rgb}{0,0.1,0.6}
                       \\definecolor{keyword}{rgb}{0.5,0.1,0.1}
                       
                       \\lstset{
                           basicstyle=\\sffamily\\small\\color{code},
                           showspaces=false,
                           showstringspaces=false,
                           numbers=left,
                           firstnumber=1,
                           stepnumber=5,
                           numberfirstline=true,
                           numberstyle=\\color{lineno}\\sffamily\\scriptsize,
                           keywordstyle=\\color{keyword}\\bfseries,
                           stringstyle=\\itshape,
                           aboveskip=15pt,
                           belowskip=15pt
                       }
                       
                       \\makeatletter
                       \\gdef\\lst@SkipOrPrintLabel{%
                           \\ifnum\\lst@skipnumbers=\\z@
                               \\global\\advance\\lst@skipnumbers-\\lst@stepnumber\\relax
                               \\lst@PlaceNumber
                               \\lst@numberfirstlinefalse
                           \\else
                               \\lst@ifnumberfirstline
                                   {\\def\\thelstnumber{Line \\@arabic\\c@lstnumber}\\lst@PlaceNumber}%
                                   \\lst@numberfirstlinefalse
                               \\else
                                   {\\def\\thelstnumber{-}\\lst@PlaceNumber}%
                               \\fi
                           \\fi
                           \\global\\advance\\lst@skipnumbers\\@ne}%
                       \\makeatother
                       
                       \\lstdefinelanguage{Lisp}%
                       {morekeywords={*,*1,*2,*3,*agent*,*allow-unresolved-vars*,*assert*,*clojure-version*,*command-line-args*,%
                       *compile-files*,*compile-path*,*e,*err*,*file*,*flush-on-newline*,*in*,*macro-meta*,%
                       *math-context*,*ns*,*out*,*print-dup*,*print-length*,*print-level*,*print-meta*,*print-readably*,%
                       *read-eval*,*source-path*,*use-context-classloader*,*warn-on-reflection*,+,-,->,->>,..,/,:else,%
                       <,<=,=,==,>,>=,@,accessor,aclone,add-classpath,add-watch,agent,agent-errors,aget,alength,alias,%
                       all-ns,alter,alter-meta!,alter-var-root,amap,ancestors,and,apply,areduce,array-map,aset,%
                       aset-boolean,aset-byte,aset-char,aset-double,aset-float,aset-int,aset-long,aset-short,assert,%
                       assoc,assoc!,assoc-in,associative?,atom,await,await-for,await1,bases,bean,bigdec,bigint,binding,%
                       bit-and,bit-and-not,bit-clear,bit-flip,bit-not,bit-or,bit-set,bit-shift-left,bit-shift-right,%
                       bit-test,bit-xor,boolean,boolean-array,booleans,bound-fn,bound-fn*,butlast,byte,byte-array,%
                       bytes,cast,char,char-array,char-escape-string,char-name-string,char?,chars,chunk,chunk-append,%
                       chunk-buffer,chunk-cons,chunk-first,chunk-next,chunk-rest,chunked-seq?,class,class?,%
                       clear-agent-errors,clojure-version,coll?,comment,commute,comp,comparator,compare,compare-and-set!,%
                       compile,complement,concat,cond,condp,conj,conj!,cons,constantly,construct-proxy,contains?,count,%
                       counted?,create-ns,create-struct,cycle,dec,decimal?,declare,def,definline,defmacro,defmethod,%
                       defmulti,defn,defn-,defonce,defprotocol,defstruct,deftype,delay,delay?,deliver,deref,derive,%
                       descendants,destructure,disj,disj!,dissoc,dissoc!,distinct,distinct?,do,do-template,doall,doc,%
                       dorun,doseq,dosync,dotimes,doto,double,double-array,doubles,drop,drop-last,drop-while,empty,empty?,%
                       ensure,enumeration-seq,eval,even?,every?,false,false?,ffirst,file-seq,filter,finally,find,find-doc,%
                       find-ns,find-var,first,float,float-array,float?,floats,flush,fn,fn?,fnext,for,force,format,future,%
                       future-call,future-cancel,future-cancelled?,future-done?,future?,gen-class,gen-interface,gensym,%
                       get,get-in,get-method,get-proxy-class,get-thread-bindings,get-validator,hash,hash-map,hash-set,%
                       identical?,identity,if,if-let,if-not,ifn?,import,in-ns,inc,init-proxy,instance?,int,int-array,%
                       integer?,interleave,intern,interpose,into,into-array,ints,io!,isa?,iterate,iterator-seq,juxt,%
                       key,keys,keyword,keyword?,last,lazy-cat,lazy-seq,let,letfn,line-seq,list,list*,list?,load,load-file,%
                       load-reader,load-string,loaded-libs,locking,long,long-array,longs,loop,macroexpand,macroexpand-1,%
                       make-array,make-hierarchy,map,map?,mapcat,max,max-key,memfn,memoize,merge,merge-with,meta,%
                       method-sig,methods,min,min-key,mod,monitor-enter,monitor-exit,name,namespace,neg?,new,newline,%
                       next,nfirst,nil,nil?,nnext,not,not-any?,not-empty,not-every?,not=,ns,ns-aliases,ns-imports,%
                       ns-interns,ns-map,ns-name,ns-publics,ns-refers,ns-resolve,ns-unalias,ns-unmap,nth,nthnext,num,%
                       number?,odd?,or,parents,partial,partition,pcalls,peek,persistent!,pmap,pop,pop!,pop-thread-bindings,%
                       pos?,pr,pr-str,prefer-method,prefers,primitives-classnames,print,print-ctor,print-doc,print-dup,%
                       print-method,print-namespace-doc,print-simple,print-special-doc,print-str,printf,println,println-str,%
                       prn,prn-str,promise,proxy,proxy-call-with-super,proxy-mappings,proxy-name,proxy-super,%
                       push-thread-bindings,pvalues,quot,rand,rand-int,range,ratio?,rational?,rationalize,re-find,%
                       re-groups,re-matcher,re-matches,re-pattern,re-seq,read,read-line,read-string,recur,reduce,ref,%
                       ref-history-count,ref-max-history,ref-min-history,ref-set,refer,refer-clojure,reify,%
                       release-pending-sends,rem,remove,remove-method,remove-ns,remove-watch,repeat,repeatedly,%
                       replace,replicate,require,reset!,reset-meta!,resolve,rest,resultset-seq,reverse,reversible?,%
                       rseq,rsubseq,second,select-keys,send,send-off,seq,seq?,seque,sequence,sequential?,set,set!,%
                       set-validator!,set?,short,short-array,shorts,shutdown-agents,slurp,some,sort,sort-by,sorted-map,%
                       sorted-map-by,sorted-set,sorted-set-by,sorted?,special-form-anchor,special-symbol?,split-at,%
                       split-with,str,stream?,string?,struct,struct-map,subs,subseq,subvec,supers,swap!,symbol,symbol?,%
                       sync,syntax-symbol-anchor,take,take-last,take-nth,take-while,test,the-ns,throw,time,to-array,%
                       to-array-2d,trampoline,transient,tree-seq,true,true?,try,type,unchecked-add,unchecked-dec,%
                       unchecked-divide,unchecked-inc,unchecked-multiply,unchecked-negate,unchecked-remainder,%
                       unchecked-subtract,underive,unquote,unquote-splicing,update-in,update-proxy,use,val,vals,%
                       var,var-get,var-set,var?,vary-meta,vec,vector,vector?,when,when-first,when-let,when-not,%
                       while,with-bindings,with-bindings*,with-in-str,with-loading-context,with-local-vars,%
                       with-meta,with-open,with-out-str,with-precision,xml-seq,zero?,zipmap
                       },%
                          sensitive,% ???
                          alsodigit=-,%
                          morecomment=[l];,%
                          morestring=[b]\"%
                         }[keywords,comments,strings]%"
                     
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                     ("\\paragraph{%s}" . "\\paragraph*{%s}")
                     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
      
    #+end_src

*** html

    #+begin_src emacs-lisp
      (setq org-export-html-style
        "
      <style type=\"text/css\">
        @media all
        {
          body {
            font-family: \"Helvetica Neue\", \"Lucida Grande\", \"Lucida Sans Unicode\", Helvetica, Arial, sans-serif !important;
            font-size: 14px;
            line-height: 21px;
            color: #333;
            width: 850px;
        
            max-width: 95%;
            margin: auto;
            background: #f6f6f6;
            /* background-image: url(http://orgmode.org/worg-unicorn.png); */
            background-position: 25px 5px;
            background-repeat: no-repeat;
            }
            body #content {
              padding-top: 70px;
            }
            body .title {
              margin-left: 120px;
            }
        
          /* TOC inspired by http://jashkenas.github.com/coffee-script */
          #table-of-contents {
            font-size: 10pt;
            position: fixed;
            right: 0em;
            top: 0em;
            background: white;
            -webkit-box-shadow: 0 0 1em #777777;
            -moz-box-shadow: 0 0 1em #777777;
            -webkit-border-bottom-left-radius: 5px;
            -moz-border-radius-bottomleft: 5px;
            text-align: right;
            /* ensure doesn't flow off the screen when expanded */
            max-height: 80%;
            overflow: auto; }
            #table-of-contents h2 {
              font-size: 10pt;
              max-width: 8em;
              font-weight: normal;
              padding-left: 0.5em;
              padding-left: 0.5em;
              padding-top: 0.05em;
              padding-bottom: 0.05em; }
            #table-of-contents #text-table-of-contents {
              display: none;
              text-align: left; }
            #table-of-contents:hover #text-table-of-contents {
              display: block;
              padding: 0.5em;
              margin-top: -1.5em; }
        
          #license {
            padding: .3em;
            border: 1px solid grey;
            background-color: #eeeeee;
          }
        
          h1 {
        /*
            font-family:Sans;
            font-weight:bold; */
            font-size:2.1em;
            padding:0 0 30px 0;
            margin-top: 10px;
            margin-bottom: 10px;
            margin-right: 7%;
            color: #6C5D4F;
          }
        
        /*
          h2:before {
            content: \"* \"
          }
        
          h3:before {
            content: \"** \"
          }
        
          h4:before {
            content: \"*** \"
          }
        ,*/
        
          h2 {
            font-family:Arial,sans-serif;
            font-size:1.45em;
            line-height:16px;
            padding:7px 0 0 0;
            color: #6E2432;
          }
        
          .outline-text-2 {
            margin-left: 0.1em
          }
        
          .title {
        
          }
        
          h3 {
            font-family:Arial,sans-serif;
            font-size:1.3em;
            color: #A34D32;
            margin-left: 0.6em;
          }
        
          .outline-text-3 {
            margin-left: 0.9em;
          }
        
          h4 {
            font-family:Arial,sans-serif;
            font-size:1.2em;
            margin-left: 1.2em;
            color: #A5573E;
          }
        
          .outline-text-4 {
            margin-left: 1.45em;
          }
        
          a {text-decoration: none; color: #537d7b}
          /* a:visited {text-decoration: none; color: #224444} */ /* Taken out because color too similar to text. */
          a:visited {text-decoration: none; color: #98855b}  /* this is now the color of the Unicorns horn */
          a:hover {text-decoration: underline; color: #a34d32}
        
          .todo {
            color: #CA0000;
          }
        
          .done {
            color: #006666;
          }
        
          .timestamp-kwd {
            color: #444;
          }
        
          .tag {
        
          }
        
          li {
            margin: .4em;
          }
        
          table {
            border: none;
          }
        
          td {
            border: none;
          }
        
          th {
            border: none;
          }
        
          code {
            font-size: 100%;
            color: black;
            border: 1px solid #DEDEDE;
            padding: 0px 0.2em;
          }
        
          img {
            border: none;
          }
        
          .share img {
            opacity: .4;
            -moz-opacity: .4;
            filter: alpha(opacity=40);
          }
        
          .share img:hover {
            opacity: 1;
            -moz-opacity: 1;
            filter: alpha(opacity=100);
          }
        
          /* pre {border: 1px solid #555; */
          /*      background: #EEE; */
          /*      font-size: 9pt; */
          /*      padding: 1em; */
          /*     } */
        
          /* pre { */
          /*     color: #e5e5e5; */
          /*     background-color: #000000; */
          /*     padding: 1.4em; */
          /*     border: 2px solid grey; */
          /* } */
        
          /* pre { */
          /*     background-color: #2b2b2b; */
          /*     border: 4px solid grey; */
          /*     color: #EEE; */
          /*     overflow: auto; */
          /*     padding: 1em; */
          /*  } */
        
          pre {
            font-family: Monaco, Consolas, \"Lucida Console\", monospace;
            color: gainsboro;
            background-color: #373737;
            padding: 1.2em;
            border: 1px solid #dddddd;
            overflow: auto;
        
            -moz-border-radius: 5px;
            border-radius: 5px;
      
            -webkit-box-shadow: 0px 0px 4px rgba(0,0,0,0.23);
            -moz-box-shadow: 0px 0px 4px rgba(0,0,0,0.23);
            box-shadow: 0px 0px 4px rgba(0,0,0,0.23);
          }
        
          .org-info-box {
            clear:both;
            margin-left:auto;
            margin-right:auto;
            padding:0.7em;
            /* border:1px solid #CCC; */
            /* border-radius:10px; */
            /* -moz-border-radius:10px; */
          }
          .org-info-box img {
            float:left;
            margin:0em 0.5em 0em 0em;
          }
          .org-info-box p {
            margin:0em;
            padding:0em;
          }
        
        
          .builtin {
            /* font-lock-builtin-face */
            color: #f4a460;
          }
          .comment {
            /* font-lock-comment-face */
            color: #737373;
          }
          .comment-delimiter {
            /* font-lock-comment-delimiter-face */
            color: #666666;
          }
          .constant {
            /* font-lock-constant-face */
            color: #db7093;
          }
          .doc {
            /* font-lock-doc-face */
            color: #b3b3b3;
          }
          .function-name {
            /* font-lock-function-name-face */
            color: #5f9ea0;
          }
          .headline {
            /* headline-face */
            color: #ffffff;
            background-color: #000000;
            font-weight: bold;
          }
          .keyword {
            /* font-lock-keyword-face */
            color: #4682b4;
          }
          .negation-char {
          }
          .regexp-grouping-backslash {
          }
          .regexp-grouping-construct {
          }
          .string {
            /* font-lock-string-face */
            color: #ccc79a;
          }
          .todo-comment {
            /* todo-comment-face */
            color: #ffffff;
            background-color: #000000;
            font-weight: bold;
          }
          .variable-name {
            /* font-lock-variable-name-face */
            color: #ff6a6a;
          }
          .warning {
            /* font-lock-warning-face */
            color: #ffffff;
            background-color: #cd5c5c;
            font-weight: bold;
          }
          pre.a {
            color: inherit;
            background-color: inherit;
            font: inherit;
            text-decoration: inherit;
          }
          pre.a:hover {
            text-decoration: underline;
          }
        
          /* Styles for org-info.js */
        
          .org-info-js_info-navigation
          {
            border-style:none;
          }
        
          #org-info-js_console-label
          {
            font-size:10px;
            font-weight:bold;
            white-space:nowrap;
          }
        
          .org-info-js_search-highlight
          {
            background-color:#ffff00;
            color:#000000;
            font-weight:bold;
          }
        
          #org-info-js-window
          {
            border-bottom:1px solid black;
            padding-bottom:10px;
            margin-bottom:10px;
          }
        
        
        
          .org-info-search-highlight
          {
            background-color:#adefef; /* same color as emacs default */
            color:#000000;
            font-weight:bold;
          }
        
          .org-bbdb-company {
            /* bbdb-company */
            font-style: italic;
          }
          .org-bbdb-field-name {
          }
          .org-bbdb-field-value {
          }
          .org-bbdb-name {
            /* bbdb-name */
            text-decoration: underline;
          }
          .org-bold {
            /* bold */
            font-weight: bold;
          }
          .org-bold-italic {
            /* bold-italic */
            font-weight: bold;
            font-style: italic;
          }
          .org-border {
            /* border */
            background-color: #000000;
          }
          .org-buffer-menu-buffer {
            /* buffer-menu-buffer */
            font-weight: bold;
          }
          .org-builtin {
            /* font-lock-builtin-face */
            color: #da70d6;
          }
          .org-button {
            /* button */
            text-decoration: underline;
          }
          .org-c-nonbreakable-space {
            /* c-nonbreakable-space-face */
            background-color: #ff0000;
            font-weight: bold;
          }
          .org-calendar-today {
            /* calendar-today */
            text-decoration: underline;
          }
          .org-comment {
            /* font-lock-comment-face */
            color: #b22222;
          }
          .org-comment-delimiter {
            /* font-lock-comment-delimiter-face */
            color: #b22222;
          }
          .org-constant {
            /* font-lock-constant-face */
            color: #5f9ea0;
          }
          .org-cursor {
            /* cursor */
            background-color: #000000;
          }
          .org-default {
            /* default */
            color: #000000;
            background-color: #ffffff;
          }
          .org-diary {
            /* diary */
            color: #ff0000;
          }
          .org-doc {
            /* font-lock-doc-face */
            color: #bc8f8f;
          }
          .org-escape-glyph {
            /* escape-glyph */
            color: #a52a2a;
          }
          .org-file-name-shadow {
            /* file-name-shadow */
            color: #7f7f7f;
          }
          .org-fixed-pitch {
          }
          .org-fringe {
            /* fringe */
            background-color: #f2f2f2;
          }
          .org-function-name {
            /* font-lock-function-name-face */
            color: #0000ff;
          }
          .org-header-line {
            /* header-line */
            color: #333333;
            background-color: #e5e5e5;
          }
          .org-help-argument-name {
            /* help-argument-name */
            font-style: italic;
          }
          .org-highlight {
            /* highlight */
            background-color: #b4eeb4;
          }
          .org-holiday {
            /* holiday */
            background-color: #ffc0cb;
          }
          .org-info-header-node {
            /* info-header-node */
            color: #a52a2a;
            font-weight: bold;
            font-style: italic;
          }
          .org-info-header-xref {
            /* info-header-xref */
            color: #0000ff;
            text-decoration: underline;
          }
          .org-info-menu-header {
            /* info-menu-header */
            font-weight: bold;
          }
          .org-info-menu-star {
            /* info-menu-star */
            color: #ff0000;
          }
          .org-info-node {
            /* info-node */
            color: #a52a2a;
            font-weight: bold;
            font-style: italic;
          }
          .org-info-title-1 {
            /* info-title-1 */
            font-size: 172%;
            font-weight: bold;
          }
          .org-info-title-2 {
            /* info-title-2 */
            font-size: 144%;
            font-weight: bold;
          }
          .org-info-title-3 {
            /* info-title-3 */
            font-size: 120%;
            font-weight: bold;
          }
          .org-info-title-4 {
            /* info-title-4 */
            font-weight: bold;
          }
          .org-info-xref {
            /* info-xref */
            color: #0000ff;
            text-decoration: underline;
          }
          .org-isearch {
            /* isearch */
            color: #b0e2ff;
            background-color: #cd00cd;
          }
          .org-italic {
            /* italic */
            font-style: italic;
          }
          .org-keyword {
            /* font-lock-keyword-face */
            color: #a020f0;
          }
          .org-lazy-highlight {
            /* lazy-highlight */
            background-color: #afeeee;
          }
          .org-link {
            /* link */
            color: #0000ff;
            text-decoration: underline;
          }
          .org-link-visited {
            /* link-visited */
            color: #8b008b;
            text-decoration: underline;
          }
          .org-match {
            /* match */
            background-color: #ffff00;
          }
          .org-menu {
          }
          .org-message-cited-text {
            /* message-cited-text */
            color: #ff0000;
          }
          .org-message-header-cc {
            /* message-header-cc */
            color: #191970;
          }
          .org-message-header-name {
            /* message-header-name */
            color: #6495ed;
          }
          .org-message-header-newsgroups {
            /* message-header-newsgroups */
            color: #00008b;
            font-weight: bold;
            font-style: italic;
          }
          .org-message-header-other {
            /* message-header-other */
            color: #4682b4;
          }
          .org-message-header-subject {
            /* message-header-subject */
            color: #000080;
            font-weight: bold;
          }
          .org-message-header-to {
            /* message-header-to */
            color: #191970;
            font-weight: bold;
          }
          .org-message-header-xheader {
            /* message-header-xheader */
            color: #0000ff;
          }
          .org-message-mml {
            /* message-mml */
            color: #228b22;
          }
          .org-message-separator {
            /* message-separator */
            color: #a52a2a;
          }
          .org-minibuffer-prompt {
            /* minibuffer-prompt */
            color: #0000cd;
          }
          .org-mm-uu-extract {
            /* mm-uu-extract */
            color: #006400;
            background-color: #ffffe0;
          }
          .org-mode-line {
            /* mode-line */
            color: #000000;
            background-color: #bfbfbf;
          }
          .org-mode-line-buffer-id {
            /* mode-line-buffer-id */
            font-weight: bold;
          }
          .org-mode-line-highlight {
          }
          .org-mode-line-inactive {
            /* mode-line-inactive */
            color: #333333;
            background-color: #e5e5e5;
          }
          .org-mouse {
            /* mouse */
            background-color: #000000;
          }
          .org-negation-char {
          }
          .org-next-error {
            /* next-error */
            background-color: #eedc82;
          }
          .org-nobreak-space {
            /* nobreak-space */
            color: #a52a2a;
            text-decoration: underline;
          }
          .org-org-agenda-date {
            /* org-agenda-date */
            color: #0000ff;
          }
          .org-org-agenda-date-weekend {
            /* org-agenda-date-weekend */
            color: #0000ff;
            font-weight: bold;
          }
          .org-org-agenda-restriction-lock {
            /* org-agenda-restriction-lock */
            background-color: #ffff00;
          }
          .org-org-agenda-structure {
            /* org-agenda-structure */
            color: #0000ff;
          }
          .org-org-archived {
            /* org-archived */
            color: #7f7f7f;
          }
          .org-org-code {
            /* org-code */
            color: #7f7f7f;
          }
          .org-org-column {
            /* org-column */
            background-color: #e5e5e5;
          }
          .org-org-column-title {
            /* org-column-title */
            background-color: #e5e5e5;
            font-weight: bold;
            text-decoration: underline;
          }
          .org-org-date {
            /* org-date */
            color: #a020f0;
            text-decoration: underline;
          }
          .org-org-done {
            /* org-done */
            color: #228b22;
            font-weight: bold;
          }
          .org-org-drawer {
            /* org-drawer */
            color: #0000ff;
          }
          .org-org-ellipsis {
            /* org-ellipsis */
            color: #b8860b;
            text-decoration: underline;
          }
          .org-org-formula {
            /* org-formula */
            color: #b22222;
          }
          .org-org-headline-done {
            /* org-headline-done */
            color: #bc8f8f;
          }
          .org-org-hide {
            /* org-hide */
            color: #e5e5e5;
          }
          .org-org-latex-and-export-specials {
            /* org-latex-and-export-specials */
            color: #8b4513;
          }
          .org-org-level-1 {
            /* org-level-1 */
            color: #0000ff;
          }
          .org-org-level-2 {
            /* org-level-2 */
            color: #b8860b;
          }
          .org-org-level-3 {
            /* org-level-3 */
            color: #a020f0;
          }
          .org-org-level-4 {
            /* org-level-4 */
            color: #b22222;
          }
          .org-org-level-5 {
            /* org-level-5 */
            color: #228b22;
          }
          .org-org-level-6 {
            /* org-level-6 */
            color: #5f9ea0;
          }
          .org-org-level-7 {
            /* org-level-7 */
            color: #da70d6;
          }
          .org-org-level-8 {
            /* org-level-8 */
            color: #bc8f8f;
          }
          .org-org-link {
            /* org-link */
            color: #a020f0;
            text-decoration: underline;
          }
          .org-org-property-value {
          }
          .org-org-scheduled-previously {
            /* org-scheduled-previously */
            color: #b22222;
          }
          .org-org-scheduled-today {
            /* org-scheduled-today */
            color: #006400;
          }
          .org-org-sexp-date {
            /* org-sexp-date */
            color: #a020f0;
          }
          .org-org-special-keyword {
            /* org-special-keyword */
            color: #bc8f8f;
          }
          .org-org-table {
            /* org-table */
            color: #0000ff;
          }
          .org-org-tag {
            /* org-tag */
            font-weight: bold;
          }
          .org-org-target {
            /* org-target */
            text-decoration: underline;
          }
          .org-org-time-grid {
            /* org-time-grid */
            color: #b8860b;
          }
          .org-org-todo {
            /* org-todo */
            color: #ff0000;
          }
          .org-org-upcoming-deadline {
            /* org-upcoming-deadline */
            color: #b22222;
          }
          .org-org-verbatim {
            /* org-verbatim */
            color: #7f7f7f;
            text-decoration: underline;
          }
          .org-org-warning {
            /* org-warning */
            color: #ff0000;
            font-weight: bold;
          }
          .org-outline-1 {
            /* outline-1 */
            color: #0000ff;
          }
          .org-outline-2 {
            /* outline-2 */
            color: #b8860b;
          }
          .org-outline-3 {
            /* outline-3 */
            color: #a020f0;
          }
          .org-outline-4 {
            /* outline-4 */
            color: #b22222;
          }
          .org-outline-5 {
            /* outline-5 */
            color: #228b22;
          }
          .org-outline-6 {
            /* outline-6 */
            color: #5f9ea0;
          }
          .org-outline-7 {
            /* outline-7 */
            color: #da70d6;
          }
          .org-outline-8 {
            /* outline-8 */
            color: #bc8f8f;
          }
          .outline-text-1, .outline-text-2, .outline-text-3, .outline-text-4, .outline-text-5, .outline-text-6 {
            /* Add more spacing between section. Padding, so that folding with org-info.js works as expected. */
        
          }
        
          .org-preprocessor {
            /* font-lock-preprocessor-face */
            color: #da70d6;
          }
          .org-query-replace {
            /* query-replace */
            color: #b0e2ff;
            background-color: #cd00cd;
          }
          .org-regexp-grouping-backslash {
            /* font-lock-regexp-grouping-backslash */
            font-weight: bold;
          }
          .org-regexp-grouping-construct {
            /* font-lock-regexp-grouping-construct */
            font-weight: bold;
          }
          .org-region {
            /* region */
            background-color: #eedc82;
          }
          .org-rmail-highlight {
          }
          .org-scroll-bar {
            /* scroll-bar */
            background-color: #bfbfbf;
          }
          .org-secondary-selection {
            /* secondary-selection */
            background-color: #ffff00;
          }
          .org-shadow {
            /* shadow */
            color: #7f7f7f;
          }
          .org-show-paren-match {
            /* show-paren-match */
            background-color: #40e0d0;
          }
          .org-show-paren-mismatch {
            /* show-paren-mismatch */
            color: #ffffff;
            background-color: #a020f0;
          }
          .org-string {
            /* font-lock-string-face */
            color: #bc8f8f;
          }
          .org-texinfo-heading {
            /* texinfo-heading */
            color: #0000ff;
          }
          .org-tool-bar {
            /* tool-bar */
            color: #000000;
            background-color: #bfbfbf;
          }
          .org-tooltip {
            /* tooltip */
            color: #000000;
            background-color: #ffffe0;
          }
          .org-trailing-whitespace {
            /* trailing-whitespace */
            background-color: #ff0000;
          }
          .org-type {
            /* font-lock-type-face */
            color: #228b22;
          }
          .org-underline {
            /* underline */
            text-decoration: underline;
          }
          .org-variable-name {
            /* font-lock-variable-name-face */
            color: #b8860b;
          }
          .org-variable-pitch {
          }
          .org-vertical-border {
          }
          .org-warning {
            /* font-lock-warning-face */
            color: #ff0000;
            font-weight: bold;
          }
          .rss_box {}
          .rss_title, rss_title a {}
          .rss_items {}
          .rss_item a:link, .rss_item a:visited, .rss_item a:active {}
          .rss_item a:hover {}
          .rss_date {}
        
          #postamble { 
              padding-top: 1em;
              font-size: 0.8em;
              color: #464646;
              line-height: 30%;
          }
        
        } /* END OF @media all */
        
        
        
        @media screen
        {
          #table-of-contents {
            float: right;
            border: 1px solid #CCC;
            max-width: 50%;
            overflow: auto;
          }
        } /* END OF @media screen */
      </style>")      
    #+end_src

*** babel

    #+begin_src emacs-lisp
      (require 'ob)
      (require 'ob-sh)
      (require 'ob-latex)
      (setq org-src-window-setup 'current-window)
      (setq org-src-fontify-natively t)
      (setq org-confirm-babel-evaluate nil)
    #+end_src

*** Capture

    #+begin_src emacs-lisp
      (require 'org-protocol)
    #+end_src

    #+begin_src emacs-lisp
      (defun na-page-title (link)
        (let ((title (nth 1 (split-string link "\]\\["))))
          (substring title 0 (- (length title) 2))))
      
      (setq org-capture-templates
            '(("l" "Link" entry (file+olp "~/source/org/gtd.org" "Read Later")
               "* %(na-page-title (current-kill 0))\n %i \n %a %?\n")
              ))
    #+end_src

** tramp

   C-x C-f /sudo:root@host[#port]:/path/to/file

   #+begin_src emacs-lisp
     (set-default 'tramp-default-proxies-alist (quote ((".*" "\\`root\\'" "/ssh:%h:"))))
   #+end_src

   Tramp Host Completion

   #+begin_src emacs-lisp
     (require 'tramp)
     (setq na-tramp-ssh-completions
           '((tramp-parse-sconfig "~/.ssh/config")
             ;;(tramp-parse-shosts "~/.ssh/known_hosts")
             ))
     (mapc (lambda (method)
             (tramp-set-completion-function 
              method na-tramp-ssh-completions))
           '("fcp" "rsync" "scp" "scpc" "scpx" "sftp" "ssh"))
   #+end_src

** IBuffer

   #+begin_src emacs-lisp 
     (setq ibuffer-saved-filter-groups
           (quote (("default"
                    ("Notes"
                     (or (name . "^gtd.org$")
                         (name . "^pass.gpg$")
                         (name . "^gtd.org_archive$")
                         (name . "^from-mobile.org$")))
                    ("IRC" (mode . erc-mode))
                    ("Source" (or
                               (mode . java-mode)
                               (mode . clojure-mode)
                               (mode . org-mode)
                               (mode . bibtex-mode)
                               (mode . latex-mode)
                               (mode . xml-mode)
                               (mode . scheme-mode)
                               (mode . python-mode)
                               (mode . ruby-mode)
                               (mode . haskell-mode)
                               (mode . shell-script-mode)
                               (mode . sh-mode)
                               (mode . c-mode)
                               (mode . lisp-mode)
                               (mode . cperl-mode)
                               (mode . asm-mode)
                               (mode . emacs-lisp-mode)
                               (mode . c++-mode)))
                    ("Terminal" (or (mode . term-mode)
                                    (mode . inferior-lisp-mode)
                                    (mode . inferior-python-mode)
                                    (name . "^*nrepl.*")
                                    (name . "^\\*offlineimap\\*$")))
                    ("Dired" (or (mode . dired-mode) 
                                 (mode . sr-mode)))
                    ("Emacs" (or
                              (name . "^\\*Process List\\*$")
                              (name . "^\\*Dired log\\*$")
                              (name . "^\\*info\\*$")
                              (name . "^\\*tramp.+\\*$")
                              (name . "^\\*trace.+SMTP.+\\*$")
                              (name . "^\\.todo-do")
                              (name . "^\\*scratch\\*$")
                              (name . "^\\*git-status\\*$")
                              (name . "^\\*git-diff\\*$")
                              (name . "^\\*git-commit\\*$")
                              (name . "^\\*gitsum\\*$")
                              (name . "^\\*gitsum-commit\\*$")
                              (name . "^\\*Git Command Output\\*$")
                              (name . "^\\*Org Export/Publishing Help\\*$")
                              (name . "^\\*Org-Babel Error Output\\*$")
                              (name . "^\\*Org PDF LaTeX Output\\*$")
                              (name . "^\\*Org Agenda\\*$")
                              (name . "^\\*Calendar\\*$")
                              (name . "^\\*Messages\\*$")
                              (name . "^\\*Completions\\*$")
                              (name . "^\\*Warnings\\*$")
                              (name . "^\\*Org Agenda.*\\*$")
                              (name . "^\\*Org Help\\*$")
                              (name . "^\\*Backtrace\\*$")
                              (name . "^TAGS$")
                              (name . "^\\*Help\\*$")
                              (name . "^\\*Shell Command Output\\*$")
                              (name . "^\\*Calculator\\*$")
                              (name . "^\\*Calc Trail\\*$")))))))
     
     (setq ibuffer-show-empty-filter-groups nil)
     
     (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-switch-to-saved-filter-groups "default")))
     (setq ibuffer-expert t)
     
     (setq ibuffer-formats '((mark modified read-only " "
                                   (name 18 18 :left :elide)
                                   " "
                                   (mode 16 16 :left :elide)
                                   " " filename-and-process)
                             (mark " "
                                   (name 16 -1)
                                   " " filename)))
   #+end_src

** EasyPG

   #+begin_src emacs-lisp 
     (require 'epa)
     (epa-file-enable)
     
     (cond 
      (na-os-is-darwin  (setq epg-gpg-program "/opt/local/bin/gpg"))
      (na-os-is-windows (setq epg-gpg-program (concat "/bin/gpg"))))
   #+end_src

** Text Mode

   #+begin_src emacs-lisp 
     (delete-selection-mode)
     (setq fill-column 80)
     (add-hook 'text-mode-hook 'turn-on-auto-fill)
   #+end_src

** Flyspell

   #+begin_src emacs-lisp 
     (when na-os-is-darwin
       (setq ispell-program-name "/opt/local/bin/ispell"))
     
     (autoload 'flyspell-mode "flyspell" "On-the-fly spelling checker." t)
     
     (add-hook 'message-mode-hook 'turn-on-flyspell)
     (add-hook 'text-mode-hook 'turn-on-flyspell)
     (add-to-list 'ispell-skip-region-alist '("+begin_src" . "+end_src"))
     
     (defun turn-on-flyspell ()
       "Force flyspell-mode on using a positive arg.  For use in hooks."
       (interactive)
       (flyspell-mode 1))
   #+end_src

** Lisp
*** Common

    Custom /run-lisp/ that allows you to choose which lisp to run.

    #+begin_src emacs-lisp
      (cond 
       (na-os-is-darwin
        (setq lein-path "/Users/nakkaya/Dropbox/bash/"))
       (na-os-is-linux
        (setq lein-path "/home/nakkaya/Dropbox/bash/"))
       (na-os-is-windows
        (setq lein-path "/cygdrive/c/Dropbox/bash/")))
      
      (setq lisp-programs 
            (list (list "sbcl" "/opt/local/bin/sbcl")
                  (list "gambit" "/opt/local/bin/gambit-gsc")))
      
      (defun na-run-lisp (arg)
        (interactive "P")
        (if (null arg)
            (run-lisp (second (first lisp-programs)))
          (let (choice) 
            (setq choice (completing-read "Lisp: " (mapcar 'first lisp-programs)))
            (dolist (l lisp-programs)
              (if (string= (first l) choice)
                  (run-lisp (second l)))))))
    #+end_src

*** Clojure

    #+begin_src emacs-lisp
      (load "clojure-mode.el")
    #+end_src

    Setup nrepl,

    #+begin_src emacs-lisp
      (require 'nrepl)
      (setq nrepl-popup-stacktraces nil)
    #+end_src

    #+begin_src emacs-lisp
      (defun nrepl-create-repl-buffer (process)
        "Create a repl buffer for PROCESS."
        (nrepl-init-repl-buffer
         process
         (let ((buf (generate-new-buffer-name "*nrepl*")))
           (window-configuration-to-register 'z)
           (pop-to-buffer buf)
           (jump-to-register 'z)
           buf)))
    #+end_src

    Kill nrepl process before starting a new one,

    #+begin_src emacs-lisp
      ;; Disable prompt on killing buffer with a process
      (setq kill-buffer-query-functions
            (remq 'process-kill-buffer-query-function
                  kill-buffer-query-functions))
      
      (defun nrepl-kill ()
        "Kill all nrepl buffers and processes"
        (interactive)
        (when (get-process "nrepl-server")
          (set-process-sentinel (get-process "nrepl-server")
                                (lambda (proc evt) t)))
        (dolist (buffer (buffer-list))
          (when (string-prefix-p "*nrepl" (buffer-name buffer))
            (kill-buffer buffer))))
      
      (defun nrepl-me ()
        (interactive)
        (nrepl-kill)
        (nrepl-jack-in nil))
    #+end_src


    ClojureScript mode.

    #+begin_src emacs-lisp
      (add-to-list 'auto-mode-alist '("[.]cljs$" . clojure-mode))
    #+end_src

    Eval in S-expr

    #+begin_src emacs-lisp 
      (add-hook 'clojure-mode-hook
                '(lambda ()
                   (define-key clojure-mode-map 
                     "\C-c\C-c" '(lambda ()
                                   (interactive)
                                   (let ((curr (point)))
                                     (end-of-defun)
                                     (nrepl-eval-last-expression)
                                     (goto-char curr))))))
    #+end_src

    Custom indent,

    #+begin_src emacs-lisp 
      (define-clojure-indent (from-blackboard 'defun))
    #+end_src

    org-babel support.

    #+begin_src emacs-lisp
      (add-to-list 'org-babel-tangle-lang-exts '("clojure" . "clj"))
      
      (defvar org-babel-default-header-args:clojure 
        '((:results . "silent")))
      
      (defun org-babel-execute:clojure (body params)
        "Execute a block of Clojure code with Babel."
        (nrepl-interactive-eval body))
      
      (add-hook 'org-src-mode-hook
                '(lambda ()
                   (set (make-local-variable 'nrepl-buffer-ns) 
                        (with-current-buffer 
                            (overlay-buffer org-edit-src-overlay)
                          nrepl-buffer-ns))))
      
      (provide 'ob-clojure)
      
      (define-key global-map (kbd "C-c M-n") 'nrepl-set-ns)
    #+end_src

    Replace, /fn/ with /λ/ and /#/ with /ƒ/.

    #+begin_src emacs-lisp
      (let ((fn `(("(\\(fn\\)[\[[:space:]]"
                   (0 (progn (compose-region (match-beginning 1)
                                             (match-end 1) "λ")
                             nil)))))
            (inline-fn `(("\\(#\\)("
                          (0 (progn (compose-region (match-beginning 1)
                                                    (match-end 1) "ƒ")
                                    nil))))))
            
            (font-lock-add-keywords 'clojure-mode fn)
            (font-lock-add-keywords 'clojure-mode inline-fn)
            (font-lock-add-keywords 'org-mode fn)
            (font-lock-add-keywords 'org-mode inline-fn))
    #+end_src

    #+begin_src emacs-lisp
      (global-set-key "\C-xrl" 'nrepl-me)
      (define-key clojure-mode-map "\C-xrl" 'nrepl-me)
      (add-hook 'clojure-mode-hook
                '(lambda ()
                   (define-key clojure-mode-map (kbd "C-c t") 'multi-term-next)))
    #+end_src

*** Scheme

    Sub process support for Scheme.

    #+begin_src emacs-lisp
      (add-hook 'scheme-mode-hook
                '(lambda ()
                   (define-key scheme-mode-map 
                     "\e\C-x" 'lisp-eval-defun)
                   (define-key scheme-mode-map 
                     "\C-x\C-e" 'lisp-eval-last-sexp)
                   (define-key scheme-mode-map 
                     "\C-c\C-e" 'lisp-eval-last-sexp)
                   (define-key scheme-mode-map 
                     "\C-c\C-r" 'lisp-eval-region)
                   (define-key scheme-mode-map 
                     "\C-c\C-c" '(lambda ()
                                   (interactive)
                                   (lisp-eval-string (buffer-string))))
                   (define-key scheme-mode-map 
                     "\C-c\C-z" 'run-lisp)))
    #+end_src

** Git

   #+begin_src emacs-lisp
     (require 'git)
     (require 'gitsum)
   #+end_src

   #+begin_src emacs-lisp 
     (setq git-committer-name "Nurullah Akkaya")
     (setq git-committer-email "nurullah@nakkaya.com")
     
     (setq vc-follow-symlinks t)
     
     (when (equal system-type 'darwin)
       (setenv "PATH" (concat "/opt/local/bin:/usr/local/bin:" (getenv "PATH")))
       (push "/opt/local/bin" exec-path))
     (setq exec-path (append exec-path '("/opt/local/bin")))
     
     (defun na-run-git-switch ()
       "Switch to git buffer or run git-status"
       (interactive)
       (if (string= (buffer-name (current-buffer)) "*git-status*")
           (jump-to-register 'x)
         (progn 
           (window-configuration-to-register 'x)
           (if (not (eq (get-buffer "*git-status*") nil))
               (switch-to-buffer "*git-status*")
             (git-status (read-directory-name 
                          "Select Directory: "))))))
     
     (define-key git-status-mode-map (kbd "Q")
       '(lambda ()
          (interactive)
          (jump-to-register 'z)))
     
     (define-key git-status-mode-map (kbd "K")
       '(lambda ()
          (interactive)
          (kill-buffer)
          (jump-to-register 'z)))
   #+end_src

** Haskell

   #+begin_src emacs-lisp
     (load "haskell-site-file")
     (require 'inf-haskell)
     (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
     (add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
     (add-to-list 'auto-mode-alist '("[.]hs$" . haskell-mode))
   #+end_src

** multi-term

   #+begin_src emacs-lisp
     (require 'multi-term)
     (setq multi-term-program "/bin/bash")
     
     (defun na-new-term ()
       (interactive)
       (multi-term)
       ;;pass C-c
       (define-key term-raw-map [?\C-c] 'term-send-raw))
     
     (defun na-next-term ()
       (interactive)
       (if (> (length (multi-term-list)) 0)
           (multi-term-next)
         (na-new-term)))
     
     ;; from https://bitbucket.org/tavisrudd/emacs.d/src/f3738b580538/dss-term.el
     (defun na-term-toggle-mode ()
       "Toggle between term-char-mode and term-line-mode."
       (interactive)
       (if (term-in-line-mode)
           (progn
             (term-char-mode)
             (term-send-raw-string "\C-e"))
         (term-line-mode)))
   #+end_src

** jump

   Create marks in buffer so you can jump between them using these
   functions.

   #+begin_src emacs-lisp
     (defvar na-cm-ring nil
       "List of markers that points to buffer-positions.")
     (defun na-cm-same-pos ()
       (and na-cm-ring
            (equal (point) (marker-position (car na-cm-ring)))
            (equal (current-buffer) (marker-buffer (car na-cm-ring)))))
     
     (defun na-cm-save-point (arg)
       (interactive "P")
       (if (or (and arg (< (prefix-numeric-value arg) 0))
               (na-cm-same-pos))
           (progn
             (setq na-cm-ring (cdr na-cm-ring))
             (message "Point deleted from stack (%d left)" (length na-cm-ring)))
         (setq na-cm-ring (cons (point-marker) na-cm-ring))
         (message "Point saved (%d saved)" (length na-cm-ring))))
     
     (defun na-cm-rotate (num)
       "If point differ from first position in ring then goto that.
     Otherwise rotate the ring of points and go to the now newest point in the ring"
       (interactive "P")
       (if (not na-cm-ring)
           (error "No points saved!"))
       (setq num
             (if (null num) (if (na-cm-same-pos) 1 0)
               (prefix-numeric-value num)))
       (setq num (mod num (length na-cm-ring)))
       (let ((top nil))
         (while (> num 0)
           (setq top (cons (car na-cm-ring) top))
           (setq na-cm-ring (cdr na-cm-ring))
           (setq num (1- num)))
         (setq na-cm-ring (append na-cm-ring (nreverse top)))
         (if (marker-position (car na-cm-ring))
             (progn
               (switch-to-buffer (marker-buffer (car na-cm-ring)))
               (goto-char (car na-cm-ring)))
           (setq na-cm-ring (cdr na-cm-ring))
           (na-cm-rotate 1))))
   #+end_src

** smart-tab

   #+begin_src emacs-lisp
     (require 'smart-tab)
     (global-smart-tab-mode 1)
   #+end_src

** hide/show mode

   #+begin_src emacs-lisp
     (setq hs-common-hook (lambda()
                            (local-set-key (kbd "C-c <right>") 'hs-show-block)
                            (local-set-key (kbd "C-c <left>")  'hs-hide-block)
                            (local-set-key (kbd "C-c <up>")    'hs-hide-all)
                            (local-set-key (kbd "C-c <down>")  'hs-show-all)
                            (hs-minor-mode t)))
     
     (add-hook 'clojure-mode-hook hs-common-hook)
     (add-hook 'java-mode-hook hs-common-hook)
     (add-hook 'c-mode-common-hook hs-common-hook)
   #+end_src

** mu4e

   http://wenshanren.org/?p=111
   #+begin_src emacs-lisp
     (add-to-list 'load-path "~/Dropbox/code/emacs/ext/mu4e")
     (require 'mu4e)
     (require 'org-mu4e)
     
     (setq mu4e-mu-binary "/home/nakkaya/Apps/mu/bin/mu")
     
     ;; default
     (setq mu4e-maildir "~/Maildir")
     (setq mu4e-drafts-folder "/mu.Drafts")
     (setq mu4e-sent-folder   "/mu.Sent Mail")
     (setq mu4e-trash-folder  "/mu.Trash")
     
     ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
     (setq mu4e-sent-messages-behavior 'delete)
     ;; don't prompt for applying of marks, just apply. 
     (setq mu4e-headers-leave-behavior 'apply)
     
     (setq mu4e-headers-visible-lines 4)
     
     ;; setup some handy shortcuts
     ;; you can quickly switch to your Inbox -- press ``ji''
     ;; then, when you want archive some messages, move them to
     ;; the 'Archived' folder by pressing ``ma''.
     
     (setq mu4e-maildir-shortcuts
           '( ("/INBOX"               . ?i)
              ("/Archived"    . ?a)))
     
     (add-to-list 'mu4e-bookmarks
                  '("/feeds.coding.misc"       "misc"       ?m))
     (add-to-list 'mu4e-bookmarks
                  '("/feeds.security"          "security"   ?s))
     (add-to-list 'mu4e-bookmarks
                  '("/feeds.robotics"          "robotics"   ?o))
     (add-to-list 'mu4e-bookmarks
                  '("/feeds.coding.lisp"       "lisp"       ?l))
     (add-to-list 'mu4e-bookmarks
                  '("/feeds.coding.reddit"     "reddit"     ?r))
     (add-to-list 'mu4e-bookmarks
                  '("/feeds.coding.hackernews" "hackernews" ?h))
     
     ;; allow for updating mail using 'U' in the main view:
     (setq mu4e-get-mail-command "true")
     (setq mu4e-update-interval nil)
     (setq mu4e-html2text-command "/home/nakkaya/source/bash/wash-html.sh")
     
     (add-hook 'message-mode-hook 
               (function (lambda () (smart-tab-mode -1))))
     
     (setq mu4e-compose-complete-only-personal nil)
   #+end_src

   #+begin_src emacs-lisp
     (require 'browse-url)
     (setq user-full-name "Nurullah Akkaya")
     (setq user-mail-address "nurullah@nakkaya.com")
     (setq message-signature "Nurullah Akkaya\nhttp://nakkaya.com")
     
     (defun add-mail-headers ()
       (message-add-header
        (concat "X-Homepage: http://nakkaya.com")))
     (add-hook 'message-send-hook 'add-mail-headers)
     
     (load "tls")
     (cond 
      (na-os-is-darwin  (setq na-gnutls-program "/opt/local/bin/gnutls-cli"))
      (na-os-is-linux   (setq na-gnutls-program "/usr/bin/gnutls-cli")))
     
     (setq send-mail-function 'smtpmail-send-it
           message-send-mail-function 'smtpmail-send-it
           starttls-use-gnutls t
           starttls-gnutls-program "/usr/bin/gnutls-cli"
           starttls-extra-arguments nil      
           smtpmail-gnutls-credentials '(("smtp.gmail.com" 587 nil nil))
           smtpmail-starttls-credentials  '(("smtp.gmail.com" 587 "nurullah@nakkaya.com" nil))
           smtpmail-default-smtp-server "smtp.gmail.com"
           smtpmail-smtp-server "smtp.gmail.com"
           smtpmail-smtp-service 587
           smtpmail-debug-info t
           smtpmail-local-domain "nakkaya.com")
     
     (require 'smtpmail)
     (add-hook 'mail-mode-hook 'mail-abbrevs-setup)
     (setq message-kill-buffer-on-exit t)
   #+end_src

   #+begin_src emacs-lisp
     (require 'offlineimap)
     
     (define-key mu4e-main-mode-map [(K)] 
       (defun na-kill-offlineimap ()
         (interactive)
         (other-window 1)
         (switch-to-buffer "*OfflineIMAP*")
         (shell-command-to-string "~/source/bash/kill_offlineimap")
         (sit-for 0.5)
         (offlineimap)
         (other-window 1)))
     
     (defun na-mu-switch ()
       "Switch to mu buffer or run mu"
       (interactive)
       (if (string= (buffer-name (current-buffer)) " *mu4e-main*")
           (progn ;;(mu4e-update-mail-and-index nil)
                  (jump-to-register 'y))
         (progn 
           (window-configuration-to-register 'y)
           (if (not (eq (get-buffer " *mu4e-main*") nil))
               (progn (delete-other-windows)
                      (split-window-right)
                      (switch-to-buffer " *mu4e-main*")
                      (jump-to-org-agenda)
                      (org-agenda-redo)
                      (other-window -1)
                      (mu4e-update-mail-and-index nil))
             (progn (mu4e)
                    (offlineimap)
                    (mu4e-update-mail-and-index nil))))))
     
     (define-key mu4e-main-mode-map [(C)] (defun na-compose-hook ()
                                            (interactive)
                                            (delete-other-windows)
                                            (mu4e-compose-new)))
     
     (define-key mu4e-headers-mode-map 
       [(d)] (defun na-mu4e-mu4e-headers-mark-for-delete ()
               (interactive)
               (mu4e-headers-mark-for-delete)))
     
     (defun na-mu4e-mu4e-headers-mark-for-reply ()
       (interactive)
       (mu4e-compose-reply))
     
     (define-key mu4e-headers-mode-map 
       [(r)] 'na-mu4e-mu4e-headers-mark-for-reply)
     
     (define-key mu4e-view-mode-map [(r)] 
       'na-mu4e-mu4e-headers-mark-for-reply)
     
     (add-hook 'mu4e-headers-mode-hook
               (defun na-setup-mu-view ()
                 (delete-other-windows)))
     
     (add-hook 'mu4e-main-mode-hook
               (defun na-setup-mu-main-view ()
                 (delete-other-windows)
                 (split-window-right)
                 (switch-to-buffer " *mu4e-main*")
                 (jump-to-org-agenda)
                 (org-agenda-redo)
                 (other-window -1)
                 (beginning-of-buffer)))
   #+end_src

*** Browsing URLs in Article

    #+begin_src emacs-lisp
      (require 'gnus-art)
      
      (defun gnus-article-browse-url-last ()
        (interactive)
        (let ((urls (gnus-article-get-current-urls)))
          (browse-url (car urls))))
      
      (defun gnus-article-browse-url-first ()
        (interactive)
        (let ((urls (gnus-article-get-current-urls)))
          (browse-url (car (last urls)))))
      
      (defun gnus-article-get-current-urls ()
        "Return a list of the urls found in the current `gnus-article-buffer'"
        (let (url-list)
          (save-excursion
            (set-buffer "*mu4e-view*")
            (setq url-list (gnus-article-get-urls-region (point-min) (point-max))))
          url-list))
      
      (defun gnus-article-get-urls-region (min max)
        "Return a list of urls found in the region between MIN and MAX"
        (let (url-list)
          (save-excursion
            (save-restriction
              (narrow-to-region min max)
              (goto-char (point-min))
              (while (re-search-forward gnus-button-url-regexp nil t)
                (let ((match-string (match-string-no-properties 0)))
                  (if (and (not (equal (substring match-string 0 4) "file"))
                           (not (member match-string url-list)))
                      (setq url-list (cons match-string url-list)))))))
          url-list))
      
      (define-key mu4e-view-mode-map [(f)] 'gnus-article-browse-url-first)
      (define-key mu4e-view-mode-map [(l)] 'gnus-article-browse-url-last)
    #+end_src

** ERC

   #+BEGIN_SRC emacs-lisp
     (require 'erc-join)
     (erc-autojoin-mode 1)
     (setq erc-autojoin-channels-alist
               '(("freenode.net" "#clojure" "#xmonad")
                 ("oftc.net" "#pentadactyl")))
     
     (setq erc-fill-column 75)
     (setq erc-track-remove-disconnected-buffers t)
     (setq erc-hide-list '("JOIN" "PART" "QUIT"))
     
     (load "~/Dropbox/bash/erc-auth.el" t)
   #+END_SRC

** Cmus

   #+begin_src emacs-lisp
     (defun na-cmus-switch ()
       (interactive)  
     
       (if (string= (buffer-name (current-buffer)) "cmus")
           (jump-to-register 'z)
         (progn 
           (window-configuration-to-register 'z)
           (if (not (eq (get-buffer "cmus") nil))
               (progn (delete-other-windows)
                      (switch-to-buffer "cmus"))
             (progn (delete-other-windows)
                    (term "/bin/bash")
                    (rename-buffer "cmus")
                    (term-send-raw-string "cd ~/.cmus/\n")
                    (term-send-raw-string "cmus\n")
                    )))))
   #+end_src

** tiling

   #+begin_src emacs-lisp
     (require 'tiling)
     (require 'buffer-move)
     (define-key global-map (kbd "C-M-\\") 'tiling-cycle)
     (define-key global-map (kbd "C-M-<up>"   ) 'buf-move-up)
     (define-key global-map (kbd "C-M-<down>" ) 'buf-move-down)
     (define-key global-map (kbd "C-M-<right>") 'buf-move-right)
     (define-key global-map (kbd "C-M-<left>" ) 'buf-move-left)
   #+end_src

** god-mode

   #+begin_src emacs-lisp
     (require 'god-mode)
     (global-set-key (kbd "M-ESC ESC") 'god-local-mode)
     
     (defun na-update-god-mode-cursor ()
       (setq cursor-type (if (or god-local-mode buffer-read-only)
                             'bar
                           'box)))
     
     (add-hook 'god-mode-enabled-hook 'na-update-god-mode-cursor)
     (add-hook 'god-mode-disabled-hook 'na-update-god-mode-cursor)
   #+end_src

** expand-region

   #+begin_src emacs-lisp
     (require 'expand-region)
     (global-set-key (kbd "C-=") 'er/expand-region)
   #+end_src

* Skeletons
** Setup

   #+begin_src emacs-lisp 
     (setq skeleton-pair t)
     (global-set-key (kbd "(") 'skeleton-pair-insert-maybe)
     (global-set-key (kbd "[") 'skeleton-pair-insert-maybe)
     (global-set-key (kbd "{") 'skeleton-pair-insert-maybe)
     (global-set-key (kbd "\"") 'skeleton-pair-insert-maybe)
     
     (setq abbrev-mode t)
     (add-hook 'inferior-lisp-mode-hook 'abbrev-mode)
     (add-hook 'lisp-mode-hook 'abbrev-mode)
     (add-hook 'emacs-lisp-mode-hook 'abbrev-mode)
     (add-hook 'clojure-mode-hook 'abbrev-mode)
     (add-hook 'scheme-mode-hook 'abbrev-mode)
     (add-hook 'c++-mode-hook 'abbrev-mode)
     (add-hook 'c-mode-hook 'abbrev-mode)
     (add-hook 'org-mode-hook 'abbrev-mode)
     
     (add-hook 'clojure-mode-hook 
               (lambda ()
                 (setq local-abbrev-table clojure-mode-abbrev-table)))
     
     (add-hook 'inferior-lisp-mode-hook 
               (lambda ()
                 (setq local-abbrev-table inferior-lisp-mode-abbrev-table)))
     
     (define-abbrev-table 'inferior-lisp-mode-abbrev-table '())
     (define-abbrev-table 'java-mode-abbrev-table '())
     (define-abbrev-table 'emacs-lisp-mode-abbrev-table '())
     (define-abbrev-table 'clojure-mode-abbrev-table '())
     (define-abbrev-table 'scheme-mode-abbrev-table '())
     (define-abbrev-table 'c++-mode-abbrev-table '())
   #+end_src

** Inferior Lisp

   #+begin_src emacs-lisp
     (define-skeleton skel-inferior-doc
       ""
       nil
       "(doc "_")")
     (define-abbrev inferior-lisp-mode-abbrev-table "doc" "" 'skel-inferior-doc)
     
     (define-skeleton skel-inferior-repl
       ""
       nil
       "(use 'clojure.repl)")
     (define-abbrev inferior-lisp-mode-abbrev-table "repl" "" 'skel-inferior-repl)
     
     
     (define-skeleton skel-inferior-load
       ""
       nil
       (let ((ns (read-string "Load NS> " )))
         (concat "(load \"" ns "\")" "(in-ns '" ns ")")))
     
     (define-abbrev inferior-lisp-mode-abbrev-table "load" "" 'skel-inferior-load)
     
     
     ;;NeuIslanders
     
     (define-skeleton skel-inferior-exec-sim
       ""
       nil
       "(exec-sim  "_")")
     (define-abbrev inferior-lisp-mode-abbrev-table "es" "" 'skel-inferior-exec-sim)
     
     (define-skeleton skel-inferior-exec-tree
       ""
       nil
       "(exec-tree  "_")")
     (define-abbrev inferior-lisp-mode-abbrev-table "et" "" 'skel-inferior-exec-tree)
     
     (define-abbrev inferior-lisp-mode-abbrev-table "ppw" "(pprint-world)")
   #+end_src

** Clojure

   #+begin_src emacs-lisp 
     (define-skeleton skel-clojure-println
       ""
       nil
       "(println "_")")
     (define-abbrev clojure-mode-abbrev-table "prt" "" 'skel-clojure-println)
     
     (define-skeleton skel-clojure-defn
       ""
       nil
       "(defn "_" [])")
     (define-abbrev clojure-mode-abbrev-table "defn" "" 'skel-clojure-defn)
     
     (define-skeleton skel-clojure-defn-
       ""
       nil
       "(defn- "_" [])")
     (define-abbrev clojure-mode-abbrev-table "def-" "" 'skel-clojure-defn- )
     
     (define-skeleton skel-clojure-if
       ""
       nil
       "(if ("_"))")
     (define-abbrev clojure-mode-abbrev-table "if" "" 'skel-clojure-if )
     
     (define-skeleton skel-clojure-let
       ""
       nil
       "(let ["_"] )")
     (define-abbrev clojure-mode-abbrev-table "let" "" 'skel-clojure-let)
     
     (define-skeleton skel-clojure-ref-set
       ""
       nil
       "(dosync (ref-set "_" ))")
     (define-abbrev clojure-mode-abbrev-table "refs" "" 'skel-clojure-ref-set)
     
     (define-skeleton skel-clojure-proxy
       ""
       nil
       "(proxy ["_"] [] "
       \n > ")")
     (define-abbrev clojure-mode-abbrev-table "proxy" "" 'skel-clojure-proxy)
     
     (define-skeleton skel-clojure-doseq
       ""
       nil
       "(doseq ["_"] "
       \n > ")")
     (define-abbrev clojure-mode-abbrev-table "doseq" "" 'skel-clojure-doseq)
     
     (define-skeleton skel-clojure-do
       ""
       nil
       "(do "_" "
       \n > ")")
     (define-abbrev clojure-mode-abbrev-table "do" "" 'skel-clojure-do)
     
     (define-skeleton skel-clojure-reduce
       ""
       nil
       "(reduce (fn[h v] ) "_" ) ")
     
     (define-abbrev clojure-mode-abbrev-table "reduce" "" 'skel-clojure-reduce)
     
     (define-skeleton skel-clojure-try
       ""
       nil
       "(try "_" (catch Exception e (println e)))")
     
     (define-abbrev clojure-mode-abbrev-table "try" "" 'skel-clojure-try)
     
     (define-skeleton skel-clojure-map
       ""
       nil
       "(map #() "_")")
     
     (define-abbrev clojure-mode-abbrev-table "map" "" 'skel-clojure-map)
     
   #+end_src

** Scheme

   #+begin_src emacs-lisp 
     (define-skeleton skel-scheme-display
       ""
       nil
       "(display "_")")
     (define-abbrev scheme-mode-abbrev-table "prt" "" 'skel-scheme-display)
     
     (define-skeleton skel-scheme-defn
       ""
       nil
       "(define ("_"))")
     (define-abbrev scheme-mode-abbrev-table "defn" "" 'skel-scheme-defn)
     
     (define-skeleton skel-scheme-if
       ""
       nil
       "(if ("_"))")
     (define-abbrev scheme-mode-abbrev-table "if" "" 'skel-scheme-if )
     
     (define-skeleton skel-scheme-let
       ""
       nil
       "(let ("_"))")
     (define-abbrev scheme-mode-abbrev-table "let" "" 'skel-scheme-let)
     
     (define-skeleton skel-scheme-for-each
       ""
       nil
       "(for-each (lambda ("_") ()))")
     (define-abbrev scheme-mode-abbrev-table "fore" "" 'skel-scheme-for-each)
     
     (define-skeleton skel-scheme-begin
       ""
       nil
       "(begin "_" "
       \n > ")")
     (define-abbrev scheme-mode-abbrev-table "begin" "" 'skel-scheme-do)
     
     (define-skeleton skel-scheme-reduce
       ""
       nil
       "(fold-right (lambda ("_") ()))")
     (define-abbrev scheme-mode-abbrev-table "reduce" "" 'skel-scheme-reduce)
     
     (define-skeleton skel-scheme-map
       ""
       nil
       "(map (lambda ("_") ()))")
     (define-abbrev scheme-mode-abbrev-table "map" "" 'skel-scheme-map)
     
   #+end_src

** Cpp

   #+begin_src emacs-lisp 
     (define-skeleton skel-cpp-prt
       ""
       nil
       \n >
       "cout<< " _ " <<endl;"
       \n >)
     (define-abbrev c++-mode-abbrev-table "cout"  "" 'skel-cpp-prt )
     
   #+end_src

** ELisp

   #+begin_src emacs-lisp 
     (define-skeleton skel-list-insert
       ""
       nil
       "(insert "_" )")
     (define-abbrev lisp-mode-abbrev-table "ins" "" 'skel-list-insert )
     
     (define-skeleton skel-list-setq
       ""
       nil
       "(setq "_" )")
     (define-abbrev lisp-mode-abbrev-table "set" "" 'skel-list-setq )
     
     (define-skeleton skel-list-deffun
       ""
       nil
       "(defun "_" () "
       \n >
       ")")
     (define-abbrev lisp-mode-abbrev-table "deff" "" 'skel-list-deffun )
     
     (define-skeleton skel-list-defvar
       ""
       nil
       "(defvar "_" )")
     (define-abbrev lisp-mode-abbrev-table "defv" "" 'skel-list-defvar )
     
     (define-skeleton skel-list-if
       ""
       nil
       "(if "
       _
       \n >
       " )")
     (define-abbrev lisp-mode-abbrev-table "if" "" 'skel-list-if )
     
     (define-skeleton skel-list-progn
       ""
       nil
       "(progn "
       _
       \n >
       " )")
     (define-abbrev lisp-mode-abbrev-table "progn" "" 'skel-list-progn )
     
   #+end_src

** Java

   #+begin_src emacs-lisp 
     (define-skeleton skel-java-println
       "Insert a Java println Statement"
       nil
       "System.out.println(" _ " );")
     (define-abbrev java-mode-abbrev-table "prt" "" 'skel-java-println )
     
     (define-skeleton skel-java-ife
       "Insert a Common If else Statement"
       nil
       \n >
       "if (" _ " ){"
       \n >
       "} else {"
       \n >
       "}")
     (define-abbrev java-mode-abbrev-table "ife" "" 'skel-java-ife )
     
     (define-skeleton skel-java-try
       "Insert a try catch block"
       nil
       \n >
       "try{"
       \n >
       _ \n
       "}catch( Exception e ) {" >
       " "
       \n > \n
       "}" >)
     (define-abbrev java-mode-abbrev-table "try" "" 'skel-java-try )
     
     (define-skeleton skel-java-if
       "Insert a Common If Statement"
       nil
       \n >
       "if (" _ " ){"
       \n >
       "}")
     
     (define-abbrev java-mode-abbrev-table "if" "" 'skel-java-if )
     (define-abbrev c++-mode-abbrev-table "if"  "" 'skel-java-if )
     
     (define-skeleton skel-java-for1
       "Insert a Common If Statement"
       nil
       \n >
       "for( int i=0 ; i<" _ " ;i++){"
       \n >
       "}")
     (define-abbrev java-mode-abbrev-table "for1" "" 'skel-java-for1 )
     
     
     (define-skeleton skel-java-timer
       "creates timing statements"
       nil
       \n >
       "final long start = System.currentTimeMillis();"
       \n >
       "System.out.println( Long.toString( System.currentTimeMillis() - start ) ) ;")
     (define-abbrev java-mode-abbrev-table "jtimer" "" 'skel-java-timer )
     
     (define-skeleton skel-java-comment
       "creates javadoc comment"
       nil
       \n >
       "/*"
       \n >
       "*"
       \n >
       "*"
       \n >
       "*"
       \n >
       "* @param"
       \n >
       "* @return"
       \n >
       "* @exception"
       \n >
       "*"
       \n >
       "*/"
       \n >)
     (define-abbrev java-mode-abbrev-table "jdcomment" "" 'skel-java-comment )
     
   #+end_src

** Org

   #+begin_src emacs-lisp
     (define-skeleton skel-org-src
       "Insert org src block clojure."
       nil
       >
       "#+begin_src clojure"
       \n >
        _ 
       \n > 
        "#""+end_src"
        >)
     (define-abbrev text-mode-abbrev-table "ocsrc" "" 'skel-org-src)
   #+end_src

   #+begin_src emacs-lisp
     (define-skeleton skel-org-note
       "Insert org template for a note."
       nil
       >
       "#+Title: " _ \n >
       "#+DATE:" \n >
       "#+OPTIONS: author:nil creator:nil toc:nil" \n >
       "#+LATEX_HEADER: \\usepackage[cm]{fullpage}" \n >
       "#+LATEX_HEADER: \\usepackage{listings}" \n >
       "#+LATEX_HEADER: \\renewcommand{\\rmdefault}{phv} % Arial" \n >
       "#+LATEX_HEADER: \\usepackage{hyperref}" \n >
       "#+LATEX_HEADER: \\hypersetup{" \n >
       "#+LATEX_HEADER:     colorlinks,%" \n >
       "#+LATEX_HEADER:     citecolor=black,%" \n >
       "#+LATEX_HEADER:     filecolor=black,%" \n >
       "#+LATEX_HEADER:     linkcolor=blue,%" \n >
       "#+LATEX_HEADER:     urlcolor=black" \n >
       "#+LATEX_HEADER: }" \n >
       >)
   #+end_src
* After Load

  #+begin_src emacs-lisp
    (delete-other-windows)
  #+end_src
